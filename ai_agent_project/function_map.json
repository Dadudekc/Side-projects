[
    {
        "name": "categorize_file",
        "file": ".\\1.py",
        "start_line": 21,
        "end_line": 27,
        "params": [
            "file_name"
        ],
        "docstring": "Determine the category of a file based on its extension."
    },
    {
        "name": "scan_directory",
        "file": ".\\1.py",
        "start_line": 29,
        "end_line": 42,
        "params": [
            "directory"
        ],
        "docstring": "Recursively scans the project directory and categorizes files."
    },
    {
        "name": "__init__",
        "file": ".\\all_stubs.py",
        "start_line": 52,
        "end_line": 53,
        "params": [
            "self",
            "project_name"
        ],
        "docstring": null
    },
    {
        "name": "register_agent",
        "file": ".\\all_stubs.py",
        "start_line": 60,
        "end_line": 63,
        "params": [
            "cls",
            "agent_name",
            "agent_class"
        ],
        "docstring": "Register an agent class under a given name."
    },
    {
        "name": "get_agent",
        "file": ".\\all_stubs.py",
        "start_line": 66,
        "end_line": 69,
        "params": [
            "cls",
            "agent_name"
        ],
        "docstring": "Retrieve an agent class by name. Returns None if not found."
    },
    {
        "name": "__init__",
        "file": ".\\all_stubs.py",
        "start_line": 86,
        "end_line": 94,
        "params": [
            "self",
            "name"
        ],
        "docstring": "Initializes the CustomAgent with a unique name and connects to global memory.\n\nArgs:\n    name (str): The name of the agent (default: \"CustomAgent\")."
    },
    {
        "name": "describe_capabilities",
        "file": ".\\all_stubs.py",
        "start_line": 96,
        "end_line": 103,
        "params": [
            "self"
        ],
        "docstring": "Returns a description of the agent's capabilities.\n\nReturns:\n    str: A brief description of what the agent can do."
    },
    {
        "name": "interact",
        "file": ".\\all_stubs.py",
        "start_line": 105,
        "end_line": 125,
        "params": [
            "self",
            "user_input"
        ],
        "docstring": "Processes user input by checking memory for a stored response or generating a new one.\n\nArgs:\n    user_input (str): The user's message.\n\nReturns:\n    str: A response based on previous interactions or a new fallback message."
    },
    {
        "name": "solve_task",
        "file": ".\\all_stubs.py",
        "start_line": 127,
        "end_line": 144,
        "params": [
            "self",
            "task"
        ],
        "docstring": "Processes a structured task and returns the result.\n\nArgs:\n    task (str): The task to be performed.\n    **kwargs: Additional parameters.\n\nReturns:\n    dict: A structured response based on the requested task."
    },
    {
        "name": "shutdown",
        "file": ".\\all_stubs.py",
        "start_line": 146,
        "end_line": 150,
        "params": [
            "self"
        ],
        "docstring": "Performs cleanup operations and logs a shutdown message."
    },
    {
        "name": "deepseek_chunk_code",
        "file": ".\\all_stubs.py",
        "start_line": 158,
        "end_line": 162,
        "params": [
            "file_content"
        ],
        "docstring": "Example chunking logic for debugging. Returns a list of text chunks."
    },
    {
        "name": "run_deepseek_ollama_analysis",
        "file": ".\\all_stubs.py",
        "start_line": 165,
        "end_line": 167,
        "params": [
            "chunks",
            "error_msg"
        ],
        "docstring": "Placeholder for local model analysis, returns a mock patch suggestion."
    },
    {
        "name": "parse_diff_suggestion",
        "file": ".\\all_stubs.py",
        "start_line": 170,
        "end_line": 172,
        "params": [
            "suggestion"
        ],
        "docstring": "Converts a raw suggestion into a patch structure."
    },
    {
        "name": "apply_diff_patch",
        "file": ".\\all_stubs.py",
        "start_line": 175,
        "end_line": 177,
        "params": [
            "file_list",
            "patch"
        ],
        "docstring": "Applies a naive patch by string replacement or real patch logic."
    },
    {
        "name": "solve_task",
        "file": ".\\all_stubs.py",
        "start_line": 186,
        "end_line": 188,
        "params": [
            "self",
            "task_type",
            "error"
        ],
        "docstring": null
    },
    {
        "name": "__init__",
        "file": ".\\all_stubs.py",
        "start_line": 192,
        "end_line": 194,
        "params": [
            "self",
            "project_name"
        ],
        "docstring": null
    },
    {
        "name": "create_journal_entry",
        "file": ".\\all_stubs.py",
        "start_line": 196,
        "end_line": 200,
        "params": [
            "self",
            "title",
            "content",
            "tags"
        ],
        "docstring": null
    },
    {
        "name": "update_journal_entry",
        "file": ".\\all_stubs.py",
        "start_line": 202,
        "end_line": 205,
        "params": [
            "self",
            "title",
            "new_content"
        ],
        "docstring": null
    },
    {
        "name": "__init__",
        "file": ".\\all_stubs.py",
        "start_line": 216,
        "end_line": 217,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "forecast",
        "file": ".\\all_stubs.py",
        "start_line": 219,
        "end_line": 247,
        "params": [
            "self",
            "historical_data"
        ],
        "docstring": "Predicts future trends using GPT-4 Turbo.\n\nArgs:\n    historical_data (List[Dict]): List of past records.\n\nReturns:\n    str: Predicted outcome."
    },
    {
        "name": "__init__",
        "file": ".\\all_stubs.py",
        "start_line": 258,
        "end_line": 259,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "add_knowledge",
        "file": ".\\all_stubs.py",
        "start_line": 261,
        "end_line": 272,
        "params": [
            "self",
            "subject",
            "relation",
            "obj"
        ],
        "docstring": "Stores relationships in a knowledge graph.\n\nArgs:\n    subject (str): The main subject.\n    relation (str): The relationship.\n    obj (str): The connected entity."
    },
    {
        "name": "get_relations",
        "file": ".\\all_stubs.py",
        "start_line": 274,
        "end_line": 284,
        "params": [
            "self",
            "subject"
        ],
        "docstring": "Retrieves all relations for a given subject.\n\nArgs:\n    subject (str): The entity to look up.\n\nReturns:\n    List[Dict]: Related entities."
    },
    {
        "name": "__init__",
        "file": ".\\all_stubs.py",
        "start_line": 298,
        "end_line": 299,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "load_memory",
        "file": ".\\all_stubs.py",
        "start_line": 301,
        "end_line": 306,
        "params": [
            "self"
        ],
        "docstring": "Loads stored interactions from memory file."
    },
    {
        "name": "save_memory",
        "file": ".\\all_stubs.py",
        "start_line": 308,
        "end_line": 311,
        "params": [
            "self"
        ],
        "docstring": "Saves memory interactions to file."
    },
    {
        "name": "store_interaction",
        "file": ".\\all_stubs.py",
        "start_line": 313,
        "end_line": 316,
        "params": [
            "self",
            "user_query",
            "response"
        ],
        "docstring": "Stores interactions for future reference."
    },
    {
        "name": "retrieve_similar_query",
        "file": ".\\all_stubs.py",
        "start_line": 318,
        "end_line": 323,
        "params": [
            "self",
            "user_query"
        ],
        "docstring": "Finds similar queries and suggests responses."
    },
    {
        "name": "__init__",
        "file": ".\\all_stubs.py",
        "start_line": 340,
        "end_line": 343,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "describe_capabilities",
        "file": ".\\all_stubs.py",
        "start_line": 345,
        "end_line": 352,
        "params": [
            "self"
        ],
        "docstring": "Return a description of this agent's capabilities.\n\nReturns:\n    str: A description of the agent's functionalities."
    },
    {
        "name": "respond",
        "file": ".\\all_stubs.py",
        "start_line": 354,
        "end_line": 376,
        "params": [
            "self",
            "user_input"
        ],
        "docstring": "Generates a response based on reasoning and real-time data.\n\nArgs:\n    user_input (str): The user's query.\n\nReturns:\n    str: A formatted response from Professor Synapse."
    },
    {
        "name": "fetch_data",
        "file": ".\\all_stubs.py",
        "start_line": 378,
        "end_line": 394,
        "params": [
            "self",
            "query"
        ],
        "docstring": "Fetches real-time data based on the query type (e.g., stock, crypto, news).\n\nArgs:\n    query (str): User's query.\n\nReturns:\n    str: Retrieved data or default message."
    },
    {
        "name": "learn_knowledge",
        "file": ".\\all_stubs.py",
        "start_line": 396,
        "end_line": 405,
        "params": [
            "self",
            "subject",
            "relation",
            "obj"
        ],
        "docstring": "Teaches the agent new knowledge by updating its graph.\n\nArgs:\n    subject (str): The subject.\n    relation (str): The relationship.\n    obj (str): The connected entity."
    },
    {
        "name": "solve_task",
        "file": ".\\all_stubs.py",
        "start_line": 407,
        "end_line": 424,
        "params": [
            "self",
            "task"
        ],
        "docstring": "Handles reasoning, forecasting, and knowledge-based tasks.\n\nArgs:\n    task (str): The task to be executed.\n\nReturns:\n    dict: The structured response."
    },
    {
        "name": "__init__",
        "file": ".\\all_stubs.py",
        "start_line": 450,
        "end_line": 455,
        "params": [
            "self",
            "api_key"
        ],
        "docstring": null
    },
    {
        "name": "_ensure_file_exists",
        "file": ".\\all_stubs.py",
        "start_line": 457,
        "end_line": 460,
        "params": [
            "self",
            "file_path"
        ],
        "docstring": null
    },
    {
        "name": "_load_ai_performance",
        "file": ".\\all_stubs.py",
        "start_line": 462,
        "end_line": 469,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "_save_ai_performance",
        "file": ".\\all_stubs.py",
        "start_line": 471,
        "end_line": 477,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "_record_ai_performance",
        "file": ".\\all_stubs.py",
        "start_line": 479,
        "end_line": 488,
        "params": [
            "self",
            "model_used",
            "success"
        ],
        "docstring": null
    },
    {
        "name": "generate_patch",
        "file": ".\\all_stubs.py",
        "start_line": 490,
        "end_line": 499,
        "params": [
            "self",
            "error_message",
            "code_context",
            "test_file"
        ],
        "docstring": null
    },
    {
        "name": "_format_prompt",
        "file": ".\\all_stubs.py",
        "start_line": 501,
        "end_line": 508,
        "params": [
            "self",
            "error_message",
            "code_context",
            "test_file"
        ],
        "docstring": null
    },
    {
        "name": "_generate_patch_with_retries",
        "file": ".\\all_stubs.py",
        "start_line": 510,
        "end_line": 518,
        "params": [
            "self",
            "prompt"
        ],
        "docstring": null
    },
    {
        "name": "_modify_prompt",
        "file": ".\\all_stubs.py",
        "start_line": 520,
        "end_line": 527,
        "params": [
            "self",
            "prompt",
            "attempt"
        ],
        "docstring": null
    },
    {
        "name": "_generate_with_openai",
        "file": ".\\all_stubs.py",
        "start_line": 529,
        "end_line": 543,
        "params": [
            "self",
            "prompt"
        ],
        "docstring": null
    },
    {
        "name": "_validate_patch",
        "file": ".\\all_stubs.py",
        "start_line": 545,
        "end_line": 550,
        "params": [
            "self",
            "patch"
        ],
        "docstring": null
    },
    {
        "name": "__init__",
        "file": ".\\all_stubs.py",
        "start_line": 575,
        "end_line": 579,
        "params": [
            "self",
            "model_path"
        ],
        "docstring": null
    },
    {
        "name": "_ensure_file_exists",
        "file": ".\\all_stubs.py",
        "start_line": 581,
        "end_line": 584,
        "params": [
            "self",
            "file_path"
        ],
        "docstring": null
    },
    {
        "name": "_load_ai_performance",
        "file": ".\\all_stubs.py",
        "start_line": 586,
        "end_line": 592,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "_save_ai_performance",
        "file": ".\\all_stubs.py",
        "start_line": 594,
        "end_line": 599,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "_record_ai_performance",
        "file": ".\\all_stubs.py",
        "start_line": 601,
        "end_line": 610,
        "params": [
            "self",
            "model_used",
            "success"
        ],
        "docstring": null
    },
    {
        "name": "generate_patch",
        "file": ".\\all_stubs.py",
        "start_line": 612,
        "end_line": 630,
        "params": [
            "self",
            "error_message",
            "code_context",
            "test_file"
        ],
        "docstring": null
    },
    {
        "name": "_format_prompt",
        "file": ".\\all_stubs.py",
        "start_line": 632,
        "end_line": 639,
        "params": [
            "self",
            "error_message",
            "code_context",
            "test_file"
        ],
        "docstring": null
    },
    {
        "name": "_modify_prompt",
        "file": ".\\all_stubs.py",
        "start_line": 641,
        "end_line": 650,
        "params": [
            "self",
            "prompt",
            "attempt"
        ],
        "docstring": null
    },
    {
        "name": "_generate_patch_with_fallback",
        "file": ".\\all_stubs.py",
        "start_line": 652,
        "end_line": 659,
        "params": [
            "self",
            "prompt"
        ],
        "docstring": null
    },
    {
        "name": "_generate_with_mistral",
        "file": ".\\all_stubs.py",
        "start_line": 661,
        "end_line": 674,
        "params": [
            "self",
            "prompt"
        ],
        "docstring": null
    },
    {
        "name": "_generate_with_openai",
        "file": ".\\all_stubs.py",
        "start_line": 676,
        "end_line": 690,
        "params": [
            "self",
            "prompt"
        ],
        "docstring": null
    },
    {
        "name": "_validate_patch",
        "file": ".\\all_stubs.py",
        "start_line": 692,
        "end_line": 697,
        "params": [
            "self",
            "patch"
        ],
        "docstring": null
    },
    {
        "name": "__init__",
        "file": ".\\all_stubs.py",
        "start_line": 720,
        "end_line": 723,
        "params": [
            "self",
            "model_path"
        ],
        "docstring": null
    },
    {
        "name": "_load_ai_performance",
        "file": ".\\all_stubs.py",
        "start_line": 725,
        "end_line": 732,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "_save_ai_performance",
        "file": ".\\all_stubs.py",
        "start_line": 734,
        "end_line": 739,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "_record_ai_performance",
        "file": ".\\all_stubs.py",
        "start_line": 741,
        "end_line": 750,
        "params": [
            "self",
            "model_used",
            "success"
        ],
        "docstring": null
    },
    {
        "name": "generate_patch",
        "file": ".\\all_stubs.py",
        "start_line": 752,
        "end_line": 769,
        "params": [
            "self",
            "error_message",
            "code_context",
            "test_file"
        ],
        "docstring": null
    },
    {
        "name": "_format_prompt",
        "file": ".\\all_stubs.py",
        "start_line": 771,
        "end_line": 778,
        "params": [
            "self",
            "error_message",
            "code_context",
            "test_file"
        ],
        "docstring": null
    },
    {
        "name": "_modify_prompt",
        "file": ".\\all_stubs.py",
        "start_line": 780,
        "end_line": 789,
        "params": [
            "self",
            "prompt",
            "attempt"
        ],
        "docstring": null
    },
    {
        "name": "_generate_patch_with_fallback",
        "file": ".\\all_stubs.py",
        "start_line": 791,
        "end_line": 798,
        "params": [
            "self",
            "prompt"
        ],
        "docstring": null
    },
    {
        "name": "_generate_with_deepseek",
        "file": ".\\all_stubs.py",
        "start_line": 800,
        "end_line": 814,
        "params": [
            "self",
            "prompt"
        ],
        "docstring": null
    },
    {
        "name": "_generate_with_openai",
        "file": ".\\all_stubs.py",
        "start_line": 816,
        "end_line": 831,
        "params": [
            "self",
            "prompt"
        ],
        "docstring": null
    },
    {
        "name": "_validate_patch",
        "file": ".\\all_stubs.py",
        "start_line": 833,
        "end_line": 839,
        "params": [
            "self",
            "patch"
        ],
        "docstring": null
    },
    {
        "name": "_simulate_patch",
        "file": ".\\all_stubs.py",
        "start_line": 841,
        "end_line": 848,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "__init__",
        "file": ".\\all_stubs.py",
        "start_line": 874,
        "end_line": 882,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "generate_patch",
        "file": ".\\all_stubs.py",
        "start_line": 884,
        "end_line": 900,
        "params": [
            "self",
            "error_msg",
            "code_context",
            "test_file"
        ],
        "docstring": null
    },
    {
        "name": "save_model",
        "file": ".\\all_stubs.py",
        "start_line": 902,
        "end_line": 910,
        "params": [
            "self",
            "model_name",
            "model_data"
        ],
        "docstring": null
    },
    {
        "name": "load_model",
        "file": ".\\all_stubs.py",
        "start_line": 912,
        "end_line": 924,
        "params": [
            "self",
            "model_name"
        ],
        "docstring": null
    },
    {
        "name": "_format_prompt",
        "file": ".\\all_stubs.py",
        "start_line": 926,
        "end_line": 933,
        "params": [
            "self",
            "error_msg",
            "code_context",
            "test_file"
        ],
        "docstring": null
    },
    {
        "name": "_compute_error_signature",
        "file": ".\\all_stubs.py",
        "start_line": 935,
        "end_line": 937,
        "params": [
            "self",
            "error_msg",
            "code_context"
        ],
        "docstring": null
    },
    {
        "name": "_generate_with_model",
        "file": ".\\all_stubs.py",
        "start_line": 939,
        "end_line": 965,
        "params": [
            "self",
            "model",
            "prompt"
        ],
        "docstring": null
    },
    {
        "name": "_simulate_model_response",
        "file": ".\\all_stubs.py",
        "start_line": 967,
        "end_line": 969,
        "params": [
            "self",
            "model",
            "prompt"
        ],
        "docstring": null
    },
    {
        "name": "get_confidence",
        "file": ".\\all_stubs.py",
        "start_line": 977,
        "end_line": 979,
        "params": [
            "self",
            "signature"
        ],
        "docstring": "Returns a float in [0,1], representing the confidence for a signature."
    },
    {
        "name": "assign_confidence_score",
        "file": ".\\all_stubs.py",
        "start_line": 981,
        "end_line": 983,
        "params": [
            "self",
            "signature",
            "confidence"
        ],
        "docstring": "Stores or updates confidence for a given signature."
    },
    {
        "name": "__init__",
        "file": ".\\all_stubs.py",
        "start_line": 987,
        "end_line": 988,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "_compute_error_signature",
        "file": ".\\all_stubs.py",
        "start_line": 990,
        "end_line": 993,
        "params": [
            "self",
            "error_msg",
            "code_context"
        ],
        "docstring": "Generates a unique signature for error messages and code context."
    },
    {
        "name": "_format_prompt",
        "file": ".\\all_stubs.py",
        "start_line": 995,
        "end_line": 999,
        "params": [
            "self",
            "error_msg",
            "code_context",
            "file_name"
        ],
        "docstring": null
    },
    {
        "name": "_generate_with_ollama",
        "file": ".\\all_stubs.py",
        "start_line": 1001,
        "end_line": 1013,
        "params": [
            "self",
            "model",
            "prompt"
        ],
        "docstring": null
    },
    {
        "name": "_generate_with_openai",
        "file": ".\\all_stubs.py",
        "start_line": 1015,
        "end_line": 1027,
        "params": [
            "self",
            "prompt"
        ],
        "docstring": null
    },
    {
        "name": "generate_patch",
        "file": ".\\all_stubs.py",
        "start_line": 1029,
        "end_line": 1046,
        "params": [
            "self",
            "error_msg",
            "code_context",
            "file_name"
        ],
        "docstring": "Attempts to generate a patch for the given error and code context."
    },
    {
        "name": "search_learned_fix",
        "file": ".\\all_stubs.py",
        "start_line": 1054,
        "end_line": 1055,
        "params": [
            "self",
            "error_message"
        ],
        "docstring": null
    },
    {
        "name": "store_fix",
        "file": ".\\all_stubs.py",
        "start_line": 1057,
        "end_line": 1058,
        "params": [
            "self",
            "error_message",
            "fix"
        ],
        "docstring": null
    },
    {
        "name": "record_failed_patch",
        "file": ".\\all_stubs.py",
        "start_line": 1062,
        "end_line": 1063,
        "params": [
            "self",
            "signature",
            "patch"
        ],
        "docstring": null
    },
    {
        "name": "get_failed_patches",
        "file": ".\\all_stubs.py",
        "start_line": 1065,
        "end_line": 1066,
        "params": [
            "self",
            "signature"
        ],
        "docstring": null
    },
    {
        "name": "apply_fix",
        "file": ".\\all_stubs.py",
        "start_line": 1070,
        "end_line": 1072,
        "params": [
            "self",
            "failure_dict"
        ],
        "docstring": null
    },
    {
        "name": "apply_patch",
        "file": ".\\all_stubs.py",
        "start_line": 1076,
        "end_line": 1077,
        "params": [
            "self",
            "patch"
        ],
        "docstring": null
    },
    {
        "name": "validate_patch",
        "file": ".\\all_stubs.py",
        "start_line": 1079,
        "end_line": 1081,
        "params": [
            "self",
            "patch"
        ],
        "docstring": null
    },
    {
        "name": "retry_patch",
        "file": ".\\all_stubs.py",
        "start_line": 1089,
        "end_line": 1091,
        "params": [
            "self",
            "error_msg"
        ],
        "docstring": null
    },
    {
        "name": "manage_fix",
        "file": ".\\all_stubs.py",
        "start_line": 1095,
        "end_line": 1097,
        "params": [
            "self",
            "error_details"
        ],
        "docstring": null
    },
    {
        "name": "send_email_report",
        "file": ".\\all_stubs.py",
        "start_line": 1105,
        "end_line": 1106,
        "params": [
            "self",
            "to_address",
            "subject",
            "body"
        ],
        "docstring": null
    },
    {
        "name": "parse_test_failures",
        "file": ".\\all_stubs.py",
        "start_line": 1110,
        "end_line": 1112,
        "params": [
            "self",
            "output"
        ],
        "docstring": null
    },
    {
        "name": "run",
        "file": ".\\all_stubs.py",
        "start_line": 1120,
        "end_line": 1121,
        "params": [
            "self",
            "args"
        ],
        "docstring": null
    },
    {
        "name": "log",
        "file": ".\\all_stubs.py",
        "start_line": 1125,
        "end_line": 1126,
        "params": [
            "self",
            "message"
        ],
        "docstring": null
    },
    {
        "name": "report",
        "file": ".\\all_stubs.py",
        "start_line": 1130,
        "end_line": 1131,
        "params": [
            "self",
            "details"
        ],
        "docstring": null
    },
    {
        "name": "run_debugging",
        "file": ".\\all_stubs.py",
        "start_line": 1135,
        "end_line": 1136,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "decide_strategy",
        "file": ".\\all_stubs.py",
        "start_line": 1140,
        "end_line": 1142,
        "params": [
            "self",
            "error_info"
        ],
        "docstring": null
    },
    {
        "name": "auto_fix",
        "file": ".\\all_stubs.py",
        "start_line": 1146,
        "end_line": 1148,
        "params": [
            "self",
            "error"
        ],
        "docstring": null
    },
    {
        "name": "generate_report",
        "file": ".\\all_stubs.py",
        "start_line": 1152,
        "end_line": 1154,
        "params": [
            "self",
            "details"
        ],
        "docstring": null
    },
    {
        "name": "rollback",
        "file": ".\\all_stubs.py",
        "start_line": 1158,
        "end_line": 1160,
        "params": [
            "self",
            "signature"
        ],
        "docstring": null
    },
    {
        "name": "get_context",
        "file": ".\\all_stubs.py",
        "start_line": 1168,
        "end_line": 1170,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "store",
        "file": ".\\all_stubs.py",
        "start_line": 1174,
        "end_line": 1175,
        "params": [
            "self",
            "key",
            "value"
        ],
        "docstring": null
    },
    {
        "name": "retrieve",
        "file": ".\\all_stubs.py",
        "start_line": 1177,
        "end_line": 1179,
        "params": [
            "self",
            "key"
        ],
        "docstring": null
    },
    {
        "name": "record_metric",
        "file": ".\\all_stubs.py",
        "start_line": 1183,
        "end_line": 1184,
        "params": [
            "self",
            "metric",
            "value"
        ],
        "docstring": null
    },
    {
        "name": "add_vector",
        "file": ".\\all_stubs.py",
        "start_line": 1188,
        "end_line": 1189,
        "params": [
            "self",
            "vector"
        ],
        "docstring": null
    },
    {
        "name": "search_vector",
        "file": ".\\all_stubs.py",
        "start_line": 1191,
        "end_line": 1193,
        "params": [
            "self",
            "vector"
        ],
        "docstring": null
    },
    {
        "name": "__init__",
        "file": ".\\all_stubs.py",
        "start_line": 1197,
        "end_line": 1198,
        "params": [
            "self",
            "data"
        ],
        "docstring": null
    },
    {
        "name": "analyze",
        "file": ".\\all_stubs.py",
        "start_line": 1206,
        "end_line": 1208,
        "params": [
            "self",
            "project_path"
        ],
        "docstring": null
    },
    {
        "name": "parse",
        "file": ".\\all_stubs.py",
        "start_line": 1212,
        "end_line": 1214,
        "params": [
            "self",
            "test_output"
        ],
        "docstring": null
    },
    {
        "name": "run_tests",
        "file": ".\\all_stubs.py",
        "start_line": 1218,
        "end_line": 1220,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "get_openai_response",
        "file": ".\\docstring_generator.py",
        "start_line": 51,
        "end_line": 73,
        "params": [
            "code_snippet",
            "mock_mode"
        ],
        "docstring": "Queries OpenAI to generate a module docstring or returns a mock response for testing."
    },
    {
        "name": "extract_existing_docstring",
        "file": ".\\docstring_generator.py",
        "start_line": 76,
        "end_line": 90,
        "params": [
            "file_content"
        ],
        "docstring": "Extracts the module-level docstring from a Python file.\n\nReturns:\n    docstring (str or None): The extracted docstring, if found.\n    remaining_code (str): The rest of the file content without the docstring."
    },
    {
        "name": "insert_or_update_docstring",
        "file": ".\\docstring_generator.py",
        "start_line": 93,
        "end_line": 136,
        "params": [
            "file_path",
            "backup_folder",
            "skip_existing",
            "mock_mode"
        ],
        "docstring": "Inserts or updates the module-level docstring in a Python file."
    },
    {
        "name": "process_project",
        "file": ".\\docstring_generator.py",
        "start_line": 139,
        "end_line": 145,
        "params": [
            "root_dir",
            "backup_folder",
            "skip_existing",
            "mock_mode"
        ],
        "docstring": "Iterates through the project and updates all Python files."
    },
    {
        "name": "get_openai_response",
        "file": ".\\example.py",
        "start_line": 39,
        "end_line": 53,
        "params": [
            "code_snippet",
            "mock_mode"
        ],
        "docstring": "Queries OpenAI to generate a module docstring or returns a mock response for testing."
    },
    {
        "name": "extract_existing_docstring",
        "file": ".\\example.py",
        "start_line": 55,
        "end_line": 69,
        "params": [
            "lines"
        ],
        "docstring": "Extracts the existing module docstring if it exists."
    },
    {
        "name": "clean_code",
        "file": ".\\example.py",
        "start_line": 71,
        "end_line": 85,
        "params": [
            "lines"
        ],
        "docstring": "Removes excessive blank lines while preserving logical spacing."
    },
    {
        "name": "insert_or_update_docstring",
        "file": ".\\example.py",
        "start_line": 87,
        "end_line": 136,
        "params": [
            "file_path",
            "mock_mode"
        ],
        "docstring": "Inserts or updates the module-level docstring in a Python file."
    },
    {
        "name": "process_project",
        "file": ".\\example.py",
        "start_line": 138,
        "end_line": 144,
        "params": [
            "mock_mode"
        ],
        "docstring": "Iterates through the project and updates all Python files."
    },
    {
        "name": "find_tests_directory",
        "file": ".\\extract_passing_tests.py",
        "start_line": 16,
        "end_line": 24,
        "params": [
            "start_path"
        ],
        "docstring": "Recursively searches for the 'tests' directory starting from the given path.\nReturns the absolute path if found, otherwise None."
    },
    {
        "name": "extract_passing_tests",
        "file": ".\\extract_passing_tests.py",
        "start_line": 26,
        "end_line": 45,
        "params": [],
        "docstring": "Runs pytest in the found 'tests/' directory and extracts passing test names."
    },
    {
        "name": "start_watching",
        "file": ".\\file_watcher.py",
        "start_line": 104,
        "end_line": 124,
        "params": [],
        "docstring": "Starts the real-time file watcher."
    },
    {
        "name": "__init__",
        "file": ".\\file_watcher.py",
        "start_line": 32,
        "end_line": 34,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "_take_snapshot",
        "file": ".\\file_watcher.py",
        "start_line": 36,
        "end_line": 38,
        "params": [
            "self"
        ],
        "docstring": "Create a snapshot of the current test files."
    },
    {
        "name": "_get_process_info",
        "file": ".\\file_watcher.py",
        "start_line": 40,
        "end_line": 48,
        "params": [
            "self"
        ],
        "docstring": "Returns a list of active processes that might have modified files."
    },
    {
        "name": "restore_file",
        "file": ".\\file_watcher.py",
        "start_line": 50,
        "end_line": 55,
        "params": [
            "self",
            "file_path"
        ],
        "docstring": "Restore a deleted file from the backup directory if it exists."
    },
    {
        "name": "on_deleted",
        "file": ".\\file_watcher.py",
        "start_line": 57,
        "end_line": 68,
        "params": [
            "self",
            "event"
        ],
        "docstring": "Handle deleted files and restore them if necessary."
    },
    {
        "name": "on_modified",
        "file": ".\\file_watcher.py",
        "start_line": 70,
        "end_line": 84,
        "params": [
            "self",
            "event"
        ],
        "docstring": "Detect modifications to test files."
    },
    {
        "name": "on_created",
        "file": ".\\file_watcher.py",
        "start_line": 86,
        "end_line": 102,
        "params": [
            "self",
            "event"
        ],
        "docstring": "Log newly created files and back them up."
    },
    {
        "name": "initialize_agents",
        "file": ".\\launch_project.py",
        "start_line": 27,
        "end_line": 42,
        "params": [],
        "docstring": "Initialize all key agents and register them in the dispatcher."
    },
    {
        "name": "start_debugging_orchestrator",
        "file": ".\\launch_project.py",
        "start_line": 44,
        "end_line": 53,
        "params": [],
        "docstring": "Start the debugging orchestrator."
    },
    {
        "name": "launch_ui",
        "file": ".\\launch_project.py",
        "start_line": 55,
        "end_line": 58,
        "params": [],
        "docstring": "Launch the FixForge UI."
    },
    {
        "name": "main",
        "file": ".\\main.py",
        "start_line": 33,
        "end_line": 57,
        "params": [],
        "docstring": "Sets up and runs the Overnight AI Debugger."
    },
    {
        "name": "analyze_project",
        "file": ".\\project_context_analyzer.py",
        "start_line": 88,
        "end_line": 97,
        "params": [
            "project_root"
        ],
        "docstring": "Runs a full project analysis without explicitly creating an instance."
    },
    {
        "name": "__init__",
        "file": ".\\project_context_analyzer.py",
        "start_line": 21,
        "end_line": 23,
        "params": [
            "self",
            "project_root"
        ],
        "docstring": null
    },
    {
        "name": "scan_directories",
        "file": ".\\project_context_analyzer.py",
        "start_line": 25,
        "end_line": 32,
        "params": [
            "self"
        ],
        "docstring": "Scans the project directory for Python files."
    },
    {
        "name": "extract_code_context",
        "file": ".\\project_context_analyzer.py",
        "start_line": 34,
        "end_line": 47,
        "params": [
            "self"
        ],
        "docstring": "Extracts module-level docstrings and other metadata."
    },
    {
        "name": "map_dependencies",
        "file": ".\\project_context_analyzer.py",
        "start_line": 49,
        "end_line": 68,
        "params": [
            "self"
        ],
        "docstring": "Parses each file and extracts module dependencies."
    },
    {
        "name": "save_analysis",
        "file": ".\\project_context_analyzer.py",
        "start_line": 70,
        "end_line": 75,
        "params": [
            "self"
        ],
        "docstring": "Saves the analysis results to a JSON file."
    },
    {
        "name": "analyze_project",
        "file": ".\\project_context_analyzer.py",
        "start_line": 77,
        "end_line": 84,
        "params": [
            "self"
        ],
        "docstring": "Runs a full project analysis."
    },
    {
        "name": "__init__",
        "file": ".\\agents\\AgentActor.py",
        "start_line": 17,
        "end_line": 29,
        "params": [
            "self",
            "tool_server",
            "memory_manager",
            "performance_monitor"
        ],
        "docstring": "Initializes AgentActor with tool server, memory, and performance monitoring.\n\nArgs:\n    tool_server: The ToolServer instance to manage tools.\n    memory_manager: Instance for managing task memory.\n    performance_monitor: Instance for tracking performance metrics."
    },
    {
        "name": "describe_capabilities",
        "file": ".\\agents\\AgentActor.py",
        "start_line": 31,
        "end_line": 35,
        "params": [
            "self"
        ],
        "docstring": "Returns a description of the agent's capabilities."
    },
    {
        "name": "solve_task",
        "file": ".\\agents\\AgentActor.py",
        "start_line": 37,
        "end_line": 57,
        "params": [
            "self",
            "task"
        ],
        "docstring": "Executes a given task (Python script, shell command, or tool operation).\n\nArgs:\n    task (str): The task type (e.g., \"execute_python\", \"execute_shell\", \"use_tool\").\n    **kwargs: Additional parameters for task execution.\n\nReturns:\n    Any: Result of the task execution."
    },
    {
        "name": "_execute_python_task",
        "file": ".\\agents\\AgentActor.py",
        "start_line": 59,
        "end_line": 64,
        "params": [
            "self",
            "python_code"
        ],
        "docstring": "Executes Python code."
    },
    {
        "name": "_execute_shell_task",
        "file": ".\\agents\\AgentActor.py",
        "start_line": 66,
        "end_line": 71,
        "params": [
            "self",
            "command"
        ],
        "docstring": "Executes shell command."
    },
    {
        "name": "utilize_tool",
        "file": ".\\agents\\AgentActor.py",
        "start_line": 73,
        "end_line": 86,
        "params": [
            "self",
            "tool_name",
            "operation",
            "parameters"
        ],
        "docstring": "Uses a tool with specified parameters."
    },
    {
        "name": "perform_task",
        "file": ".\\agents\\AgentActor.py",
        "start_line": 88,
        "end_line": 107,
        "params": [
            "self",
            "task"
        ],
        "docstring": "Executes a given task based on its type.\n\nArgs:\n    task (Dict[str, Any]): A dictionary containing task details.\n\nReturns:\n    Any: Result of task execution."
    },
    {
        "name": "shutdown",
        "file": ".\\agents\\AgentActor.py",
        "start_line": 109,
        "end_line": 111,
        "params": [
            "self"
        ],
        "docstring": "Handles cleanup operations."
    },
    {
        "name": "__init__",
        "file": ".\\agents\\agent_dispatcher.py",
        "start_line": 39,
        "end_line": 61,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "_discover_agents",
        "file": ".\\agents\\agent_dispatcher.py",
        "start_line": 63,
        "end_line": 95,
        "params": [
            "self"
        ],
        "docstring": "Automatically discovers and registers all agent subclasses in the 'agents' package.\nThis method iterates over modules in the package and attempts to instantiate any\nclass that is a subclass of AgentBase (excluding AgentBase itself). Errors during\ninstantiation are caught and logged."
    },
    {
        "name": "register_agent",
        "file": ".\\agents\\agent_dispatcher.py",
        "start_line": 97,
        "end_line": 107,
        "params": [
            "self",
            "agent_name",
            "agent_instance"
        ],
        "docstring": "Registers an agent instance with a specified name."
    },
    {
        "name": "_validate_agents",
        "file": ".\\agents\\agent_dispatcher.py",
        "start_line": 109,
        "end_line": 116,
        "params": [
            "self"
        ],
        "docstring": "Ensures all registered agents inherit from AgentBase."
    },
    {
        "name": "dispatch_task",
        "file": ".\\agents\\agent_dispatcher.py",
        "start_line": 118,
        "end_line": 151,
        "params": [
            "self",
            "agent_name",
            "task_data"
        ],
        "docstring": "\ud83d\udce1 Dispatches a task to the requested agent and ensures structured task execution.\n\nArgs:\n    agent_name (str): The name of the agent to handle the task.\n    task_data (dict): The task data including the action and other parameters.\n\nReturns:\n    str: A JSON-encoded response from the agent."
    },
    {
        "name": "__init__",
        "file": ".\\agents\\custom_agent.py",
        "start_line": 16,
        "end_line": 24,
        "params": [
            "self",
            "name"
        ],
        "docstring": "Initializes the CustomAgent with a unique name.\n\nArgs:\n    name (str): The name of the agent (default: \"CustomAgent\")."
    },
    {
        "name": "describe_capabilities",
        "file": ".\\agents\\custom_agent.py",
        "start_line": 26,
        "end_line": 33,
        "params": [
            "self"
        ],
        "docstring": "Returns a description of the agent's capabilities.\n\nReturns:\n    str: A brief description of what the agent can do."
    },
    {
        "name": "interact",
        "file": ".\\agents\\custom_agent.py",
        "start_line": 35,
        "end_line": 54,
        "params": [
            "self",
            "user_input"
        ],
        "docstring": "Processes user input by checking memory for a stored response or generating a new one.\n\nArgs:\n    user_input (str): The user's message.\n\nReturns:\n    str: A response based on previous interactions or a new fallback message."
    },
    {
        "name": "solve_task",
        "file": ".\\agents\\custom_agent.py",
        "start_line": 56,
        "end_line": 73,
        "params": [
            "self",
            "task"
        ],
        "docstring": "Processes a task and returns a structured result.\n\nArgs:\n    task (str): The task to be performed.\n    **kwargs: Additional parameters.\n\nReturns:\n    dict: A dictionary with the result of the task."
    },
    {
        "name": "shutdown",
        "file": ".\\agents\\custom_agent.py",
        "start_line": 75,
        "end_line": 79,
        "params": [
            "self"
        ],
        "docstring": "Performs cleanup operations and logs a shutdown message."
    },
    {
        "name": "__init__",
        "file": ".\\agents\\external_ai_agent.py",
        "start_line": 12,
        "end_line": 14,
        "params": [
            "self",
            "api_key",
            "endpoint"
        ],
        "docstring": null
    },
    {
        "name": "solve_task",
        "file": ".\\agents\\external_ai_agent.py",
        "start_line": 16,
        "end_line": 28,
        "params": [
            "self",
            "action"
        ],
        "docstring": null
    },
    {
        "name": "__init__",
        "file": ".\\agents\\core\\AgentBase.py",
        "start_line": 29,
        "end_line": 39,
        "params": [
            "self",
            "name",
            "project_name"
        ],
        "docstring": "Initializes the base agent with a name and project association.\n\nArgs:\n    name (str): The name of the agent.\n    project_name (str): The project this agent belongs to."
    },
    {
        "name": "solve_task",
        "file": ".\\agents\\core\\AgentBase.py",
        "start_line": 42,
        "end_line": 54,
        "params": [
            "self",
            "task"
        ],
        "docstring": "Abstract method for task execution.\nMust be implemented by all subclasses.\n\nArgs:\n    task (str): The task description.\n    **kwargs: Additional parameters for task execution.\n\nReturns:\n    Dict[str, Any]: A dictionary containing the task result."
    },
    {
        "name": "describe_capabilities",
        "file": ".\\agents\\core\\AgentBase.py",
        "start_line": 57,
        "end_line": 65,
        "params": [
            "self"
        ],
        "docstring": "Provides a description of the agent's capabilities.\nMust be overridden by all subclasses.\n\nReturns:\n    str: A description of the agent's functionalities."
    },
    {
        "name": "shutdown",
        "file": ".\\agents\\core\\AgentBase.py",
        "start_line": 67,
        "end_line": 72,
        "params": [
            "self"
        ],
        "docstring": "Logs a shutdown message, ensuring graceful cleanup.\nCan be overridden in subclasses if additional cleanup is needed."
    },
    {
        "name": "__init__",
        "file": ".\\agents\\core\\agent_registry.py",
        "start_line": 34,
        "end_line": 38,
        "params": [
            "self"
        ],
        "docstring": "Initializes and registers core agents."
    },
    {
        "name": "load_core_agents",
        "file": ".\\agents\\core\\agent_registry.py",
        "start_line": 40,
        "end_line": 51,
        "params": [
            "self"
        ],
        "docstring": "Registers core AI agents on initialization."
    },
    {
        "name": "register_agent",
        "file": ".\\agents\\core\\agent_registry.py",
        "start_line": 53,
        "end_line": 74,
        "params": [
            "self",
            "name",
            "agent_instance"
        ],
        "docstring": "Dynamically registers a new agent if it inherits from AgentBase.\n\nArgs:\n    name (str): The unique name of the agent.\n    agent_instance (AgentBase): The agent instance.\n\nReturns:\n    bool: True if registered successfully, False if agent already exists or invalid."
    },
    {
        "name": "unregister_agent",
        "file": ".\\agents\\core\\agent_registry.py",
        "start_line": 76,
        "end_line": 92,
        "params": [
            "self",
            "name"
        ],
        "docstring": "Removes an agent from the registry.\n\nArgs:\n    name (str): The name of the agent to remove.\n\nReturns:\n    bool: True if removed successfully, False if agent not found."
    },
    {
        "name": "get_agent",
        "file": ".\\agents\\core\\agent_registry.py",
        "start_line": 94,
        "end_line": 109,
        "params": [
            "self",
            "name"
        ],
        "docstring": "Retrieves an agent by name.\n\nArgs:\n    name (str): The name of the agent.\n\nReturns:\n    AgentBase | None: The agent instance or None if not found."
    },
    {
        "name": "agent_exists",
        "file": ".\\agents\\core\\agent_registry.py",
        "start_line": 111,
        "end_line": 121,
        "params": [
            "self",
            "name"
        ],
        "docstring": "Checks if an agent exists in the registry.\n\nArgs:\n    name (str): The agent's name.\n\nReturns:\n    bool: True if the agent exists, False otherwise."
    },
    {
        "name": "list_agents",
        "file": ".\\agents\\core\\agent_registry.py",
        "start_line": 123,
        "end_line": 130,
        "params": [
            "self"
        ],
        "docstring": "Lists all registered agent names.\n\nReturns:\n    list[str]: A list of available agent names."
    },
    {
        "name": "__init__",
        "file": ".\\agents\\core\\gpt_forecasting.py",
        "start_line": 22,
        "end_line": 23,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "solve_task",
        "file": ".\\agents\\core\\gpt_forecasting.py",
        "start_line": 25,
        "end_line": 26,
        "params": [
            "self",
            "task"
        ],
        "docstring": null
    },
    {
        "name": "describe_capabilities",
        "file": ".\\agents\\core\\gpt_forecasting.py",
        "start_line": 28,
        "end_line": 29,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "generate_forecast",
        "file": ".\\agents\\core\\gpt_forecasting.py",
        "start_line": 32,
        "end_line": 39,
        "params": [
            "self",
            "context"
        ],
        "docstring": "Generates insights based on financial or trading context."
    },
    {
        "name": "__init__",
        "file": ".\\agents\\core\\graph_memory.py",
        "start_line": 28,
        "end_line": 30,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "add_knowledge",
        "file": ".\\agents\\core\\graph_memory.py",
        "start_line": 32,
        "end_line": 34,
        "params": [
            "self",
            "subject",
            "relation",
            "obj"
        ],
        "docstring": "Adds a knowledge triplet to the graph."
    },
    {
        "name": "get_relationships",
        "file": ".\\agents\\core\\graph_memory.py",
        "start_line": 36,
        "end_line": 38,
        "params": [
            "self",
            "node"
        ],
        "docstring": "Returns relationships for a given node."
    },
    {
        "name": "solve_task",
        "file": ".\\agents\\core\\graph_memory.py",
        "start_line": 40,
        "end_line": 47,
        "params": [
            "self",
            "task"
        ],
        "docstring": "Solves graph-based reasoning tasks."
    },
    {
        "name": "describe_capabilities",
        "file": ".\\agents\\core\\graph_memory.py",
        "start_line": 49,
        "end_line": 51,
        "params": [
            "self"
        ],
        "docstring": "Returns the capabilities of GraphMemory."
    },
    {
        "name": "__init__",
        "file": ".\\agents\\core\\journal_agent.py",
        "start_line": 17,
        "end_line": 27,
        "params": [
            "self",
            "journal_directory"
        ],
        "docstring": "Initializes the JournalAgent with a storage directory for journal entries.\n\nArgs:\n    journal_directory (str): Directory where journal entries are stored."
    },
    {
        "name": "describe_capabilities",
        "file": ".\\agents\\core\\journal_agent.py",
        "start_line": 29,
        "end_line": 31,
        "params": [
            "self"
        ],
        "docstring": "Return a description of this agent's responsibilities."
    },
    {
        "name": "create_journal_entry",
        "file": ".\\agents\\core\\journal_agent.py",
        "start_line": 33,
        "end_line": 63,
        "params": [
            "self",
            "title",
            "content",
            "tags"
        ],
        "docstring": "Creates a new journal entry and saves it as a JSON file.\n\nArgs:\n    title (str): Title of the journal entry.\n    content (str): Content of the journal entry.\n    tags (List[str], optional): Tags associated with the entry.\n\nReturns:\n    Dict[str, Any]: Status and file path of the created journal entry."
    },
    {
        "name": "retrieve_journal_entry",
        "file": ".\\agents\\core\\journal_agent.py",
        "start_line": 65,
        "end_line": 88,
        "params": [
            "self",
            "title"
        ],
        "docstring": "Retrieves an existing journal entry by title.\n\nArgs:\n    title (str): Title of the journal entry to retrieve.\n\nReturns:\n    Dict[str, Any]: Retrieved journal entry or error message."
    },
    {
        "name": "update_journal_entry",
        "file": ".\\agents\\core\\journal_agent.py",
        "start_line": 90,
        "end_line": 117,
        "params": [
            "self",
            "title",
            "new_content"
        ],
        "docstring": "Updates an existing journal entry with new content.\n\nArgs:\n    title (str): Title of the journal entry to update.\n    new_content (str): New content to update in the journal.\n\nReturns:\n    Dict[str, Any]: Status of the update operation."
    },
    {
        "name": "delete_journal_entry",
        "file": ".\\agents\\core\\journal_agent.py",
        "start_line": 119,
        "end_line": 140,
        "params": [
            "self",
            "title"
        ],
        "docstring": "Deletes a journal entry by title.\n\nArgs:\n    title (str): Title of the journal entry to delete.\n\nReturns:\n    Dict[str, Any]: Status of the delete operation."
    },
    {
        "name": "list_journal_entries",
        "file": ".\\agents\\core\\journal_agent.py",
        "start_line": 142,
        "end_line": 156,
        "params": [
            "self"
        ],
        "docstring": "Lists all journal entries in the journal directory.\n\nReturns:\n    Dict[str, Any]: List of available journal entries."
    },
    {
        "name": "solve_task",
        "file": ".\\agents\\core\\journal_agent.py",
        "start_line": 158,
        "end_line": 181,
        "params": [
            "self",
            "task"
        ],
        "docstring": "Dispatches the task and returns the status of the operation.\n\nArgs:\n    task (str): Action to be performed.\n    **kwargs: Additional parameters.\n\nReturns:\n    Dict[str, Any]: Result of the operation."
    },
    {
        "name": "shutdown",
        "file": ".\\agents\\core\\journal_agent.py",
        "start_line": 183,
        "end_line": 187,
        "params": [
            "self"
        ],
        "docstring": "Logs a shutdown message."
    },
    {
        "name": "get_logs",
        "file": ".\\agents\\core\\logger.py",
        "start_line": 49,
        "end_line": 57,
        "params": [],
        "docstring": "Retrieves the current log file content as a list of log entries.\nThis can be used, for example, in a UI to show stored logs."
    },
    {
        "name": "format",
        "file": ".\\agents\\core\\logger.py",
        "start_line": 26,
        "end_line": 29,
        "params": [
            "self",
            "record"
        ],
        "docstring": null
    },
    {
        "name": "__init__",
        "file": ".\\agents\\core\\memory_engine.py",
        "start_line": 32,
        "end_line": 34,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "load_memory",
        "file": ".\\agents\\core\\memory_engine.py",
        "start_line": 36,
        "end_line": 41,
        "params": [
            "self"
        ],
        "docstring": "Loads stored user interactions from file."
    },
    {
        "name": "save_memory",
        "file": ".\\agents\\core\\memory_engine.py",
        "start_line": 43,
        "end_line": 46,
        "params": [
            "self"
        ],
        "docstring": "Saves interactions to file."
    },
    {
        "name": "store_interaction",
        "file": ".\\agents\\core\\memory_engine.py",
        "start_line": 48,
        "end_line": 51,
        "params": [
            "self",
            "user_query",
            "response"
        ],
        "docstring": "Stores interactions for future reference."
    },
    {
        "name": "retrieve_similar_query",
        "file": ".\\agents\\core\\memory_engine.py",
        "start_line": 53,
        "end_line": 58,
        "params": [
            "self",
            "user_query"
        ],
        "docstring": "Finds similar queries and suggests responses."
    },
    {
        "name": "solve_task",
        "file": ".\\agents\\core\\memory_engine.py",
        "start_line": 60,
        "end_line": 68,
        "params": [
            "self",
            "task"
        ],
        "docstring": "Solves memory-based tasks."
    },
    {
        "name": "describe_capabilities",
        "file": ".\\agents\\core\\memory_engine.py",
        "start_line": 70,
        "end_line": 72,
        "params": [
            "self"
        ],
        "docstring": "Returns the capabilities of MemoryEngine."
    },
    {
        "name": "__init__",
        "file": ".\\agents\\core\\professor_synapse_agent.py",
        "start_line": 38,
        "end_line": 43,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "describe_capabilities",
        "file": ".\\agents\\core\\professor_synapse_agent.py",
        "start_line": 45,
        "end_line": 52,
        "params": [
            "self"
        ],
        "docstring": "Return a description of this agent's responsibilities.\n\nReturns:\n    str: A description of the agent's capabilities."
    },
    {
        "name": "respond",
        "file": ".\\agents\\core\\professor_synapse_agent.py",
        "start_line": 54,
        "end_line": 82,
        "params": [
            "self",
            "user_input"
        ],
        "docstring": "Generates a response by processing the query through reasoning, logic, and real-time data.\n\nArgs:\n    user_input (str): The user's query.\n\nReturns:\n    str: A formatted response from Professor Synapse."
    },
    {
        "name": "fetch_data",
        "file": ".\\agents\\core\\professor_synapse_agent.py",
        "start_line": 84,
        "end_line": 120,
        "params": [
            "self",
            "query"
        ],
        "docstring": "Fetches real-time data based on the query type (market data, news, etc.).\n\nArgs:\n    query (str): The query string from the user.\n\nReturns:\n    str: Retrieved data or a default message if no data is found."
    },
    {
        "name": "learn_knowledge",
        "file": ".\\agents\\core\\professor_synapse_agent.py",
        "start_line": 122,
        "end_line": 131,
        "params": [
            "self",
            "subject",
            "relation",
            "obj"
        ],
        "docstring": "Teaches Professor Synapse a new piece of knowledge by updating the knowledge graph.\n\nArgs:\n    subject (str): The subject of the knowledge.\n    relation (str): The relationship type.\n    obj (str): The object or related entity."
    },
    {
        "name": "collaborate_with_agents",
        "file": ".\\agents\\core\\professor_synapse_agent.py",
        "start_line": 133,
        "end_line": 148,
        "params": [
            "self",
            "task",
            "data"
        ],
        "docstring": "Engages other agents to solve complex tasks via collaboration.\n\nArgs:\n    task (str): The task to be delegated.\n    data (dict): Additional task parameters.\n\nReturns:\n    str: The outcome of the collaboration or an error message if no suitable agent is found."
    },
    {
        "name": "solve_task",
        "file": ".\\agents\\core\\professor_synapse_agent.py",
        "start_line": 150,
        "end_line": 169,
        "params": [
            "self",
            "task"
        ],
        "docstring": "Handles various tasks related to reasoning, forecasting, and collaboration.\nReturns a structured dictionary response for clarity in testing.\n\nArgs:\n    task (str): Action to be performed.\n    **kwargs: Additional parameters.\n\nReturns:\n    dict: The result of the operation."
    },
    {
        "name": "shutdown",
        "file": ".\\agents\\core\\professor_synapse_agent.py",
        "start_line": 171,
        "end_line": 175,
        "params": [
            "self"
        ],
        "docstring": "Logs a shutdown message and performs any necessary cleanup."
    },
    {
        "name": "__init__",
        "file": ".\\agents\\core\\tbow_tactic_agent.py",
        "start_line": 15,
        "end_line": 19,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "generate_trade_plan",
        "file": ".\\agents\\core\\tbow_tactic_agent.py",
        "start_line": 21,
        "end_line": 36,
        "params": [
            "self",
            "stock_symbol"
        ],
        "docstring": "Fetches real-time stock data and generates a Tbow Tactic-based trade strategy.\n\nArgs:\n    stock_symbol (str): The stock ticker symbol.\n\nReturns:\n    dict: Trade plan details."
    },
    {
        "name": "schedule_trade_updates",
        "file": ".\\agents\\core\\tbow_tactic_agent.py",
        "start_line": 38,
        "end_line": 45,
        "params": [
            "self",
            "interval"
        ],
        "docstring": "Schedules periodic trade strategy updates.\n\nArgs:\n    interval (int): Time in minutes for updates (default: 60)."
    },
    {
        "name": "solve_task",
        "file": ".\\agents\\core\\tbow_tactic_agent.py",
        "start_line": 47,
        "end_line": 64,
        "params": [
            "self",
            "task"
        ],
        "docstring": "Executes specific trade-related tasks.\n\nArgs:\n    task (str): Task name.\n    **kwargs: Additional parameters.\n\nReturns:\n    dict: Task execution result."
    },
    {
        "name": "shutdown",
        "file": ".\\agents\\core\\tbow_tactic_agent.py",
        "start_line": 66,
        "end_line": 68,
        "params": [
            "self"
        ],
        "docstring": "Shuts down the agent safely."
    },
    {
        "name": "__init__",
        "file": ".\\agents\\core\\trading_agent.py",
        "start_line": 38,
        "end_line": 64,
        "params": [
            "self",
            "name",
            "project_name",
            "test_mode"
        ],
        "docstring": "Initializes the TradingAgent with Alpaca API credentials."
    },
    {
        "name": "describe_capabilities",
        "file": ".\\agents\\core\\trading_agent.py",
        "start_line": 66,
        "end_line": 73,
        "params": [
            "self"
        ],
        "docstring": "Returns the capabilities of the TradingAgent.\n\nReturns:\n    str: A description of the agent's capabilities."
    },
    {
        "name": "execute_trade",
        "file": ".\\agents\\core\\trading_agent.py",
        "start_line": 75,
        "end_line": 108,
        "params": [
            "self",
            "symbol",
            "action",
            "quantity"
        ],
        "docstring": "Executes a trade (real or simulated).\n\nArgs:\n    symbol (str): The stock symbol to trade.\n    action (str): \"buy\" or \"sell\".\n    quantity (int): Number of shares.\n\nReturns:\n    Dict[str, Any]: Trade execution details."
    },
    {
        "name": "solve_task",
        "file": ".\\agents\\core\\trading_agent.py",
        "start_line": 110,
        "end_line": 130,
        "params": [
            "self",
            "task_type"
        ],
        "docstring": "Handles different trading tasks.\n\nArgs:\n    task_type (str): The type of task.\n    **kwargs: Additional parameters.\n\nReturns:\n    Dict[str, Any]: Task execution details or error message."
    },
    {
        "name": "shutdown",
        "file": ".\\agents\\core\\trading_agent.py",
        "start_line": 132,
        "end_line": 134,
        "params": [
            "self"
        ],
        "docstring": "Gracefully shuts down the TradingAgent."
    },
    {
        "name": "__init__",
        "file": ".\\agents\\core\\utilities\\ai_agent_utils.py",
        "start_line": 28,
        "end_line": 37,
        "params": [
            "self",
            "max_entries",
            "track_system_usage"
        ],
        "docstring": "Initializes the PerformanceMonitor.\n\nArgs:\n    max_entries (int): Maximum number of performance logs to store.\n    track_system_usage (bool): If True (and psutil is installed), log CPU/memory usage."
    },
    {
        "name": "track_execution",
        "file": ".\\agents\\core\\utilities\\ai_agent_utils.py",
        "start_line": 39,
        "end_line": 84,
        "params": [
            "self",
            "function"
        ],
        "docstring": "Decorator to measure execution time (and optional system usage) of a function.\n\nUsage:\n    @performance_monitor.track_execution\n    def my_function(...):\n        ...\n\nArgs:\n    function (Callable): The function to be wrapped.\n\nReturns:\n    Callable: The wrapped function with performance logging."
    },
    {
        "name": "get_performance_log",
        "file": ".\\agents\\core\\utilities\\ai_agent_utils.py",
        "start_line": 86,
        "end_line": 93,
        "params": [
            "self"
        ],
        "docstring": "Returns a list of recent performance logs.\n\nReturns:\n    List[Dict[str, Any]]: Execution performance and optional system usage data."
    },
    {
        "name": "clear_logs",
        "file": ".\\agents\\core\\utilities\\ai_agent_utils.py",
        "start_line": 95,
        "end_line": 100,
        "params": [
            "self"
        ],
        "docstring": "Clears all stored performance logs."
    },
    {
        "name": "__init__",
        "file": ".\\agents\\core\\utilities\\ai_agent_utils.py",
        "start_line": 108,
        "end_line": 115,
        "params": [
            "self",
            "memory_limit"
        ],
        "docstring": "Initializes the Memory Manager.\n\nArgs:\n    memory_limit (int): Maximum number of memory entries to store."
    },
    {
        "name": "store_memory",
        "file": ".\\agents\\core\\utilities\\ai_agent_utils.py",
        "start_line": 117,
        "end_line": 126,
        "params": [
            "self",
            "key",
            "value"
        ],
        "docstring": "Stores a key-value pair in memory.\n\nArgs:\n    key (str): Identifier for the memory entry.\n    value (Any): Data to store."
    },
    {
        "name": "retrieve_memory",
        "file": ".\\agents\\core\\utilities\\ai_agent_utils.py",
        "start_line": 128,
        "end_line": 143,
        "params": [
            "self",
            "key"
        ],
        "docstring": "Retrieves stored memory based on a key.\n\nArgs:\n    key (str): Identifier for the memory entry.\n\nReturns:\n    Optional[Any]: Retrieved data, or None if key not found."
    },
    {
        "name": "clear_memory",
        "file": ".\\agents\\core\\utilities\\ai_agent_utils.py",
        "start_line": 145,
        "end_line": 150,
        "params": [
            "self"
        ],
        "docstring": "Clears all stored memory."
    },
    {
        "name": "export_memory",
        "file": ".\\agents\\core\\utilities\\ai_agent_utils.py",
        "start_line": 152,
        "end_line": 161,
        "params": [
            "self",
            "filepath"
        ],
        "docstring": "Exports stored memory to a JSON file.\n\nArgs:\n    filepath (str): File path to save memory data."
    },
    {
        "name": "import_memory",
        "file": ".\\agents\\core\\utilities\\ai_agent_utils.py",
        "start_line": 163,
        "end_line": 177,
        "params": [
            "self",
            "filepath"
        ],
        "docstring": "Imports stored memory from a JSON file.\n\nArgs:\n    filepath (str): File path to load memory data."
    },
    {
        "name": "__init__",
        "file": ".\\agents\\core\\utilities\\ai_agent_utils.py",
        "start_line": 186,
        "end_line": 197,
        "params": [
            "self",
            "text",
            "metadata",
            "tags"
        ],
        "docstring": "Initializes a structured memory record.\n\nArgs:\n    text (str): The main textual content to store.\n    metadata (Optional[Dict[str, Any]]): Additional descriptive data.\n    tags (Optional[List[str]]): Tags/labels for classification or search."
    },
    {
        "name": "__repr__",
        "file": ".\\agents\\core\\utilities\\ai_agent_utils.py",
        "start_line": 199,
        "end_line": 200,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "__init__",
        "file": ".\\agents\\core\\utilities\\ai_agent_utils.py",
        "start_line": 208,
        "end_line": 223,
        "params": [
            "self",
            "memory_limit",
            "embedding_model"
        ],
        "docstring": "Initializes VectorMemoryManager with an optional pre-trained embedding model.\n\nArgs:\n    memory_limit (int): Maximum number of memory entries.\n    embedding_model (Optional[str]): Pre-trained embedding model from sentence_transformers.\n                                     If None, fallback substring search is used."
    },
    {
        "name": "store_segment",
        "file": ".\\agents\\core\\utilities\\ai_agent_utils.py",
        "start_line": 225,
        "end_line": 234,
        "params": [
            "self",
            "segment"
        ],
        "docstring": "Stores a structured memory segment along with its embedding.\n\nArgs:\n    segment (StructuredMemorySegment): The memory segment to store."
    },
    {
        "name": "search_by_text",
        "file": ".\\agents\\core\\utilities\\ai_agent_utils.py",
        "start_line": 236,
        "end_line": 266,
        "params": [
            "self",
            "query_text",
            "top_k"
        ],
        "docstring": "Searches for segments matching the query text.\n\nIf an embedding model is provided, a semantic search using cosine similarity is performed.\nOtherwise, falls back to a case-insensitive substring search.\n\nArgs:\n    query_text (str): The query text to search for.\n    top_k (int): Maximum number of results to return.\n\nReturns:\n    List[StructuredMemorySegment]: List of matching segments."
    },
    {
        "name": "_compute_embedding",
        "file": ".\\agents\\core\\utilities\\ai_agent_utils.py",
        "start_line": 268,
        "end_line": 283,
        "params": [
            "self",
            "text"
        ],
        "docstring": "Computes an embedding for the given text using the pre-trained model.\n\nArgs:\n    text (str): The text to embed.\n\nReturns:\n    List[float]: The embedding vector as a list of floats."
    },
    {
        "name": "_cosine_similarity",
        "file": ".\\agents\\core\\utilities\\ai_agent_utils.py",
        "start_line": 285,
        "end_line": 302,
        "params": [
            "self",
            "v1",
            "v2"
        ],
        "docstring": "Computes cosine similarity between two vectors using NumPy.\n\nArgs:\n    v1 (List[float]): First vector.\n    v2 (List[float]): Second vector.\n\nReturns:\n    float: Cosine similarity score."
    },
    {
        "name": "sample_task",
        "file": ".\\agents\\core\\utilities\\ai_agent_utils.py",
        "start_line": 312,
        "end_line": 314,
        "params": [
            "duration"
        ],
        "docstring": null
    },
    {
        "name": "wrapper",
        "file": ".\\agents\\core\\utilities\\ai_agent_utils.py",
        "start_line": 54,
        "end_line": 82,
        "params": [],
        "docstring": null
    },
    {
        "name": "__init__",
        "file": ".\\agents\\core\\utilities\\ai_client.py",
        "start_line": 24,
        "end_line": 34,
        "params": [
            "self",
            "base_url",
            "api_key"
        ],
        "docstring": "Initialize the AIClient.\n\nArgs:\n    base_url: (optional) The API endpoint for a real AI service.\n    api_key: (optional) An API key for authenticating with a real AI service."
    },
    {
        "name": "send_prompt",
        "file": ".\\agents\\core\\utilities\\ai_client.py",
        "start_line": 36,
        "end_line": 68,
        "params": [
            "self",
            "prompt"
        ],
        "docstring": "Sends a prompt to an AI model and returns the model's response.\nIf no real endpoint is configured, returns a simulated response.\n\nArgs:\n    prompt: The input prompt to send to the AI.\n\nReturns:\n    The AI-generated or simulated response."
    },
    {
        "name": "evaluate_patch_with_reason",
        "file": ".\\agents\\core\\utilities\\ai_client.py",
        "start_line": 70,
        "end_line": 87,
        "params": [
            "self",
            "patch"
        ],
        "docstring": "Evaluates the patch and returns a dictionary containing:\n    - 'score': (int) A numeric score indicating the patch's correctness (0-100).\n    - 'reason': (str) An explanation for the assigned score.\n\nArgs:\n    patch: The code patch to evaluate.\n\nReturns:\n    A dictionary with keys {\"score\", \"reason\"}."
    },
    {
        "name": "refine_patch",
        "file": ".\\agents\\core\\utilities\\ai_client.py",
        "start_line": 89,
        "end_line": 104,
        "params": [
            "self",
            "patch"
        ],
        "docstring": "Attempts to refine a given patch. Returns the refined patch if successful.\nReturns an empty string if no refinement is possible.\n\nArgs:\n    patch: The original patch to refine.\n\nReturns:\n    The refined patch (str) or an empty string if unsuccessful."
    },
    {
        "name": "__init__",
        "file": ".\\agents\\core\\utilities\\ai_model_manager.py",
        "start_line": 46,
        "end_line": 52,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "generate_patch",
        "file": ".\\agents\\core\\utilities\\ai_model_manager.py",
        "start_line": 54,
        "end_line": 92,
        "params": [
            "self",
            "error_msg",
            "code_context",
            "test_file"
        ],
        "docstring": "Generates a patch suggestion using the best available AI model.\n\nFallback order: Mistral \u2192 DeepSeek \u2192 OpenAI.\nIf a patch is generated, its confidence is evaluated and, if improved, the patch is accepted.\n\nArgs:\n    error_msg (str): The error message encountered.\n    code_context (str): The code context surrounding the error.\n    test_file (str): The test file where the error was encountered.\n\nReturns:\n    Optional[str]: A unified diff patch string if successful, or None otherwise."
    },
    {
        "name": "_format_prompt",
        "file": ".\\agents\\core\\utilities\\ai_model_manager.py",
        "start_line": 94,
        "end_line": 112,
        "params": [
            "self",
            "error_msg",
            "code_context",
            "test_file"
        ],
        "docstring": "Formats the debugging request into a structured AI prompt.\n\nArgs:\n    error_msg (str): The error message.\n    code_context (str): The code context.\n    test_file (str): The test file in which the error occurred.\n\nReturns:\n    str: A formatted prompt string."
    },
    {
        "name": "_generate_with_model",
        "file": ".\\agents\\core\\utilities\\ai_model_manager.py",
        "start_line": 114,
        "end_line": 128,
        "params": [
            "self",
            "model",
            "prompt"
        ],
        "docstring": "Dynamically calls the appropriate AI model based on the given model name.\n\nArgs:\n    model (str): The model name (e.g., \"mistral\", \"deepseek\", \"openai\").\n    prompt (str): The formatted prompt.\n\nReturns:\n    Optional[str]: The patch suggestion generated by the AI model."
    },
    {
        "name": "_generate_with_ollama",
        "file": ".\\agents\\core\\utilities\\ai_model_manager.py",
        "start_line": 130,
        "end_line": 150,
        "params": [
            "self",
            "model",
            "prompt"
        ],
        "docstring": "Calls a local Ollama model (e.g. Mistral or DeepSeek) to generate a patch suggestion.\n\nArgs:\n    model (str): The local model name.\n    prompt (str): The prompt to send.\n\nReturns:\n    Optional[str]: The generated patch if successful, or None otherwise."
    },
    {
        "name": "_generate_with_openai",
        "file": ".\\agents\\core\\utilities\\ai_model_manager.py",
        "start_line": 152,
        "end_line": 177,
        "params": [
            "self",
            "prompt"
        ],
        "docstring": "Calls OpenAI GPT-4 to generate a patch suggestion.\n\nArgs:\n    prompt (str): The prompt to send to the OpenAI API.\n\nReturns:\n    Optional[str]: The generated patch if successful, or None otherwise."
    },
    {
        "name": "_compute_error_signature",
        "file": ".\\agents\\core\\utilities\\ai_model_manager.py",
        "start_line": 179,
        "end_line": 194,
        "params": [
            "self",
            "error_msg",
            "code_context"
        ],
        "docstring": "Computes a unique error signature based on the error message and code context.\n\nArgs:\n    error_msg (str): The error message.\n    code_context (str): The code context.\n\nReturns:\n    str: A SHA-256 hash representing the error signature."
    },
    {
        "name": "chunk_code",
        "file": ".\\agents\\core\\utilities\\ai_patch_utils.py",
        "start_line": 37,
        "end_line": 39,
        "params": [
            "file_content",
            "max_chars"
        ],
        "docstring": "Splits file content into manageable chunks for LLM processing."
    },
    {
        "name": "query_llm",
        "file": ".\\agents\\core\\utilities\\ai_patch_utils.py",
        "start_line": 42,
        "end_line": 59,
        "params": [
            "prompt",
            "model"
        ],
        "docstring": "Executes a subprocess call to run a local LLM (Ollama or DeepSeek).\nHandles errors and provides logs for debugging."
    },
    {
        "name": "query_openai",
        "file": ".\\agents\\core\\utilities\\ai_patch_utils.py",
        "start_line": 62,
        "end_line": 85,
        "params": [
            "prompt"
        ],
        "docstring": "Queries OpenAI GPT for patch suggestions with proper error handling."
    },
    {
        "name": "generate_patch",
        "file": ".\\agents\\core\\utilities\\ai_patch_utils.py",
        "start_line": 88,
        "end_line": 139,
        "params": [
            "cls",
            "file_content",
            "error_msg"
        ],
        "docstring": "Uses AI models to generate a patch for the given error and code.\nPrioritizes Ollama \u2192 DeepSeek \u2192 OpenAI in that order."
    },
    {
        "name": "__init__",
        "file": ".\\agents\\core\\utilities\\ai_rollback_analysis.py",
        "start_line": 44,
        "end_line": 54,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "_load_patch_data",
        "file": ".\\agents\\core\\utilities\\ai_rollback_analysis.py",
        "start_line": 56,
        "end_line": 64,
        "params": [
            "self",
            "file_path"
        ],
        "docstring": "Loads patch tracking data from a JSON file, or returns an empty dict on error."
    },
    {
        "name": "_save_patch_data",
        "file": ".\\agents\\core\\utilities\\ai_rollback_analysis.py",
        "start_line": 66,
        "end_line": 72,
        "params": [
            "self",
            "file_path",
            "data"
        ],
        "docstring": "Saves patch tracking data to a JSON file, logging errors if they occur."
    },
    {
        "name": "track_patch_history",
        "file": ".\\agents\\core\\utilities\\ai_rollback_analysis.py",
        "start_line": 74,
        "end_line": 86,
        "params": [
            "self",
            "error_signature",
            "patch",
            "status"
        ],
        "docstring": "Logs each patch attempt with its result (e.g., \"Failed\", \"Refined\", etc.).\n\n:param error_signature: A unique key identifying the error/failure scenario.\n:param patch: The patch content or diff.\n:param status: The status of the patch (e.g., \"Failed\", \"Refined\")."
    },
    {
        "name": "analyze_failed_patches",
        "file": ".\\agents\\core\\utilities\\ai_rollback_analysis.py",
        "start_line": 88,
        "end_line": 124,
        "params": [
            "self",
            "error_signature"
        ],
        "docstring": "Uses AI to classify patches into three categories:\n  - refinable (score > 75)\n  - bad (score < 50)\n  - uncertain (everything else)\n\nReturns a tuple: (refinable_patches, bad_patches, uncertain_patches)."
    },
    {
        "name": "refine_patches",
        "file": ".\\agents\\core\\utilities\\ai_rollback_analysis.py",
        "start_line": 126,
        "end_line": 149,
        "params": [
            "self",
            "error_signature"
        ],
        "docstring": "Attempts to refine near-correct patches. Returns True if at least one patch is refined;\notherwise returns False."
    },
    {
        "name": "process_failed_patches",
        "file": ".\\agents\\core\\utilities\\ai_rollback_analysis.py",
        "start_line": 151,
        "end_line": 156,
        "params": [
            "self",
            "error_signature"
        ],
        "docstring": "Main function to analyze, refine, and reattempt failed patches.\nReturns True if refinement succeeded, False otherwise."
    },
    {
        "name": "__init__",
        "file": ".\\agents\\core\\utilities\\ai_rollback_analysis.py",
        "start_line": 160,
        "end_line": 163,
        "params": [
            "self",
            "rollback_analysis"
        ],
        "docstring": null
    },
    {
        "name": "initUI",
        "file": ".\\agents\\core\\utilities\\ai_rollback_analysis.py",
        "start_line": 165,
        "end_line": 189,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "update_table",
        "file": ".\\agents\\core\\utilities\\ai_rollback_analysis.py",
        "start_line": 191,
        "end_line": 219,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "__init__",
        "file": ".\\agents\\core\\utilities\\CustomAgent.py",
        "start_line": 31,
        "end_line": 40,
        "params": [
            "self",
            "name",
            "project_name"
        ],
        "docstring": "Initializes the CustomAgent, setting up logging and required resources.\n\nArgs:\n    name (str): Name of the agent.\n    project_name (str): Project or domain the agent is associated with."
    },
    {
        "name": "solve_task",
        "file": ".\\agents\\core\\utilities\\CustomAgent.py",
        "start_line": 42,
        "end_line": 60,
        "params": [
            "self",
            "task"
        ],
        "docstring": "Executes a custom-defined task, handling errors gracefully.\n\nArgs:\n    task (str): The main task description.\n    **kwargs: Additional arguments required for task execution.\n\nReturns:\n    Any: Result of the executed task or error message if task fails."
    },
    {
        "name": "perform_task_logic",
        "file": ".\\agents\\core\\utilities\\CustomAgent.py",
        "start_line": 62,
        "end_line": 75,
        "params": [
            "self",
            "task"
        ],
        "docstring": "Implements the core logic for task execution.\n\nArgs:\n    task (str): Description of the task.\n    **kwargs: Additional parameters for task-specific logic.\n\nReturns:\n    str: Message indicating task completion."
    },
    {
        "name": "describe_capabilities",
        "file": ".\\agents\\core\\utilities\\CustomAgent.py",
        "start_line": 77,
        "end_line": 86,
        "params": [
            "self"
        ],
        "docstring": "Provides a description of the agent\u2019s capabilities.\n\nReturns:\n    str: Description of what the agent can do."
    },
    {
        "name": "shutdown",
        "file": ".\\agents\\core\\utilities\\CustomAgent.py",
        "start_line": 88,
        "end_line": 92,
        "params": [
            "self"
        ],
        "docstring": "Shuts down the agent, releasing any allocated resources."
    },
    {
        "name": "__init__",
        "file": ".\\agents\\core\\utilities\\debugging_orchestrator.py",
        "start_line": 40,
        "end_line": 46,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "start_debugging_session",
        "file": ".\\agents\\core\\utilities\\debugging_orchestrator.py",
        "start_line": 48,
        "end_line": 87,
        "params": [
            "self",
            "task_description",
            "error_log"
        ],
        "docstring": "Initiates a debugging session with a task description and error log.\n\nArgs:\n    task_description (str): Description of the task to debug.\n    error_log (str): Initial error message to analyze."
    },
    {
        "name": "resolve_and_document",
        "file": ".\\agents\\core\\utilities\\debugging_orchestrator.py",
        "start_line": 89,
        "end_line": 104,
        "params": [
            "self",
            "resolution_steps"
        ],
        "docstring": "Resolves errors with provided steps and documents in journal.\n\nArgs:\n    resolution_steps (str): Steps taken to resolve the error."
    },
    {
        "name": "summarize_session",
        "file": ".\\agents\\core\\utilities\\debugging_orchestrator.py",
        "start_line": 106,
        "end_line": 120,
        "params": [
            "self",
            "task_description"
        ],
        "docstring": "Summarizes the session and completes the journal entry.\n\nArgs:\n    task_description (str): Description of the task being summarized."
    },
    {
        "name": "perform_scheduled_backup",
        "file": ".\\agents\\core\\utilities\\debugging_orchestrator.py",
        "start_line": 122,
        "end_line": 135,
        "params": [
            "self"
        ],
        "docstring": "Backup journal entries as part of scheduled maintenance."
    },
    {
        "name": "deepseek_chunk_code",
        "file": ".\\agents\\core\\utilities\\debug_agent_utils.py",
        "start_line": 46,
        "end_line": 58,
        "params": [
            "file_content",
            "max_chars"
        ],
        "docstring": "Splits file content into smaller chunks for DeepSeek/LLM processing.\nEnsures optimal chunking for token-based AI models.\n\nArgs:\n    file_content (str): The complete file content.\n    max_chars (int): Maximum characters per chunk (default: 1000).\n\nReturns:\n    List[str]: A list of chunked code strings."
    },
    {
        "name": "run_deepseek_ollama_analysis",
        "file": ".\\agents\\core\\utilities\\debug_agent_utils.py",
        "start_line": 61,
        "end_line": 165,
        "params": [
            "chunks",
            "error_msg",
            "model"
        ],
        "docstring": "Uses Ollama (or DeepSeek as a backup) to analyze code chunks and suggest patches.\n\nIf both fail, OpenAI GPT is used as the final fallback.\n\nArgs:\n    chunks (List[str]): List of code chunks.\n    error_msg (str): The error message associated with the bug.\n    model (str): The primary model to use (default: \"mistral\").\n\nReturns:\n    str: A combined AI-generated patch or an empty string if all LLMs fail."
    },
    {
        "name": "parse_diff_suggestion",
        "file": ".\\agents\\core\\utilities\\debug_agent_utils.py",
        "start_line": 168,
        "end_line": 198,
        "params": [
            "suggestion"
        ],
        "docstring": "Parses a unified diff suggestion string into a list of patch changes.\nUtilizes unidiff.PatchSet to parse the diff.\n\nReturns:\n    Optional[List[Dict[str, Any]]]: A list of changes where each change is a dict,\n    or None if parsing fails."
    },
    {
        "name": "apply_diff_patch",
        "file": ".\\agents\\core\\utilities\\debug_agent_utils.py",
        "start_line": 201,
        "end_line": 233,
        "params": [
            "file_paths",
            "patch"
        ],
        "docstring": "Applies a patch to the given files.\nThis naive implementation iterates over the provided patch changes and applies\nadditions or removals to the target files.\n\nArgs:\n    file_paths (List[str]): List of file paths to apply the patch to.\n    patch (List[Dict[str, Any]]): A list of patch changes."
    },
    {
        "name": "rollback_changes",
        "file": ".\\agents\\core\\utilities\\debug_agent_utils.py",
        "start_line": 236,
        "end_line": 252,
        "params": [
            "files_modified"
        ],
        "docstring": "Rolls back changes to avoid permanent breakage using Git.\n\nArgs:\n    files_modified (List[str]): List of file paths to revert."
    },
    {
        "name": "queue_additional_agents",
        "file": ".\\agents\\core\\utilities\\debug_agent_utils.py",
        "start_line": 255,
        "end_line": 266,
        "params": [
            "agent_list"
        ],
        "docstring": "Schedules additional debugging agents for deeper analysis.\n\nArgs:\n    agent_list (List[str]): List of agent names to queue.\n\nReturns:\n    Dict[str, Any]: Status of the queue operation."
    },
    {
        "name": "__init__",
        "file": ".\\agents\\core\\utilities\\tbow_scanner.py",
        "start_line": 14,
        "end_line": 15,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "fetch_market_data",
        "file": ".\\agents\\core\\utilities\\tbow_scanner.py",
        "start_line": 17,
        "end_line": 29,
        "params": [
            "self"
        ],
        "docstring": "Mock method for fetching market data.\nActual implementation will use API calls.\n\nReturns:\n    Dict[str, List]: A dictionary containing timestamps, MACD, and signal line values."
    },
    {
        "name": "detect_macd_curl",
        "file": ".\\agents\\core\\utilities\\tbow_scanner.py",
        "start_line": 31,
        "end_line": 67,
        "params": [
            "self"
        ],
        "docstring": "Detects a MACD curl event where the MACD crosses above the signal line.\nIt verifies that there is at least one prior data point where MACD was below the signal,\nand that the latest data point shows MACD above the signal.\n\nReturns:\n    bool: True if a valid MACD curl is detected, False otherwise."
    },
    {
        "name": "calculate_macd_slope",
        "file": ".\\agents\\core\\utilities\\tbow_scanner.py",
        "start_line": 69,
        "end_line": 87,
        "params": [
            "self"
        ],
        "docstring": "Calculates the slope (difference) between consecutive MACD values.\n\nReturns:\n    List[float]: A list containing the slope values between consecutive MACD points."
    },
    {
        "name": "analyze_curl_strength",
        "file": ".\\agents\\core\\utilities\\tbow_scanner.py",
        "start_line": 89,
        "end_line": 108,
        "params": [
            "self"
        ],
        "docstring": "Analyzes the strength of the detected MACD curl.\nIf a valid curl is detected, returns the difference between MACD and signal at the latest data point.\nOtherwise, returns 0.0.\n\nReturns:\n    float: The strength of the MACD curl."
    },
    {
        "name": "__init__",
        "file": ".\\agents\\core\\utilities\\tbow_trade_executor.py",
        "start_line": 13,
        "end_line": 22,
        "params": [
            "self",
            "api_key",
            "api_secret",
            "base_url"
        ],
        "docstring": "Initializes the Alpaca API client.\n\nArgs:\n    api_key (str): Alpaca API key.\n    api_secret (str): Alpaca API secret.\n    base_url (str): Alpaca API base URL."
    },
    {
        "name": "place_order",
        "file": ".\\agents\\core\\utilities\\tbow_trade_executor.py",
        "start_line": 24,
        "end_line": 50,
        "params": [
            "self",
            "symbol",
            "qty",
            "side",
            "order_type",
            "time_in_force"
        ],
        "docstring": "Places an order using Alpaca API.\n\nArgs:\n    symbol (str): The stock symbol to trade.\n    qty (int): Quantity of shares/contracts.\n    side (str): \"buy\" or \"sell\".\n    order_type (str, optional): Type of order (default is \"market\").\n    time_in_force (str, optional): Time in force (default is \"gtc\").\n\nReturns:\n    Optional[Dict]: Order confirmation details, or None if order fails."
    },
    {
        "name": "get_position",
        "file": ".\\agents\\core\\utilities\\tbow_trade_executor.py",
        "start_line": 52,
        "end_line": 67,
        "params": [
            "self",
            "symbol"
        ],
        "docstring": "Retrieves current position for a given stock.\n\nArgs:\n    symbol (str): The stock symbol.\n\nReturns:\n    Optional[Dict]: Position details, or None if no position exists."
    },
    {
        "name": "close_position",
        "file": ".\\agents\\core\\utilities\\tbow_trade_executor.py",
        "start_line": 69,
        "end_line": 85,
        "params": [
            "self",
            "symbol"
        ],
        "docstring": "Closes an open position.\n\nArgs:\n    symbol (str): The stock symbol to close.\n\nReturns:\n    bool: True if the position was closed successfully, False otherwise."
    },
    {
        "name": "__init__",
        "file": ".\\ai_engine\\confidence_manager.py",
        "start_line": 23,
        "end_line": 26,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "_load_json",
        "file": ".\\ai_engine\\confidence_manager.py",
        "start_line": 28,
        "end_line": 39,
        "params": [
            "self",
            "file_path"
        ],
        "docstring": "Generic JSON loader."
    },
    {
        "name": "_save_json",
        "file": ".\\ai_engine\\confidence_manager.py",
        "start_line": 41,
        "end_line": 47,
        "params": [
            "self",
            "file_path",
            "data"
        ],
        "docstring": "Generic JSON saver."
    },
    {
        "name": "_get_historical_success_rate",
        "file": ".\\ai_engine\\confidence_manager.py",
        "start_line": 49,
        "end_line": 58,
        "params": [
            "self",
            "error_signature"
        ],
        "docstring": "Calculates the success rate of past patches for this error.\nReturns a default rate if no historical data exists."
    },
    {
        "name": "calculate_confidence",
        "file": ".\\ai_engine\\confidence_manager.py",
        "start_line": 60,
        "end_line": 64,
        "params": [
            "self",
            "error_signature"
        ],
        "docstring": "Returns the overall confidence level for a given error signature."
    },
    {
        "name": "assign_confidence_score",
        "file": ".\\ai_engine\\confidence_manager.py",
        "start_line": 66,
        "end_line": 99,
        "params": [
            "self",
            "error_signature",
            "patch"
        ],
        "docstring": "Assigns a confidence score to the given patch based on historical success.\nAlso stores the patch data in the confidence_scores store and,\nif high enough, in the high_confidence_store.\n\nReturns:\n    Tuple[float, str]: The assigned confidence score and a reasoning message."
    },
    {
        "name": "store_patch",
        "file": ".\\ai_engine\\confidence_manager.py",
        "start_line": 101,
        "end_line": 110,
        "params": [
            "self",
            "error_signature",
            "patch",
            "confidence"
        ],
        "docstring": "Stores high-confidence patches separately to avoid redundant processing."
    },
    {
        "name": "get_best_high_confidence_patch",
        "file": ".\\ai_engine\\confidence_manager.py",
        "start_line": 112,
        "end_line": 122,
        "params": [
            "self",
            "error_signature"
        ],
        "docstring": "Retrieves the best high-confidence patch for a given error signature.\nReturns None if no patch qualifies."
    },
    {
        "name": "suggest_patch_reattempt",
        "file": ".\\ai_engine\\confidence_manager.py",
        "start_line": 124,
        "end_line": 136,
        "params": [
            "self",
            "error_signature"
        ],
        "docstring": "Suggests a patch for reattempt if it now has improved confidence.\nReturns the patch string if one qualifies, or None."
    },
    {
        "name": "get_confidence",
        "file": ".\\ai_engine\\confidence_manager.py",
        "start_line": 138,
        "end_line": 146,
        "params": [
            "self",
            "error_signature"
        ],
        "docstring": "Returns the current confidence level for the given error signature.\nIf no confidence data exists, returns a default value (e.g., 0.5)."
    },
    {
        "name": "analyze_failed_patch",
        "file": ".\\ai_engine\\patch_analyzer.py",
        "start_line": 11,
        "end_line": 35,
        "params": [
            "error_signature",
            "patch"
        ],
        "docstring": "Analyzes the failed patch and returns a tuple (error_message, patch_confidence).\n\nThis method implements a regex-based approach to detect common syntax errors,\nproviding a confidence score based on detected patterns.\n\nArgs:\n    error_signature (str): Unique identifier for the error type.\n    patch (str): The failed patch content.\n\nReturns:\n    tuple: (error_message, patch_confidence)"
    },
    {
        "name": "modify_failed_patch",
        "file": ".\\ai_engine\\patch_analyzer.py",
        "start_line": 38,
        "end_line": 61,
        "params": [
            "error_signature",
            "patch"
        ],
        "docstring": "Generates a modified patch based on the error signature and the original failed patch.\n\nThis method attempts to apply pattern-based corrections to common errors.\n\nArgs:\n    error_signature (str): Unique identifier for the error type.\n    patch (str): The failed patch content.\n\nReturns:\n    str: The modified patch."
    },
    {
        "name": "__init__",
        "file": ".\\ai_engine\\patch_optimizer.py",
        "start_line": 25,
        "end_line": 28,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "refine_failed_patch",
        "file": ".\\ai_engine\\patch_optimizer.py",
        "start_line": 30,
        "end_line": 58,
        "params": [
            "self",
            "error_signature",
            "original_patch"
        ],
        "docstring": "Auto-tunes a failed patch by making incremental modifications.\nIf AI confidence improves, the patch is retried."
    },
    {
        "name": "_modify_patch",
        "file": ".\\ai_engine\\patch_optimizer.py",
        "start_line": 60,
        "end_line": 80,
        "params": [
            "self",
            "patch"
        ],
        "docstring": "Modifies a patch using AI heuristics.\nCan fix common issues like missing imports, indentation errors, etc.\nTries available modifications in random order until one changes the patch."
    },
    {
        "name": "attempt_patch_reapply",
        "file": ".\\ai_engine\\patch_optimizer.py",
        "start_line": 82,
        "end_line": 101,
        "params": [
            "self",
            "error_signature",
            "test_file",
            "original_patch"
        ],
        "docstring": "If a patch is modified successfully, attempt to reapply it."
    },
    {
        "name": "__init__",
        "file": ".\\ai_engine\\patch_review_manager.py",
        "start_line": 40,
        "end_line": 47,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "_load_patch_data",
        "file": ".\\ai_engine\\patch_review_manager.py",
        "start_line": 49,
        "end_line": 57,
        "params": [
            "self",
            "file_path"
        ],
        "docstring": "Loads patch tracking data from a JSON file."
    },
    {
        "name": "_save_patch_data",
        "file": ".\\ai_engine\\patch_review_manager.py",
        "start_line": 59,
        "end_line": 65,
        "params": [
            "self",
            "file_path",
            "data"
        ],
        "docstring": "Saves patch tracking data to a JSON file."
    },
    {
        "name": "rank_human_reviewed_patches",
        "file": ".\\ai_engine\\patch_review_manager.py",
        "start_line": 67,
        "end_line": 94,
        "params": [
            "self"
        ],
        "docstring": "Ranks human-reviewed patches based on AI evaluation and past success rates."
    },
    {
        "name": "log_patch_attempt",
        "file": ".\\ai_engine\\patch_review_manager.py",
        "start_line": 96,
        "end_line": 107,
        "params": [
            "self",
            "error_signature",
            "patch",
            "outcome",
            "extra_info"
        ],
        "docstring": "Logs a patch attempt with outcome and additional information."
    },
    {
        "name": "get_best_patch",
        "file": ".\\ai_engine\\patch_review_manager.py",
        "start_line": 109,
        "end_line": 116,
        "params": [
            "self",
            "error_signature"
        ],
        "docstring": "Retrieves the highest-ranked patch for a given error signature."
    },
    {
        "name": "process_human_reviewed_patches",
        "file": ".\\ai_engine\\patch_review_manager.py",
        "start_line": 118,
        "end_line": 131,
        "params": [
            "self"
        ],
        "docstring": "Processes human-reviewed patches: ranks them, applies the best patch via PatchTrackingManager,\nand logs the outcome."
    },
    {
        "name": "analyze_patch_failures",
        "file": ".\\ai_engine\\patch_review_manager.py",
        "start_line": 133,
        "end_line": 150,
        "params": [
            "self"
        ],
        "docstring": "Analyzes detailed logs to extract common failure patterns.\n\nReturns:\n    dict: Mapping of error signatures to failure reasons and counts."
    },
    {
        "name": "__init__",
        "file": ".\\ai_engine\\models\\ai_model_manager.py",
        "start_line": 32,
        "end_line": 43,
        "params": [
            "self"
        ],
        "docstring": "Initialize AIModelManager with confidence tracking and patch history."
    },
    {
        "name": "generate_patch",
        "file": ".\\ai_engine\\models\\ai_model_manager.py",
        "start_line": 45,
        "end_line": 76,
        "params": [
            "self",
            "error_msg",
            "code_context",
            "test_file"
        ],
        "docstring": "Generates a patch suggestion using the best available AI model.\n\nFallback order: Mistral \u2192 DeepSeek \u2192 OpenAI.\nIf a patch fails, AI **retries with modifications** if confidence improves."
    },
    {
        "name": "save_model",
        "file": ".\\ai_engine\\models\\ai_model_manager.py",
        "start_line": 78,
        "end_line": 94,
        "params": [
            "self",
            "model_name",
            "model_data"
        ],
        "docstring": "Saves the given model data to a JSON file.\n\nArgs:\n    model_name (str): Name of the model.\n    model_data (dict, optional): Model parameters or metadata. Defaults to empty dict."
    },
    {
        "name": "load_model",
        "file": ".\\ai_engine\\models\\ai_model_manager.py",
        "start_line": 96,
        "end_line": 118,
        "params": [
            "self",
            "model_name"
        ],
        "docstring": "Loads the specified model from storage.\n\nArgs:\n    model_name (str): Name of the model.\n\nReturns:\n    dict: Loaded model data if successful, otherwise an empty dictionary."
    },
    {
        "name": "_format_prompt",
        "file": ".\\ai_engine\\models\\ai_model_manager.py",
        "start_line": 121,
        "end_line": 129,
        "params": [
            "self",
            "error_msg",
            "code_context",
            "test_file"
        ],
        "docstring": "Formats the debugging request into a structured AI prompt."
    },
    {
        "name": "_compute_error_signature",
        "file": ".\\ai_engine\\models\\ai_model_manager.py",
        "start_line": 131,
        "end_line": 137,
        "params": [
            "self",
            "error_msg",
            "code_context"
        ],
        "docstring": "Computes a unique signature for the given error and code context.\nUsed to track and avoid repeating similar patches."
    },
    {
        "name": "_generate_with_model",
        "file": ".\\ai_engine\\models\\ai_model_manager.py",
        "start_line": 139,
        "end_line": 168,
        "params": [
            "self",
            "model",
            "prompt"
        ],
        "docstring": "Dynamically calls the appropriate AI model."
    },
    {
        "name": "_simulate_model_response",
        "file": ".\\ai_engine\\models\\ai_model_manager.py",
        "start_line": 170,
        "end_line": 176,
        "params": [
            "self",
            "model",
            "prompt"
        ],
        "docstring": "Simulate a model response for debugging purposes.\nIn a real-world scenario, integrate with the actual model API."
    },
    {
        "name": "__init__",
        "file": ".\\ai_engine\\models\\deepseek_model.py",
        "start_line": 33,
        "end_line": 39,
        "params": [
            "self",
            "model_path"
        ],
        "docstring": "Initializes the DeepSeek model."
    },
    {
        "name": "generate_patch",
        "file": ".\\ai_engine\\models\\deepseek_model.py",
        "start_line": 41,
        "end_line": 69,
        "params": [
            "self",
            "error_message",
            "code_context",
            "test_file"
        ],
        "docstring": "Generates a patch suggestion and validates it before application.\n- First, attempts DeepSeek.\n- If DeepSeek fails, falls back to OpenAI.\n- If patches fail, retries with slight modifications."
    },
    {
        "name": "_format_prompt",
        "file": ".\\ai_engine\\models\\deepseek_model.py",
        "start_line": 71,
        "end_line": 81,
        "params": [
            "self",
            "error_message",
            "code_context",
            "test_file"
        ],
        "docstring": "Formats the debugging request into a structured AI prompt."
    },
    {
        "name": "_modify_prompt",
        "file": ".\\ai_engine\\models\\deepseek_model.py",
        "start_line": 83,
        "end_line": 96,
        "params": [
            "self",
            "prompt",
            "attempt"
        ],
        "docstring": "Modifies the prompt slightly to encourage AI variation.\nUseful for retrying patches when the first attempt fails."
    },
    {
        "name": "_generate_patch_with_fallback",
        "file": ".\\ai_engine\\models\\deepseek_model.py",
        "start_line": 98,
        "end_line": 111,
        "params": [
            "self",
            "prompt"
        ],
        "docstring": "Tries DeepSeek first, then falls back to OpenAI GPT-4 if needed.\nReturns a tuple (patch, model_used)."
    },
    {
        "name": "_generate_with_deepseek",
        "file": ".\\ai_engine\\models\\deepseek_model.py",
        "start_line": 113,
        "end_line": 131,
        "params": [
            "self",
            "prompt"
        ],
        "docstring": "Calls DeepSeek (local or CLI) to generate a patch."
    },
    {
        "name": "_generate_with_openai",
        "file": ".\\ai_engine\\models\\deepseek_model.py",
        "start_line": 133,
        "end_line": 152,
        "params": [
            "self",
            "prompt"
        ],
        "docstring": "Calls OpenAI GPT-4 if DeepSeek fails."
    },
    {
        "name": "_validate_patch",
        "file": ".\\ai_engine\\models\\deepseek_model.py",
        "start_line": 154,
        "end_line": 164,
        "params": [
            "self",
            "patch"
        ],
        "docstring": "Validates the AI-generated patch before applying it."
    },
    {
        "name": "_record_ai_performance",
        "file": ".\\ai_engine\\models\\deepseek_model.py",
        "start_line": 166,
        "end_line": 181,
        "params": [
            "self",
            "model_used",
            "success"
        ],
        "docstring": "Records AI performance for debugging effectiveness analysis."
    },
    {
        "name": "_load_ai_performance",
        "file": ".\\ai_engine\\models\\deepseek_model.py",
        "start_line": 183,
        "end_line": 193,
        "params": [
            "self"
        ],
        "docstring": "Loads AI performance tracking data."
    },
    {
        "name": "_save_ai_performance",
        "file": ".\\ai_engine\\models\\deepseek_model.py",
        "start_line": 195,
        "end_line": 203,
        "params": [
            "self"
        ],
        "docstring": "Saves AI performance tracking data."
    },
    {
        "name": "_simulate_patch",
        "file": ".\\ai_engine\\models\\deepseek_model.py",
        "start_line": 205,
        "end_line": 215,
        "params": [
            "self"
        ],
        "docstring": "Simulates a patch generation (for testing without AI calls)."
    },
    {
        "name": "__init__",
        "file": ".\\ai_engine\\models\\mistral_model.py",
        "start_line": 36,
        "end_line": 45,
        "params": [
            "self",
            "model_path"
        ],
        "docstring": "Initializes the Mistral model."
    },
    {
        "name": "_ensure_file_exists",
        "file": ".\\ai_engine\\models\\mistral_model.py",
        "start_line": 47,
        "end_line": 51,
        "params": [
            "self",
            "file_path"
        ],
        "docstring": "Ensures the performance tracking file exists before reading/writing."
    },
    {
        "name": "generate_patch",
        "file": ".\\ai_engine\\models\\mistral_model.py",
        "start_line": 53,
        "end_line": 78,
        "params": [
            "self",
            "error_message",
            "code_context",
            "test_file"
        ],
        "docstring": "Generates a patch suggestion and validates it before application."
    },
    {
        "name": "_format_prompt",
        "file": ".\\ai_engine\\models\\mistral_model.py",
        "start_line": 80,
        "end_line": 90,
        "params": [
            "self",
            "error_message",
            "code_context",
            "test_file"
        ],
        "docstring": "Formats the debugging request into a structured AI prompt."
    },
    {
        "name": "_modify_prompt",
        "file": ".\\ai_engine\\models\\mistral_model.py",
        "start_line": 92,
        "end_line": 102,
        "params": [
            "self",
            "prompt",
            "attempt"
        ],
        "docstring": "Modifies the prompt slightly to encourage AI variation."
    },
    {
        "name": "_generate_patch_with_fallback",
        "file": ".\\ai_engine\\models\\mistral_model.py",
        "start_line": 104,
        "end_line": 114,
        "params": [
            "self",
            "prompt"
        ],
        "docstring": "Tries Mistral first, then falls back to OpenAI GPT-4 if needed."
    },
    {
        "name": "_generate_with_mistral",
        "file": ".\\ai_engine\\models\\mistral_model.py",
        "start_line": 116,
        "end_line": 135,
        "params": [
            "self",
            "prompt"
        ],
        "docstring": "Calls Mistral (local or CLI) to generate a patch."
    },
    {
        "name": "_generate_with_openai",
        "file": ".\\ai_engine\\models\\mistral_model.py",
        "start_line": 137,
        "end_line": 153,
        "params": [
            "self",
            "prompt"
        ],
        "docstring": "Calls OpenAI GPT-4 if Mistral fails."
    },
    {
        "name": "_validate_patch",
        "file": ".\\ai_engine\\models\\mistral_model.py",
        "start_line": 155,
        "end_line": 161,
        "params": [
            "self",
            "patch"
        ],
        "docstring": "Validates the AI-generated patch before applying it."
    },
    {
        "name": "_record_ai_performance",
        "file": ".\\ai_engine\\models\\mistral_model.py",
        "start_line": 163,
        "end_line": 176,
        "params": [
            "self",
            "model_used",
            "success"
        ],
        "docstring": "Records AI performance for debugging effectiveness analysis."
    },
    {
        "name": "_load_ai_performance",
        "file": ".\\ai_engine\\models\\mistral_model.py",
        "start_line": 178,
        "end_line": 185,
        "params": [
            "self"
        ],
        "docstring": "Loads AI performance tracking data."
    },
    {
        "name": "_save_ai_performance",
        "file": ".\\ai_engine\\models\\mistral_model.py",
        "start_line": 187,
        "end_line": 193,
        "params": [
            "self"
        ],
        "docstring": "Saves AI performance tracking data."
    },
    {
        "name": "_simulate_patch",
        "file": ".\\ai_engine\\models\\mistral_model.py",
        "start_line": 195,
        "end_line": 203,
        "params": [
            "self"
        ],
        "docstring": "Simulates a patch generation (for testing without AI calls)."
    },
    {
        "name": "__init__",
        "file": ".\\ai_engine\\models\\openai_model.py",
        "start_line": 34,
        "end_line": 43,
        "params": [
            "self",
            "api_key"
        ],
        "docstring": "Initializes the OpenAI model wrapper."
    },
    {
        "name": "_ensure_file_exists",
        "file": ".\\ai_engine\\models\\openai_model.py",
        "start_line": 45,
        "end_line": 49,
        "params": [
            "self",
            "file_path"
        ],
        "docstring": "Ensures the AI performance tracking file exists before reading/writing."
    },
    {
        "name": "_load_ai_performance",
        "file": ".\\ai_engine\\models\\openai_model.py",
        "start_line": 51,
        "end_line": 61,
        "params": [
            "self"
        ],
        "docstring": "Loads AI performance tracking data."
    },
    {
        "name": "_save_ai_performance",
        "file": ".\\ai_engine\\models\\openai_model.py",
        "start_line": 63,
        "end_line": 72,
        "params": [
            "self"
        ],
        "docstring": "Saves AI performance tracking data."
    },
    {
        "name": "_record_ai_performance",
        "file": ".\\ai_engine\\models\\openai_model.py",
        "start_line": 74,
        "end_line": 90,
        "params": [
            "self",
            "model_used",
            "success"
        ],
        "docstring": "Records AI performance for debugging effectiveness analysis."
    },
    {
        "name": "generate_patch",
        "file": ".\\ai_engine\\models\\openai_model.py",
        "start_line": 92,
        "end_line": 106,
        "params": [
            "self",
            "error_message",
            "code_context",
            "test_file"
        ],
        "docstring": "Generates a patch suggestion and validates it before application."
    },
    {
        "name": "_format_prompt",
        "file": ".\\ai_engine\\models\\openai_model.py",
        "start_line": 108,
        "end_line": 116,
        "params": [
            "self",
            "error_message",
            "code_context",
            "test_file"
        ],
        "docstring": "Formats the debugging request into a structured AI prompt."
    },
    {
        "name": "_generate_patch_with_retries",
        "file": ".\\ai_engine\\models\\openai_model.py",
        "start_line": 118,
        "end_line": 129,
        "params": [
            "self",
            "prompt"
        ],
        "docstring": "Attempts to generate a patch with OpenAI GPT-4 Turbo, with retries."
    },
    {
        "name": "_modify_prompt",
        "file": ".\\ai_engine\\models\\openai_model.py",
        "start_line": 131,
        "end_line": 139,
        "params": [
            "self",
            "prompt",
            "attempt"
        ],
        "docstring": "Modifies the prompt slightly to encourage AI variation."
    },
    {
        "name": "_generate_with_openai",
        "file": ".\\ai_engine\\models\\openai_model.py",
        "start_line": 141,
        "end_line": 157,
        "params": [
            "self",
            "prompt"
        ],
        "docstring": "Calls OpenAI GPT-4 Turbo to generate a patch."
    },
    {
        "name": "_validate_patch",
        "file": ".\\ai_engine\\models\\openai_model.py",
        "start_line": 159,
        "end_line": 165,
        "params": [
            "self",
            "patch"
        ],
        "docstring": "Validates the AI-generated patch before applying it."
    },
    {
        "name": "__init__",
        "file": ".\\ai_engine\\models\\trade_analyzer.py",
        "start_line": 19,
        "end_line": 20,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "calculate_macd",
        "file": ".\\ai_engine\\models\\trade_analyzer.py",
        "start_line": 22,
        "end_line": 41,
        "params": [
            "self",
            "prices",
            "short_window",
            "long_window",
            "signal_window"
        ],
        "docstring": "Calculates the MACD line, signal line, and histogram.\n\nArgs:\n    prices (pd.Series): Stock price data.\n    short_window (int): Short EMA period (default: 12).\n    long_window (int): Long EMA period (default: 26).\n    signal_window (int): Signal EMA period (default: 9).\n\nReturns:\n    pd.DataFrame: MACD, Signal line, and Histogram."
    },
    {
        "name": "detect_macd_curl",
        "file": ".\\ai_engine\\models\\trade_analyzer.py",
        "start_line": 43,
        "end_line": 66,
        "params": [
            "self",
            "macd_data"
        ],
        "docstring": "Identifies bullish or bearish MACD curl patterns.\n\nArgs:\n    macd_data (pd.DataFrame): DataFrame with MACD and Signal line.\n\nReturns:\n    str: \"Bullish Curl\" or \"Bearish Curl\" if detected, otherwise \"No Curl\"."
    },
    {
        "name": "identify_support_resistance",
        "file": ".\\ai_engine\\models\\trade_analyzer.py",
        "start_line": 68,
        "end_line": 84,
        "params": [
            "self",
            "price_data"
        ],
        "docstring": "Identifies key support and resistance levels using local minima/maxima.\n\nArgs:\n    price_data (pd.Series): Historical stock prices.\n\nReturns:\n    dict: Support and resistance levels."
    },
    {
        "name": "detect_trend",
        "file": ".\\ai_engine\\models\\trade_analyzer.py",
        "start_line": 86,
        "end_line": 102,
        "params": [
            "self",
            "price_data"
        ],
        "docstring": "Determines the trend direction based on moving averages.\n\nArgs:\n    price_data (pd.Series): Stock price data.\n\nReturns:\n    str: \"Uptrend\", \"Downtrend\", or \"Sideways\"."
    },
    {
        "name": "fetch_stock_price",
        "file": ".\\ai_engine\\models\\apis\\api_client.py",
        "start_line": 38,
        "end_line": 50,
        "params": [
            "symbol"
        ],
        "docstring": "Fetches stock price from Yahoo Finance (Free, No API Key) "
    },
    {
        "name": "fetch_crypto_price",
        "file": ".\\ai_engine\\models\\apis\\api_client.py",
        "start_line": 53,
        "end_line": 63,
        "params": [
            "symbol"
        ],
        "docstring": "Fetches crypto prices from CoinGecko (Free, No API Key) "
    },
    {
        "name": "fetch_weather",
        "file": ".\\ai_engine\\models\\apis\\api_client.py",
        "start_line": 66,
        "end_line": 74,
        "params": [
            "location"
        ],
        "docstring": "Fetches weather data using wttr.in (Free, No API Key) "
    },
    {
        "name": "fetch_news",
        "file": ".\\ai_engine\\models\\apis\\api_client.py",
        "start_line": 77,
        "end_line": 90,
        "params": [
            "topic"
        ],
        "docstring": "Fetches news from Google News RSS (Free, No API Key) "
    },
    {
        "name": "fetch_stock_from_alpaca",
        "file": ".\\ai_engine\\models\\apis\\api_client.py",
        "start_line": 94,
        "end_line": 100,
        "params": [
            "symbol"
        ],
        "docstring": "Fetches stock price using Alpaca API (Requires API Key) "
    },
    {
        "name": "fetch_news_from_finnhub",
        "file": ".\\ai_engine\\models\\apis\\api_client.py",
        "start_line": 103,
        "end_line": 108,
        "params": [
            "topic"
        ],
        "docstring": "Fetches financial news from Finnhub API "
    },
    {
        "name": "fetch_forex_rate",
        "file": ".\\ai_engine\\models\\apis\\api_client.py",
        "start_line": 111,
        "end_line": 118,
        "params": [
            "currency"
        ],
        "docstring": "Fetches Forex rates from AlphaVantage API "
    },
    {
        "name": "fetch_macro_data",
        "file": ".\\ai_engine\\models\\apis\\api_client.py",
        "start_line": 121,
        "end_line": 128,
        "params": [],
        "docstring": "Fetches macroeconomic data from the FRED API "
    },
    {
        "name": "__init__",
        "file": ".\\ai_engine\\models\\apis\\market_data.py",
        "start_line": 12,
        "end_line": 13,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "get_stock_data",
        "file": ".\\ai_engine\\models\\apis\\market_data.py",
        "start_line": 15,
        "end_line": 39,
        "params": [
            "self",
            "symbol"
        ],
        "docstring": "Fetches real-time stock data for a given symbol.\n\nArgs:\n    symbol (str): The stock ticker symbol.\n\nReturns:\n    dict: Stock price and volume data."
    },
    {
        "name": "run_project_setup",
        "file": ".\\ai_engine\\models\\debugger\\advanced_init_setup.py",
        "start_line": 204,
        "end_line": 219,
        "params": [
            "project_root"
        ],
        "docstring": "Runs the project analysis and then sets up missing __init__.py files based on the analysis.\n\nArgs:\n    project_root (str, optional): The project root directory. Defaults to current working directory."
    },
    {
        "name": "__init__",
        "file": ".\\ai_engine\\models\\debugger\\advanced_init_setup.py",
        "start_line": 44,
        "end_line": 53,
        "params": [
            "self",
            "project_root"
        ],
        "docstring": "Initialize the analyzer.\n\nArgs:\n    project_root (str): Path to the root of the project."
    },
    {
        "name": "scan_directories",
        "file": ".\\ai_engine\\models\\debugger\\advanced_init_setup.py",
        "start_line": 55,
        "end_line": 69,
        "params": [
            "self"
        ],
        "docstring": "Recursively scans the project directory for Python files."
    },
    {
        "name": "extract_code_context",
        "file": ".\\ai_engine\\models\\debugger\\advanced_init_setup.py",
        "start_line": 71,
        "end_line": 91,
        "params": [
            "self"
        ],
        "docstring": "Extracts module-level docstrings (if present) from each Python file.\nFor each module, stores a \"purpose\" field in the context data."
    },
    {
        "name": "map_dependencies",
        "file": ".\\ai_engine\\models\\debugger\\advanced_init_setup.py",
        "start_line": 93,
        "end_line": 113,
        "params": [
            "self"
        ],
        "docstring": "Parses each Python file and extracts import dependencies using AST."
    },
    {
        "name": "save_analysis",
        "file": ".\\ai_engine\\models\\debugger\\advanced_init_setup.py",
        "start_line": 115,
        "end_line": 123,
        "params": [
            "self"
        ],
        "docstring": "Saves the analysis results to a JSON file in the project root."
    },
    {
        "name": "analyze_project",
        "file": ".\\ai_engine\\models\\debugger\\advanced_init_setup.py",
        "start_line": 125,
        "end_line": 132,
        "params": [
            "self"
        ],
        "docstring": "Runs a full analysis of the project."
    },
    {
        "name": "get_analysis_data",
        "file": ".\\ai_engine\\models\\debugger\\advanced_init_setup.py",
        "start_line": 134,
        "end_line": 136,
        "params": [
            "self"
        ],
        "docstring": "Returns the full analysis data as a dictionary."
    },
    {
        "name": "get_package_dirs",
        "file": ".\\ai_engine\\models\\debugger\\advanced_init_setup.py",
        "start_line": 138,
        "end_line": 140,
        "params": [
            "self"
        ],
        "docstring": "Returns the set of directories (absolute paths) that contain Python files."
    },
    {
        "name": "get_docstring_for_directory",
        "file": ".\\ai_engine\\models\\debugger\\advanced_init_setup.py",
        "start_line": 142,
        "end_line": 153,
        "params": [
            "self",
            "directory"
        ],
        "docstring": "Returns a package docstring based on the directory name or analysis data.\nFor now, returns a placeholder value.\n\nArgs:\n    directory (str): The absolute path to the directory.\n\nReturns:\n    str: A package-level docstring."
    },
    {
        "name": "__init__",
        "file": ".\\ai_engine\\models\\debugger\\advanced_init_setup.py",
        "start_line": 164,
        "end_line": 171,
        "params": [
            "self",
            "analyzer",
            "default_header"
        ],
        "docstring": "Args:\n    analyzer (ProjectContextAnalyzer): The analyzer with project context.\n    default_header (str): Default header content for __init__.py files."
    },
    {
        "name": "setup_init_files",
        "file": ".\\ai_engine\\models\\debugger\\advanced_init_setup.py",
        "start_line": 173,
        "end_line": 186,
        "params": [
            "self"
        ],
        "docstring": "Iterates over all package directories (from the analyzer) and creates __init__.py\nfiles where they are missing. If available, includes extracted metadata in the file."
    },
    {
        "name": "_create_init_file",
        "file": ".\\ai_engine\\models\\debugger\\advanced_init_setup.py",
        "start_line": 188,
        "end_line": 201,
        "params": [
            "self",
            "file_path",
            "content"
        ],
        "docstring": "Creates an __init__.py file with the specified content.\n\nArgs:\n    file_path (str): The path to the __init__.py file.\n    content (str): The content to write in the file."
    },
    {
        "name": "__init__",
        "file": ".\\ai_engine\\models\\debugger\\ai_patch_retry_manager.py",
        "start_line": 23,
        "end_line": 29,
        "params": [
            "self"
        ],
        "docstring": "Initializes the retry manager with injected dependencies."
    },
    {
        "name": "retry_failed_patches",
        "file": ".\\ai_engine\\models\\debugger\\ai_patch_retry_manager.py",
        "start_line": 31,
        "end_line": 58,
        "params": [
            "self",
            "failed_patches"
        ],
        "docstring": "AI reviews failed patches and decides whether to retry or flag them."
    },
    {
        "name": "__init__",
        "file": ".\\ai_engine\\models\\debugger\\auto_fixer.py",
        "start_line": 39,
        "end_line": 45,
        "params": [
            "self",
            "needed_files"
        ],
        "docstring": "Optionally pass in a list of needed files (e.g. from your test).\nThat way we only copy exactly those test dependencies."
    },
    {
        "name": "_setup_workspace",
        "file": ".\\ai_engine\\models\\debugger\\auto_fixer.py",
        "start_line": 47,
        "end_line": 72,
        "params": [
            "self",
            "needed_files"
        ],
        "docstring": "Ensures test workspace exists and copies only needed files from `PROJECT_DIR`.\nIf `PROJECT_DIR` doesn't exist, logs an error."
    },
    {
        "name": "_full_workspace_path",
        "file": ".\\ai_engine\\models\\debugger\\auto_fixer.py",
        "start_line": 74,
        "end_line": 81,
        "params": [
            "self",
            "file_name"
        ],
        "docstring": "If `file_name` is already an absolute path or includes TEST_WORKSPACE, return as-is.\nOtherwise, join it with TEST_WORKSPACE."
    },
    {
        "name": "apply_fix",
        "file": ".\\ai_engine\\models\\debugger\\auto_fixer.py",
        "start_line": 83,
        "end_line": 111,
        "params": [
            "self",
            "failure"
        ],
        "docstring": "Attempt to fix a known test failure using:\n  1. Quick pattern-based fixes,\n  2. Known fixes from the learning DB,\n  3. AI-based patch generation.\n\nArgs:\n    failure (Dict[str, str]): A dict containing keys 'file' (file name) and 'error' (error message).\n\nReturns:\n    bool: True if a fix was applied, False otherwise."
    },
    {
        "name": "_apply_known_pattern",
        "file": ".\\ai_engine\\models\\debugger\\auto_fixer.py",
        "start_line": 113,
        "end_line": 132,
        "params": [
            "self",
            "failure"
        ],
        "docstring": "Check if the error matches any of our known quick-fix patterns and apply a fix if so.\nReturns True if a fix was applied, otherwise False."
    },
    {
        "name": "_apply_learned_fix",
        "file": ".\\ai_engine\\models\\debugger\\auto_fixer.py",
        "start_line": 134,
        "end_line": 148,
        "params": [
            "self",
            "failure",
            "fix"
        ],
        "docstring": "Append a previously learned fix to the file, preserving existing content."
    },
    {
        "name": "_apply_llm_fix",
        "file": ".\\ai_engine\\models\\debugger\\auto_fixer.py",
        "start_line": 150,
        "end_line": 197,
        "params": [
            "self",
            "failure"
        ],
        "docstring": "Use DebugAgentUtils to generate and apply an AI-based patch.\nCreates a backup before applying the patch so we can roll back if needed."
    },
    {
        "name": "_quick_fix_missing_attribute",
        "file": ".\\ai_engine\\models\\debugger\\auto_fixer.py",
        "start_line": 203,
        "end_line": 242,
        "params": [
            "self",
            "file_name",
            "error_msg"
        ],
        "docstring": "Adds a placeholder method if an AttributeError indicates a missing method.\nInserts into the first class definition or appends at file's end if no class found."
    },
    {
        "name": "_quick_fix_assertion_mismatch",
        "file": ".\\ai_engine\\models\\debugger\\auto_fixer.py",
        "start_line": 244,
        "end_line": 280,
        "params": [
            "self",
            "file_name",
            "error_msg"
        ],
        "docstring": "Fixes AssertionError patterns like 'AssertionError: X != Y' by aligning them \nor forcing the test to pass. This is simplistic and might break real tests if \nmisused. Demonstrative only."
    },
    {
        "name": "_quick_fix_import_error",
        "file": ".\\ai_engine\\models\\debugger\\auto_fixer.py",
        "start_line": 282,
        "end_line": 317,
        "params": [
            "self",
            "file_name",
            "error_msg"
        ],
        "docstring": "Prepends 'import missing_module' if there's a recognized missing module.\nAvoids rewriting the entire file."
    },
    {
        "name": "_quick_fix_indentation",
        "file": ".\\ai_engine\\models\\debugger\\auto_fixer.py",
        "start_line": 319,
        "end_line": 340,
        "params": [
            "self",
            "file_name"
        ],
        "docstring": "Converts tabs to spaces or attempts to fix indentation errors."
    },
    {
        "name": "_quick_fix_type_error",
        "file": ".\\ai_engine\\models\\debugger\\auto_fixer.py",
        "start_line": 342,
        "end_line": 406,
        "params": [
            "self",
            "file_name",
            "error_msg"
        ],
        "docstring": "Fixes TypeError caused by missing arguments by adding placeholders (None).\nThis method looks for function calls (ignoring definitions) and appends the required number\nof placeholder arguments."
    },
    {
        "name": "__init__",
        "file": ".\\ai_engine\\models\\debugger\\auto_fix_manager.py",
        "start_line": 26,
        "end_line": 28,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "run_tests",
        "file": ".\\ai_engine\\models\\debugger\\auto_fix_manager.py",
        "start_line": 30,
        "end_line": 45,
        "params": [
            "self"
        ],
        "docstring": "Runs tests and captures failures.\n\nReturns:\n    List[Dict[str, Any]]: A list of failed test cases with file paths and errors."
    },
    {
        "name": "_parse_test_failures",
        "file": ".\\ai_engine\\models\\debugger\\auto_fix_manager.py",
        "start_line": 47,
        "end_line": 68,
        "params": [
            "self",
            "test_output"
        ],
        "docstring": "Extracts failing test information from pytest output.\n\nArgs:\n    test_output (str): The output log from pytest.\n\nReturns:\n    List[Dict[str, Any]]: Extracted failure details."
    },
    {
        "name": "apply_patch",
        "file": ".\\ai_engine\\models\\debugger\\auto_fix_manager.py",
        "start_line": 70,
        "end_line": 80,
        "params": [
            "self",
            "patch"
        ],
        "docstring": "Applies the given patch using the debugging strategy.\n\nArgs:\n    patch (str): The patch to be applied.\n\nReturns:\n    bool: True if the patch was applied successfully; False otherwise."
    },
    {
        "name": "retry_tests",
        "file": ".\\ai_engine\\models\\debugger\\auto_fix_manager.py",
        "start_line": 82,
        "end_line": 153,
        "params": [
            "self",
            "max_retries"
        ],
        "docstring": "Runs tests, applies patches, retries fixes, and rolls back if all fail.\n\nArgs:\n    max_retries (int): Maximum number of retries before rollback.\n\nReturns:\n    Dict[str, Any]: Final retry status."
    },
    {
        "name": "rollback_changes",
        "file": ".\\ai_engine\\models\\debugger\\auto_fix_manager.py",
        "start_line": 155,
        "end_line": 170,
        "params": [
            "self",
            "modified_files"
        ],
        "docstring": "Rolls back changes if debugging fails.\n\nArgs:\n    modified_files (List[str]): List of modified files to be restored."
    },
    {
        "name": "main",
        "file": ".\\ai_engine\\models\\debugger\\debugger_cli.py",
        "start_line": 181,
        "end_line": 184,
        "params": [],
        "docstring": null
    },
    {
        "name": "__init__",
        "file": ".\\ai_engine\\models\\debugger\\debugger_cli.py",
        "start_line": 34,
        "end_line": 39,
        "params": [
            "self"
        ],
        "docstring": "Initializes the DebuggerCLI with the necessary debugging components."
    },
    {
        "name": "load_ai_performance",
        "file": ".\\ai_engine\\models\\debugger\\debugger_cli.py",
        "start_line": 41,
        "end_line": 55,
        "params": [
            "self"
        ],
        "docstring": "Loads AI debugging performance report from a JSON file.\n\nReturns:\n    A dictionary with the performance data if available; otherwise, an empty dict."
    },
    {
        "name": "show_ai_performance",
        "file": ".\\ai_engine\\models\\debugger\\debugger_cli.py",
        "start_line": 57,
        "end_line": 71,
        "params": [
            "self"
        ],
        "docstring": "Displays AI debugging performance analytics."
    },
    {
        "name": "run_debugger",
        "file": ".\\ai_engine\\models\\debugger\\debugger_cli.py",
        "start_line": 73,
        "end_line": 89,
        "params": [
            "self",
            "file"
        ],
        "docstring": "Runs the debugging process, either on a specific file or the entire project.\n\nArgs:\n    file: Optional; the path of a specific file to debug."
    },
    {
        "name": "show_logs",
        "file": ".\\ai_engine\\models\\debugger\\debugger_cli.py",
        "start_line": 91,
        "end_line": 99,
        "params": [
            "self"
        ],
        "docstring": "Displays previous debugging logs."
    },
    {
        "name": "rollback_fixes",
        "file": ".\\ai_engine\\models\\debugger\\debugger_cli.py",
        "start_line": 101,
        "end_line": 113,
        "params": [
            "self"
        ],
        "docstring": "Rolls back the last attempted fixes."
    },
    {
        "name": "fix_imports",
        "file": ".\\ai_engine\\models\\debugger\\debugger_cli.py",
        "start_line": 115,
        "end_line": 131,
        "params": [
            "self"
        ],
        "docstring": "Checks for and fixes missing imports."
    },
    {
        "name": "parse_arguments",
        "file": ".\\ai_engine\\models\\debugger\\debugger_cli.py",
        "start_line": 133,
        "end_line": 156,
        "params": [
            "self"
        ],
        "docstring": "Parses command-line arguments and returns the parsed arguments.\n\nReturns:\n    An argparse.Namespace object with the parsed command-line arguments."
    },
    {
        "name": "execute_commands",
        "file": ".\\ai_engine\\models\\debugger\\debugger_cli.py",
        "start_line": 158,
        "end_line": 178,
        "params": [
            "self",
            "args"
        ],
        "docstring": "Executes commands based on the provided command-line arguments.\n\nArgs:\n    args: Parsed command-line arguments."
    },
    {
        "name": "__init__",
        "file": ".\\ai_engine\\models\\debugger\\debugger_core.py",
        "start_line": 21,
        "end_line": 23,
        "params": [
            "self",
            "name",
            "project_name"
        ],
        "docstring": null
    },
    {
        "name": "__init__",
        "file": ".\\ai_engine\\models\\debugger\\debugger_core.py",
        "start_line": 37,
        "end_line": 40,
        "params": [
            "self",
            "name"
        ],
        "docstring": null
    },
    {
        "name": "solve_task",
        "file": ".\\ai_engine\\models\\debugger\\debugger_core.py",
        "start_line": 42,
        "end_line": 55,
        "params": [
            "self",
            "task"
        ],
        "docstring": null
    },
    {
        "name": "reorganize_files",
        "file": ".\\ai_engine\\models\\debugger\\debugger_core.py",
        "start_line": 57,
        "end_line": 60,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "run_tests",
        "file": ".\\ai_engine\\models\\debugger\\debugger_core.py",
        "start_line": 62,
        "end_line": 77,
        "params": [
            "self"
        ],
        "docstring": "Runs tests via pytest and returns the combined stdout/stderr output."
    },
    {
        "name": "run_tests_for_files",
        "file": ".\\ai_engine\\models\\debugger\\debugger_core.py",
        "start_line": 79,
        "end_line": 93,
        "params": [
            "self",
            "files"
        ],
        "docstring": "Runs pytest for the specified files."
    },
    {
        "name": "parse_test_failures",
        "file": ".\\ai_engine\\models\\debugger\\debugger_core.py",
        "start_line": 95,
        "end_line": 109,
        "params": [
            "self",
            "test_output"
        ],
        "docstring": "Parses pytest output for failure details."
    },
    {
        "name": "apply_fix",
        "file": ".\\ai_engine\\models\\debugger\\debugger_core.py",
        "start_line": 111,
        "end_line": 123,
        "params": [
            "self",
            "failure"
        ],
        "docstring": "Attempts to apply a fix for the given failure by first trying quick fixes,\nthen adaptive learning fixes. (Advanced LLM-based fixes could be added here.)"
    },
    {
        "name": "retry_tests",
        "file": ".\\ai_engine\\models\\debugger\\debugger_core.py",
        "start_line": 125,
        "end_line": 163,
        "params": [
            "self",
            "max_retries"
        ],
        "docstring": "Runs tests and iterates over a debugging loop until tests pass or max retries are reached."
    },
    {
        "name": "automate_debugging",
        "file": ".\\ai_engine\\models\\debugger\\debugger_core.py",
        "start_line": 165,
        "end_line": 170,
        "params": [
            "self"
        ],
        "docstring": "Starts the automated debugging process."
    },
    {
        "name": "run_debug_cycle",
        "file": ".\\ai_engine\\models\\debugger\\debugger_core.py",
        "start_line": 172,
        "end_line": 180,
        "params": [
            "self",
            "max_retries"
        ],
        "docstring": "Runs a full debug cycle (which could be scheduled overnight)."
    },
    {
        "name": "analyze_error",
        "file": ".\\ai_engine\\models\\debugger\\debugger_core.py",
        "start_line": 182,
        "end_line": 186,
        "params": [
            "self",
            "error",
            "context"
        ],
        "docstring": null
    },
    {
        "name": "run_diagnostics",
        "file": ".\\ai_engine\\models\\debugger\\debugger_core.py",
        "start_line": 188,
        "end_line": 195,
        "params": [
            "self",
            "system_check",
            "detailed"
        ],
        "docstring": null
    },
    {
        "name": "rollback_changes",
        "file": ".\\ai_engine\\models\\debugger\\debugger_core.py",
        "start_line": 197,
        "end_line": 204,
        "params": [
            "self",
            "files_modified"
        ],
        "docstring": null
    },
    {
        "name": "push_to_github",
        "file": ".\\ai_engine\\models\\debugger\\debugger_core.py",
        "start_line": 206,
        "end_line": 214,
        "params": [
            "self",
            "commit_message"
        ],
        "docstring": null
    },
    {
        "name": "shutdown",
        "file": ".\\ai_engine\\models\\debugger\\debugger_core.py",
        "start_line": 216,
        "end_line": 217,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "describe_capabilities",
        "file": ".\\ai_engine\\models\\debugger\\debugger_core.py",
        "start_line": 219,
        "end_line": 224,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "_apply_known_pattern",
        "file": ".\\ai_engine\\models\\debugger\\debugger_core.py",
        "start_line": 230,
        "end_line": 244,
        "params": [
            "self",
            "failure"
        ],
        "docstring": null
    },
    {
        "name": "_quick_fix_missing_attribute",
        "file": ".\\ai_engine\\models\\debugger\\debugger_core.py",
        "start_line": 246,
        "end_line": 267,
        "params": [
            "self",
            "file_name",
            "error_msg"
        ],
        "docstring": null
    },
    {
        "name": "_quick_fix_assertion_mismatch",
        "file": ".\\ai_engine\\models\\debugger\\debugger_core.py",
        "start_line": 269,
        "end_line": 293,
        "params": [
            "self",
            "file_name",
            "error_msg"
        ],
        "docstring": null
    },
    {
        "name": "_quick_fix_import_error",
        "file": ".\\ai_engine\\models\\debugger\\debugger_core.py",
        "start_line": 295,
        "end_line": 314,
        "params": [
            "self",
            "file_name",
            "error_msg"
        ],
        "docstring": null
    },
    {
        "name": "_quick_fix_type_error",
        "file": ".\\ai_engine\\models\\debugger\\debugger_core.py",
        "start_line": 316,
        "end_line": 344,
        "params": [
            "self",
            "file_name",
            "error_msg"
        ],
        "docstring": null
    },
    {
        "name": "_quick_fix_indentation",
        "file": ".\\ai_engine\\models\\debugger\\debugger_core.py",
        "start_line": 346,
        "end_line": 359,
        "params": [
            "self",
            "file_name"
        ],
        "docstring": null
    },
    {
        "name": "_apply_adaptive_learning_fix",
        "file": ".\\ai_engine\\models\\debugger\\debugger_core.py",
        "start_line": 365,
        "end_line": 399,
        "params": [
            "self",
            "failure"
        ],
        "docstring": null
    },
    {
        "name": "_search_learned_fix",
        "file": ".\\ai_engine\\models\\debugger\\debugger_core.py",
        "start_line": 401,
        "end_line": 405,
        "params": [
            "self",
            "error_msg"
        ],
        "docstring": null
    },
    {
        "name": "_store_learned_fix",
        "file": ".\\ai_engine\\models\\debugger\\debugger_core.py",
        "start_line": 407,
        "end_line": 410,
        "params": [
            "self",
            "error_msg",
            "fix_str"
        ],
        "docstring": null
    },
    {
        "name": "_save_learning_db",
        "file": ".\\ai_engine\\models\\debugger\\debugger_core.py",
        "start_line": 412,
        "end_line": 418,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "_load_learning_db",
        "file": ".\\ai_engine\\models\\debugger\\debugger_core.py",
        "start_line": 420,
        "end_line": 431,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "__init__",
        "file": ".\\ai_engine\\models\\debugger\\debugger_logger.py",
        "start_line": 29,
        "end_line": 30,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "log_attempt",
        "file": ".\\ai_engine\\models\\debugger\\debugger_logger.py",
        "start_line": 32,
        "end_line": 51,
        "params": [
            "self",
            "failure",
            "patch_description",
            "success"
        ],
        "docstring": "Logs a debugging attempt.\n\nArgs:\n    failure (Dict[str, str]): Dictionary containing details about the failure.\n        Expected keys: \"file\", \"error\".\n    patch_description (str): A description of the patch attempted.\n    success (bool): True if the patch was successfully applied; otherwise False."
    },
    {
        "name": "_write_log",
        "file": ".\\ai_engine\\models\\debugger\\debugger_logger.py",
        "start_line": 53,
        "end_line": 61,
        "params": [
            "self",
            "log_entry"
        ],
        "docstring": "Appends a single log entry to the log file."
    },
    {
        "name": "get_logs",
        "file": ".\\ai_engine\\models\\debugger\\debugger_logger.py",
        "start_line": 63,
        "end_line": 67,
        "params": [
            "self"
        ],
        "docstring": "Returns the list of logged debugging attempts."
    },
    {
        "name": "clear_logs",
        "file": ".\\ai_engine\\models\\debugger\\debugger_logger.py",
        "start_line": 69,
        "end_line": 79,
        "params": [
            "self"
        ],
        "docstring": "Clears the in-memory logs and deletes the log file if it exists."
    },
    {
        "name": "__init__",
        "file": ".\\ai_engine\\models\\debugger\\debugger_reporter.py",
        "start_line": 34,
        "end_line": 36,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "load_existing_report",
        "file": ".\\ai_engine\\models\\debugger\\debugger_reporter.py",
        "start_line": 38,
        "end_line": 49,
        "params": [
            "self"
        ],
        "docstring": "Loads the existing debugging report or initializes a new one."
    },
    {
        "name": "log_failed_patch",
        "file": ".\\ai_engine\\models\\debugger\\debugger_reporter.py",
        "start_line": 51,
        "end_line": 60,
        "params": [
            "self",
            "error_signature",
            "reason"
        ],
        "docstring": "Logs a failed patch attempt with a reason.\n\nArgs:\n    error_signature (str): Unique hash of the error.\n    reason (str): Explanation of why the patch failed."
    },
    {
        "name": "log_ai_explanation",
        "file": ".\\ai_engine\\models\\debugger\\debugger_reporter.py",
        "start_line": 62,
        "end_line": 71,
        "params": [
            "self",
            "error_signature",
            "explanation"
        ],
        "docstring": "Logs an AI-generated explanation for debugging insights.\n\nArgs:\n    error_signature (str): Unique hash of the error.\n    explanation (str): AI analysis or suggestion."
    },
    {
        "name": "save_report",
        "file": ".\\ai_engine\\models\\debugger\\debugger_reporter.py",
        "start_line": 73,
        "end_line": 80,
        "params": [
            "self"
        ],
        "docstring": "Saves debugging session data to a JSON file."
    },
    {
        "name": "send_email_report",
        "file": ".\\ai_engine\\models\\debugger\\debugger_reporter.py",
        "start_line": 82,
        "end_line": 110,
        "params": [
            "self",
            "recipient_email"
        ],
        "docstring": "Sends the debugging report via email.\n\nArgs:\n    recipient_email (str): Email address of the recipient."
    },
    {
        "name": "__init__",
        "file": ".\\ai_engine\\models\\debugger\\debugger_runner.py",
        "start_line": 39,
        "end_line": 46,
        "params": [
            "self"
        ],
        "docstring": "Initializes the DebuggerRunner by setting up:\n  - ErrorParser for identifying failed tests and their causes.\n  - AutoFixer for applying automated code patches."
    },
    {
        "name": "run_tests",
        "file": ".\\ai_engine\\models\\debugger\\debugger_runner.py",
        "start_line": 48,
        "end_line": 64,
        "params": [
            "self"
        ],
        "docstring": "Runs all tests using pytest and returns the combined output (stdout + stderr).\n\nReturns:\n    str: The output of the pytest execution."
    },
    {
        "name": "retry_tests",
        "file": ".\\ai_engine\\models\\debugger\\debugger_runner.py",
        "start_line": 66,
        "end_line": 101,
        "params": [
            "self",
            "max_retries"
        ],
        "docstring": "Runs tests and retries failed ones up to a maximum number of attempts,\napplying automated fixes as necessary.\n\nArgs:\n    max_retries (int): The maximum number of retry attempts.\n\nReturns:\n    bool: True if all tests pass after retries, False otherwise."
    },
    {
        "name": "find_class_in_file",
        "file": ".\\ai_engine\\models\\debugger\\debugging_strategy.py",
        "start_line": 45,
        "end_line": 79,
        "params": [
            "source_file",
            "class_name"
        ],
        "docstring": "Parse a Python source file to find a specific class and determine where a \nmissing method stub should be inserted.\n\nThis function uses the built-in `ast` module to locate the last method \ndefinition within the given class. It returns the line number after \nthe last method, so that a new method stub can be appended.\n\nArgs:\n    source_file (str): Path to the Python source file to parse.\n    class_name (str): Name of the class in which to insert a new method.\n\nReturns:\n    Optional[int]: The line number where the new method can be inserted,\n                   or None if the class or file cannot be parsed."
    },
    {
        "name": "__init__",
        "file": ".\\ai_engine\\models\\debugger\\debugging_strategy.py",
        "start_line": 100,
        "end_line": 113,
        "params": [
            "self"
        ],
        "docstring": "Initialize the DebuggingStrategy by setting up:\n  - A logger for debugging messages.\n  - The DebuggerLogger for advanced logging capabilities.\n  - The AIModelManager for AI-based patch generation.\n  - Loading or creating a JSON-based learning database.\n  - A ProjectContextAnalyzer for context about the project\u2019s structure."
    },
    {
        "name": "_load_learning_db",
        "file": ".\\ai_engine\\models\\debugger\\debugging_strategy.py",
        "start_line": 115,
        "end_line": 129,
        "params": [
            "self"
        ],
        "docstring": "Load the learning database from a JSON file specified by LEARNING_DB_FILE.\nIf the file does not exist or cannot be loaded, return an empty dictionary.\n\nReturns:\n    Dict[str, Any]: The loaded learning database, or an empty dict on failure."
    },
    {
        "name": "_save_learning_db",
        "file": ".\\ai_engine\\models\\debugger\\debugging_strategy.py",
        "start_line": 131,
        "end_line": 140,
        "params": [
            "self"
        ],
        "docstring": "Save the current in-memory learning database to a JSON file specified \nby LEARNING_DB_FILE."
    },
    {
        "name": "_compute_error_signature",
        "file": ".\\ai_engine\\models\\debugger\\debugging_strategy.py",
        "start_line": 142,
        "end_line": 158,
        "params": [
            "self",
            "error_message",
            "code_context"
        ],
        "docstring": "Compute a unique signature (SHA-256 hash) for a given error based on its \nmessage and a snippet of code context.\n\nArgs:\n    error_message (str): The raw error message.\n    code_context (str): A snippet or portion of code around where \n                        the error occurred.\n\nReturns:\n    str: A hex digest representing the hash of the error signature."
    },
    {
        "name": "detect_import_error",
        "file": ".\\ai_engine\\models\\debugger\\debugging_strategy.py",
        "start_line": 160,
        "end_line": 185,
        "params": [
            "self",
            "error_message"
        ],
        "docstring": "Analyze an error message to determine if it is related to import issues.\n\nIf a missing module or failed import is found, return a dictionary with \ndetails. Otherwise, return None.\n\nArgs:\n    error_message (str): The error message to inspect.\n\nReturns:\n    Optional[dict]: A dictionary containing 'missing_module' and \n                    optionally 'source_file' if recognized, or None \n                    if no import error is detected."
    },
    {
        "name": "generate_patch",
        "file": ".\\ai_engine\\models\\debugger\\debugging_strategy.py",
        "start_line": 187,
        "end_line": 242,
        "params": [
            "self",
            "error_message",
            "code_context",
            "test_file"
        ],
        "docstring": "Generate a patch to fix a given error. \n\nThe steps are:\n  1. Check if the error is a 'missing method' error and try an AST-based fix.\n  2. If no structured fix is found, compute an error signature and \n     see if a fix already exists in the learning DB.\n  3. If not found in DB, use AI to generate a patch and store it in the DB.\n\nArgs:\n    error_message (str): The text of the error encountered.\n    code_context (str): A snippet of code or logs surrounding where \n                        the error occurred.\n    test_file (str): The path of the test file where the error surfaced.\n\nReturns:\n    Optional[str]: A unified diff patch as a string, or None if no fix was generated."
    },
    {
        "name": "apply_patch",
        "file": ".\\ai_engine\\models\\debugger\\debugging_strategy.py",
        "start_line": 244,
        "end_line": 285,
        "params": [
            "self",
            "patch"
        ],
        "docstring": "Apply a unified diff patch to the codebase using the 'patch' command-line tool. \n\nThis function:\n  - Writes the patch to a temporary file.\n  - Extracts the target file from the patch header.\n  - Runs the 'patch' command to apply the diff.\n  - Cleans up the temporary patch file.\n\nArgs:\n    patch (str): The unified diff string to apply.\n\nReturns:\n    bool: True if the patch was successfully applied, False otherwise."
    },
    {
        "name": "ensure_modules_exist",
        "file": ".\\ai_engine\\models\\debugger\\debug_agent_auto_fixer.py",
        "start_line": 63,
        "end_line": 74,
        "params": [
            "self"
        ],
        "docstring": "Create empty Python files for any required modules that do not exist\nin the AGENTS_CORE_PATH directory."
    },
    {
        "name": "fix_test_imports",
        "file": ".\\ai_engine\\models\\debugger\\debug_agent_auto_fixer.py",
        "start_line": 76,
        "end_line": 88,
        "params": [
            "self"
        ],
        "docstring": "Placeholder method to fix broken import lines in test files.\nIterates over files in TESTS_PATH and logs a debug message."
    },
    {
        "name": "fix_unterminated_strings",
        "file": ".\\ai_engine\\models\\debugger\\debug_agent_auto_fixer.py",
        "start_line": 90,
        "end_line": 118,
        "params": [
            "self"
        ],
        "docstring": "Searches for an unterminated string in the file 'test_unterminated.py' in TESTS_PATH\nand appends a closing double-quote if needed."
    },
    {
        "name": "check_syntax_errors",
        "file": ".\\ai_engine\\models\\debugger\\debug_agent_auto_fixer.py",
        "start_line": 120,
        "end_line": 142,
        "params": [
            "self"
        ],
        "docstring": "Parses the file 'test_syntax_error.py' in TESTS_PATH.\nIf a syntax error is detected, a SyntaxError is raised."
    },
    {
        "name": "backup_file",
        "file": ".\\ai_engine\\models\\debugger\\debug_agent_auto_fixer.py",
        "start_line": 144,
        "end_line": 157,
        "params": [
            "self",
            "file_path"
        ],
        "docstring": "Creates a backup copy of the specified file (appending '.backup' to its name)."
    },
    {
        "name": "restore_backup",
        "file": ".\\ai_engine\\models\\debugger\\debug_agent_auto_fixer.py",
        "start_line": 159,
        "end_line": 172,
        "params": [
            "self",
            "file_path"
        ],
        "docstring": "Restores the file from its backup (if the backup exists)."
    },
    {
        "name": "re_attempt_failed_patches",
        "file": ".\\ai_engine\\models\\debugger\\debug_agent_auto_fixer.py",
        "start_line": 174,
        "end_line": 219,
        "params": [
            "self",
            "error_signature",
            "file_path"
        ],
        "docstring": "Re-applies a previously failed patch (retrieved from PatchTrackingManager) to the given file.\nA simple text replacement is attempted; returns True if the patch was applied."
    },
    {
        "name": "__init__",
        "file": ".\\ai_engine\\models\\debugger\\email_reporter.py",
        "start_line": 26,
        "end_line": 41,
        "params": [
            "self",
            "smtp_server",
            "smtp_port",
            "sender_email",
            "sender_password",
            "recipient_email"
        ],
        "docstring": "Initializes EmailReporter with SMTP settings.\n\nArgs:\n    smtp_server (str): SMTP server address (default: Gmail SMTP).\n    smtp_port (int): SMTP port number (default: 587 for TLS).\n    sender_email (str): Sender's email address.\n    sender_password (str): Sender's email password or app-specific password.\n    recipient_email (str): Recipient's email address."
    },
    {
        "name": "validate_email",
        "file": ".\\ai_engine\\models\\debugger\\email_reporter.py",
        "start_line": 43,
        "end_line": 54,
        "params": [
            "self",
            "email"
        ],
        "docstring": "Validates the given email address format.\n\nArgs:\n    email (str): The email address to validate.\n\nReturns:\n    bool: True if the email is valid, False otherwise."
    },
    {
        "name": "send_email",
        "file": ".\\ai_engine\\models\\debugger\\email_reporter.py",
        "start_line": 56,
        "end_line": 98,
        "params": [
            "self",
            "subject",
            "message"
        ],
        "docstring": "Sends an email notification.\n\nArgs:\n    subject (str): Email subject.\n    message (str): Email body content."
    },
    {
        "name": "send_debugging_report",
        "file": ".\\ai_engine\\models\\debugger\\email_reporter.py",
        "start_line": 100,
        "end_line": 109,
        "params": [
            "self",
            "subject",
            "debug_info"
        ],
        "docstring": "Sends a debugging report via email.\n\nArgs:\n    subject (str): Email subject.\n    debug_info (str): Debugging details to send."
    },
    {
        "name": "send_report",
        "file": ".\\ai_engine\\models\\debugger\\email_reporter.py",
        "start_line": 111,
        "end_line": 128,
        "params": [
            "self",
            "report_data",
            "recipient_email"
        ],
        "docstring": "Sends the debugging report via email.\n\nArgs:\n    report_data (dict): The debugging report data.\n    recipient_email (str): The recipient email address."
    },
    {
        "name": "__init__",
        "file": ".\\ai_engine\\models\\debugger\\error_parser.py",
        "start_line": 26,
        "end_line": 33,
        "params": [
            "self"
        ],
        "docstring": "Initializes the ErrorParser with a compiled regex pattern for efficiency."
    },
    {
        "name": "parse_test_failures",
        "file": ".\\ai_engine\\models\\debugger\\error_parser.py",
        "start_line": 35,
        "end_line": 71,
        "params": [
            "self",
            "test_output"
        ],
        "docstring": "Parses pytest output and extracts structured failure details.\n\nArgs:\n    test_output (str): The raw pytest output.\n\nReturns:\n    List[Dict[str, str]]: A list of failure details, each containing:\n        - \"file\": Test file where the failure occurred.\n        - \"test\": Name of the failing test function.\n        - \"error\": The error message or reason for failure."
    },
    {
        "name": "__init__",
        "file": ".\\ai_engine\\models\\debugger\\learning_db.py",
        "start_line": 26,
        "end_line": 27,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "_load_db",
        "file": ".\\ai_engine\\models\\debugger\\learning_db.py",
        "start_line": 29,
        "end_line": 38,
        "params": [
            "self"
        ],
        "docstring": "Loads the learning database from file, creating one if necessary."
    },
    {
        "name": "search_learned_fix",
        "file": ".\\ai_engine\\models\\debugger\\learning_db.py",
        "start_line": 40,
        "end_line": 44,
        "params": [
            "self",
            "error_message"
        ],
        "docstring": "Retrieves a previously learned fix for a given error message."
    },
    {
        "name": "store_fix",
        "file": ".\\ai_engine\\models\\debugger\\learning_db.py",
        "start_line": 46,
        "end_line": 51,
        "params": [
            "self",
            "error_message",
            "patch"
        ],
        "docstring": "Stores a successful fix in the learning database."
    },
    {
        "name": "_save_db",
        "file": ".\\ai_engine\\models\\debugger\\learning_db.py",
        "start_line": 53,
        "end_line": 60,
        "params": [
            "self"
        ],
        "docstring": "Saves the learning database to a file."
    },
    {
        "name": "__init__",
        "file": ".\\ai_engine\\models\\debugger\\patch_manager.py",
        "start_line": 31,
        "end_line": 32,
        "params": [
            "self",
            "debug_strategy"
        ],
        "docstring": null
    },
    {
        "name": "apply_fix",
        "file": ".\\ai_engine\\models\\debugger\\patch_manager.py",
        "start_line": 34,
        "end_line": 39,
        "params": [
            "self",
            "failure"
        ],
        "docstring": "Applies a fix for a test failure."
    },
    {
        "name": "__init__",
        "file": ".\\ai_engine\\models\\debugger\\patch_tracking_manager.py",
        "start_line": 38,
        "end_line": 57,
        "params": [
            "self"
        ],
        "docstring": "Initialize patch tracking with persistent storage."
    },
    {
        "name": "_load_patch_data",
        "file": ".\\ai_engine\\models\\debugger\\patch_tracking_manager.py",
        "start_line": 59,
        "end_line": 83,
        "params": [
            "self",
            "file_path",
            "default"
        ],
        "docstring": "Loads JSON patch data from a file and ensures a dictionary is returned.\n\nArgs:\n    file_path (str): The file to load data from.\n    default (dict): The default value to return if the file doesn't exist or is invalid.\n\nReturns:\n    dict: The loaded patch data."
    },
    {
        "name": "_save_patch_data",
        "file": ".\\ai_engine\\models\\debugger\\patch_tracking_manager.py",
        "start_line": 85,
        "end_line": 97,
        "params": [
            "self",
            "file_path",
            "data"
        ],
        "docstring": "Writes patch tracking data to a JSON file.\n\nArgs:\n    file_path (str): The file to write data to.\n    data (dict): The data to write."
    },
    {
        "name": "record_failed_patch",
        "file": ".\\ai_engine\\models\\debugger\\patch_tracking_manager.py",
        "start_line": 101,
        "end_line": 113,
        "params": [
            "self",
            "error_signature",
            "patch"
        ],
        "docstring": "Records a failed patch for a specific error signature to avoid duplicate attempts.\n\nArgs:\n    error_signature (str): A unique signature for the error.\n    patch (str): The patch content that failed."
    },
    {
        "name": "record_successful_patch",
        "file": ".\\ai_engine\\models\\debugger\\patch_tracking_manager.py",
        "start_line": 117,
        "end_line": 129,
        "params": [
            "self",
            "error_signature",
            "patch"
        ],
        "docstring": "Logs a successful patch for a specific error signature.\n\nArgs:\n    error_signature (str): A unique signature for the error.\n    patch (str): The patch content that succeeded."
    },
    {
        "name": "record_applied_patch",
        "file": ".\\ai_engine\\models\\debugger\\patch_tracking_manager.py",
        "start_line": 133,
        "end_line": 145,
        "params": [
            "self",
            "error_signature",
            "patch"
        ],
        "docstring": "Logs an applied patch to track which patches were successfully used.\n\nArgs:\n    error_signature (str): A unique signature for the error.\n    patch (str): The patch content that was applied."
    },
    {
        "name": "record_import_fix",
        "file": ".\\ai_engine\\models\\debugger\\patch_tracking_manager.py",
        "start_line": 149,
        "end_line": 164,
        "params": [
            "self",
            "module_name",
            "fix_success"
        ],
        "docstring": "Tracks the outcome of AI-generated import fixes.\n\nArgs:\n    module_name (str): The name of the module with the import issue.\n    fix_success (bool): True if the fix was successful, False otherwise."
    },
    {
        "name": "record_ai_feedback",
        "file": ".\\ai_engine\\models\\debugger\\patch_tracking_manager.py",
        "start_line": 168,
        "end_line": 182,
        "params": [
            "self",
            "error_signature",
            "feedback",
            "quality_score"
        ],
        "docstring": "Stores AI-generated feedback on debugging effectiveness.\n\nArgs:\n    error_signature (str): The error signature associated with the feedback.\n    feedback (str): The textual feedback.\n    quality_score (int): A numerical score representing patch quality."
    },
    {
        "name": "track_ai_performance",
        "file": ".\\ai_engine\\models\\debugger\\patch_tracking_manager.py",
        "start_line": 186,
        "end_line": 203,
        "params": [
            "self"
        ],
        "docstring": "Tracks AI debugging performance by summarizing import fix success rates and AI feedback.\nThe performance is logged daily."
    },
    {
        "name": "get_failed_patches",
        "file": ".\\ai_engine\\models\\debugger\\patch_tracking_manager.py",
        "start_line": 207,
        "end_line": 217,
        "params": [
            "self",
            "error_signature"
        ],
        "docstring": "Retrieves failed patches for a specific error signature.\n\nArgs:\n    error_signature (str): The error signature to look up.\n\nReturns:\n    List[str]: A list of failed patches."
    },
    {
        "name": "get_successful_patches",
        "file": ".\\ai_engine\\models\\debugger\\patch_tracking_manager.py",
        "start_line": 219,
        "end_line": 229,
        "params": [
            "self",
            "error_signature"
        ],
        "docstring": "Retrieves successful patches for a specific error signature.\n\nArgs:\n    error_signature (str): The error signature to look up.\n\nReturns:\n    List[str]: A list of successful patches."
    },
    {
        "name": "undo_last_fix",
        "file": ".\\ai_engine\\models\\debugger\\patch_tracking_manager.py",
        "start_line": 231,
        "end_line": 248,
        "params": [
            "self",
            "error_signature"
        ],
        "docstring": "Rolls back the last successful patch for the given error signature.\n\nArgs:\n    error_signature (str): The error signature for which to roll back a patch.\n\nReturns:\n    Optional[str]: The patch that was rolled back, or None if no patch exists."
    },
    {
        "name": "apply_patch",
        "file": ".\\ai_engine\\models\\debugger\\patch_tracking_manager.py",
        "start_line": 252,
        "end_line": 265,
        "params": [
            "self",
            "patch"
        ],
        "docstring": "Attempts to apply a given patch.\nFor testing purposes, this stub simply returns True to indicate success.\n\nArgs:\n    patch (str): The patch string to apply.\n    \nReturns:\n    bool: True if the patch was \"applied\" successfully, False otherwise."
    },
    {
        "name": "analyze_project",
        "file": ".\\ai_engine\\models\\debugger\\project_context_analyzer.py",
        "start_line": 94,
        "end_line": 103,
        "params": [
            "project_root"
        ],
        "docstring": "Runs a full project analysis without explicitly creating an instance."
    },
    {
        "name": "__init__",
        "file": ".\\ai_engine\\models\\debugger\\project_context_analyzer.py",
        "start_line": 28,
        "end_line": 30,
        "params": [
            "self",
            "project_root"
        ],
        "docstring": null
    },
    {
        "name": "scan_directories",
        "file": ".\\ai_engine\\models\\debugger\\project_context_analyzer.py",
        "start_line": 32,
        "end_line": 39,
        "params": [
            "self"
        ],
        "docstring": "Scans the project directory for Python files."
    },
    {
        "name": "extract_code_context",
        "file": ".\\ai_engine\\models\\debugger\\project_context_analyzer.py",
        "start_line": 41,
        "end_line": 54,
        "params": [
            "self"
        ],
        "docstring": "Extracts module-level docstrings and other metadata."
    },
    {
        "name": "map_dependencies",
        "file": ".\\ai_engine\\models\\debugger\\project_context_analyzer.py",
        "start_line": 56,
        "end_line": 75,
        "params": [
            "self"
        ],
        "docstring": "Parses each file and extracts module dependencies."
    },
    {
        "name": "save_analysis",
        "file": ".\\ai_engine\\models\\debugger\\project_context_analyzer.py",
        "start_line": 77,
        "end_line": 82,
        "params": [
            "self"
        ],
        "docstring": "Saves the analysis results to a JSON file."
    },
    {
        "name": "analyze_project",
        "file": ".\\ai_engine\\models\\debugger\\project_context_analyzer.py",
        "start_line": 84,
        "end_line": 91,
        "params": [
            "self"
        ],
        "docstring": "Runs a full project analysis."
    },
    {
        "name": "__init__",
        "file": ".\\ai_engine\\models\\debugger\\report_manager.py",
        "start_line": 22,
        "end_line": 24,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "_setup_logging",
        "file": ".\\ai_engine\\models\\debugger\\report_manager.py",
        "start_line": 26,
        "end_line": 47,
        "params": [
            "self"
        ],
        "docstring": "Configures structured logging with log rotation while preventing test locks."
    },
    {
        "name": "_release_log_handlers",
        "file": ".\\ai_engine\\models\\debugger\\report_manager.py",
        "start_line": 49,
        "end_line": 54,
        "params": [
            "self"
        ],
        "docstring": "Releases all log handlers to prevent file locking issues."
    },
    {
        "name": "_rotate_logs",
        "file": ".\\ai_engine\\models\\debugger\\report_manager.py",
        "start_line": 56,
        "end_line": 63,
        "params": [
            "self"
        ],
        "docstring": "Rotates old logs to prevent excessive file size."
    },
    {
        "name": "_generate_filename",
        "file": ".\\ai_engine\\models\\debugger\\report_manager.py",
        "start_line": 65,
        "end_line": 68,
        "params": [
            "self",
            "base_name"
        ],
        "docstring": "Generates a unique filename based on timestamp."
    },
    {
        "name": "save_report",
        "file": ".\\ai_engine\\models\\debugger\\report_manager.py",
        "start_line": 70,
        "end_line": 86,
        "params": [
            "self",
            "base_filename",
            "data"
        ],
        "docstring": "Saves a structured JSON report with automatic versioning.\n\nArgs:\n    base_filename (str): Name of the report without extension.\n    data (Dict): The report data."
    },
    {
        "name": "load_report",
        "file": ".\\ai_engine\\models\\debugger\\report_manager.py",
        "start_line": 88,
        "end_line": 112,
        "params": [
            "self",
            "filename"
        ],
        "docstring": "Loads a JSON report by filename.\n\nArgs:\n    filename (str): The report filename.\n\nReturns:\n    Optional[Dict]: The report data if found, else None."
    },
    {
        "name": "list_reports",
        "file": ".\\ai_engine\\models\\debugger\\report_manager.py",
        "start_line": 114,
        "end_line": 123,
        "params": [
            "self"
        ],
        "docstring": "Returns a list of all available reports.\n\nReturns:\n    List[str]: List of report filenames."
    },
    {
        "name": "search_reports",
        "file": ".\\ai_engine\\models\\debugger\\report_manager.py",
        "start_line": 125,
        "end_line": 145,
        "params": [
            "self",
            "keyword"
        ],
        "docstring": "Searches reports for a specific keyword in the filename or content.\n\nArgs:\n    keyword (str): The keyword to search for.\n\nReturns:\n    List[str]: Filenames of matching reports."
    },
    {
        "name": "delete_old_reports",
        "file": ".\\ai_engine\\models\\debugger\\report_manager.py",
        "start_line": 147,
        "end_line": 163,
        "params": [
            "self",
            "days"
        ],
        "docstring": "Deletes reports older than a specified number of days.\n\nArgs:\n    days (int): Number of days before reports are considered old."
    },
    {
        "name": "log_entry",
        "file": ".\\ai_engine\\models\\debugger\\report_manager.py",
        "start_line": 165,
        "end_line": 179,
        "params": [
            "self",
            "message",
            "level"
        ],
        "docstring": "Logs a structured message into the report log file.\n\nArgs:\n    message (str): Log message.\n    level (str): Log level ('info', 'warning', 'error', 'critical')."
    },
    {
        "name": "__init__",
        "file": ".\\ai_engine\\models\\debugger\\rollback_manager.py",
        "start_line": 42,
        "end_line": 45,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "backup_file",
        "file": ".\\ai_engine\\models\\debugger\\rollback_manager.py",
        "start_line": 47,
        "end_line": 56,
        "params": [
            "self",
            "file_path"
        ],
        "docstring": "Creates a backup of the file before applying patches."
    },
    {
        "name": "restore_backup",
        "file": ".\\ai_engine\\models\\debugger\\rollback_manager.py",
        "start_line": 58,
        "end_line": 63,
        "params": [
            "self",
            "file_path"
        ],
        "docstring": "Restores a file from backup in case of rollback."
    },
    {
        "name": "re_attempt_failed_patches",
        "file": ".\\ai_engine\\models\\debugger\\rollback_manager.py",
        "start_line": 65,
        "end_line": 97,
        "params": [
            "self",
            "error_signature",
            "file_path"
        ],
        "docstring": "Retries previously failed patches before falling back to AI fixes.\nReturns True if a patch is successfully applied."
    },
    {
        "name": "rollback_changes",
        "file": ".\\ai_engine\\models\\debugger\\rollback_manager.py",
        "start_line": 99,
        "end_line": 109,
        "params": [
            "self",
            "modified_files"
        ],
        "docstring": "Rolls back all modified files if no patch works."
    },
    {
        "name": "parse_simple_failures",
        "file": ".\\ai_engine\\models\\debugger\\test_parser.py",
        "start_line": 25,
        "end_line": 33,
        "params": [
            "self",
            "test_output"
        ],
        "docstring": "Extracts failure details from simple pytest output."
    },
    {
        "name": "run_tests_simple",
        "file": ".\\ai_engine\\models\\debugger\\test_runner.py",
        "start_line": 29,
        "end_line": 37,
        "params": [
            "self"
        ],
        "docstring": "Runs pytest in simple mode and returns output."
    },
    {
        "name": "run_tests_advanced",
        "file": ".\\ai_engine\\models\\debugger\\test_runner.py",
        "start_line": 39,
        "end_line": 54,
        "params": [
            "self"
        ],
        "docstring": "Runs pytest with JSON report enabled and extracts failures."
    },
    {
        "name": "__init__",
        "file": ".\\ai_engine\\models\\memory\\context_manager.py",
        "start_line": 30,
        "end_line": 41,
        "params": [
            "self",
            "memory_limit",
            "memory_file"
        ],
        "docstring": "Initializes the global memory system.\n\nArgs:\n    memory_limit (int): Maximum memory entries to retain.\n    memory_file (str): File path for persistent storage."
    },
    {
        "name": "preprocess_text",
        "file": ".\\ai_engine\\models\\memory\\context_manager.py",
        "start_line": 43,
        "end_line": 55,
        "params": [
            "self",
            "text"
        ],
        "docstring": "Prepares text for memory storage by tokenizing and removing stopwords.\n\nArgs:\n    text (str): The input text.\n\nReturns:\n    str: Processed text."
    },
    {
        "name": "store_memory",
        "file": ".\\ai_engine\\models\\memory\\context_manager.py",
        "start_line": 57,
        "end_line": 68,
        "params": [
            "self",
            "key",
            "value"
        ],
        "docstring": "Stores key-value pairs in memory for global reference.\n\nArgs:\n    key (str): Identifier for memory entry.\n    value (Any): Data to store."
    },
    {
        "name": "retrieve_memory",
        "file": ".\\ai_engine\\models\\memory\\context_manager.py",
        "start_line": 70,
        "end_line": 96,
        "params": [
            "self",
            "key"
        ],
        "docstring": "Retrieves memory based on text similarity.\n\nArgs:\n    key (str): The user's query.\n\nReturns:\n    Optional[Any]: The most relevant memory match, or None if not found."
    },
    {
        "name": "save_memory",
        "file": ".\\ai_engine\\models\\memory\\context_manager.py",
        "start_line": 98,
        "end_line": 104,
        "params": [
            "self"
        ],
        "docstring": "Saves the memory state to a file for persistence."
    },
    {
        "name": "load_memory",
        "file": ".\\ai_engine\\models\\memory\\context_manager.py",
        "start_line": 106,
        "end_line": 117,
        "params": [
            "self"
        ],
        "docstring": "Loads memory from a file."
    },
    {
        "name": "clear_memory",
        "file": ".\\ai_engine\\models\\memory\\context_manager.py",
        "start_line": 119,
        "end_line": 125,
        "params": [
            "self"
        ],
        "docstring": "Clears the global memory."
    },
    {
        "name": "__init__",
        "file": ".\\ai_engine\\models\\memory\\memory_manager.py",
        "start_line": 33,
        "end_line": 46,
        "params": [
            "self",
            "memory_limit",
            "storage_path",
            "ngram_size"
        ],
        "docstring": "Initializes the MemoryManager.\n\nArgs:\n    memory_limit (int): Max number of short-term memory entries.\n    storage_path (str): File path for long-term memory storage.\n    ngram_size (int): Size of n-grams for text similarity retrieval."
    },
    {
        "name": "load_memory",
        "file": ".\\ai_engine\\models\\memory\\memory_manager.py",
        "start_line": 48,
        "end_line": 53,
        "params": [
            "self"
        ],
        "docstring": "Loads stored long-term memory from a JSON file."
    },
    {
        "name": "save_memory",
        "file": ".\\ai_engine\\models\\memory\\memory_manager.py",
        "start_line": 55,
        "end_line": 58,
        "params": [
            "self"
        ],
        "docstring": "Saves long-term memory data to a JSON file."
    },
    {
        "name": "preprocess_text",
        "file": ".\\ai_engine\\models\\memory\\memory_manager.py",
        "start_line": 60,
        "end_line": 72,
        "params": [
            "self",
            "text"
        ],
        "docstring": "Tokenizes and removes stopwords from text, converting it into n-grams.\n\nArgs:\n    text (str): Input text.\n\nReturns:\n    List[tuple]: List of n-grams for similarity matching."
    },
    {
        "name": "store_short_term_memory",
        "file": ".\\ai_engine\\models\\memory\\memory_manager.py",
        "start_line": 75,
        "end_line": 84,
        "params": [
            "self",
            "key",
            "value"
        ],
        "docstring": "Stores a key-value pair in short-term memory.\n\nArgs:\n    key (str): Identifier for the memory entry.\n    value (Any): Data to store."
    },
    {
        "name": "retrieve_short_term_memory",
        "file": ".\\ai_engine\\models\\memory\\memory_manager.py",
        "start_line": 86,
        "end_line": 101,
        "params": [
            "self",
            "key"
        ],
        "docstring": "Retrieves stored memory from short-term memory.\n\nArgs:\n    key (str): Identifier for the memory entry.\n\nReturns:\n    Optional[Any]: Retrieved data, or None if key not found."
    },
    {
        "name": "clear_short_term_memory",
        "file": ".\\ai_engine\\models\\memory\\memory_manager.py",
        "start_line": 103,
        "end_line": 106,
        "params": [
            "self"
        ],
        "docstring": "Clears all short-term memory."
    },
    {
        "name": "store_long_term_memory",
        "file": ".\\ai_engine\\models\\memory\\memory_manager.py",
        "start_line": 109,
        "end_line": 120,
        "params": [
            "self",
            "key",
            "value"
        ],
        "docstring": "Stores a key-value pair in long-term memory with NLP processing.\n\nArgs:\n    key (str): The key to associate with the memory.\n    value (Any): The information to store."
    },
    {
        "name": "retrieve_long_term_memory",
        "file": ".\\ai_engine\\models\\memory\\memory_manager.py",
        "start_line": 122,
        "end_line": 146,
        "params": [
            "self",
            "query"
        ],
        "docstring": "Retrieves the most relevant long-term memory using text similarity.\n\nArgs:\n    query (str): The user input to find the most relevant stored memory.\n\nReturns:\n    Optional[Any]: The best matching memory value, or None if no close match is found."
    },
    {
        "name": "remove_long_term_memory",
        "file": ".\\ai_engine\\models\\memory\\memory_manager.py",
        "start_line": 148,
        "end_line": 165,
        "params": [
            "self",
            "key"
        ],
        "docstring": "Deletes a memory from long-term storage.\n\nArgs:\n    key (str): The key of the memory to remove.\n\nReturns:\n    bool: True if memory was removed, False otherwise."
    },
    {
        "name": "export_memory",
        "file": ".\\ai_engine\\models\\memory\\memory_manager.py",
        "start_line": 168,
        "end_line": 181,
        "params": [
            "self",
            "filepath"
        ],
        "docstring": "Exports stored short-term and long-term memory to a JSON file.\n\nArgs:\n    filepath (str): File path to save memory data."
    },
    {
        "name": "import_memory",
        "file": ".\\ai_engine\\models\\memory\\memory_manager.py",
        "start_line": 183,
        "end_line": 199,
        "params": [
            "self",
            "filepath"
        ],
        "docstring": "Imports stored memory from a JSON file.\n\nArgs:\n    filepath (str): File path to load memory data."
    },
    {
        "name": "__init__",
        "file": ".\\ai_engine\\models\\memory\\performance_monitor.py",
        "start_line": 37,
        "end_line": 46,
        "params": [
            "self",
            "max_entries",
            "track_system_usage"
        ],
        "docstring": "Initializes the PerformanceMonitor.\n\nArgs:\n    max_entries (int): Maximum number of performance logs to store.\n    track_system_usage (bool): If True (and psutil installed), log CPU/mem usage."
    },
    {
        "name": "track_execution",
        "file": ".\\ai_engine\\models\\memory\\performance_monitor.py",
        "start_line": 48,
        "end_line": 97,
        "params": [
            "self",
            "function"
        ],
        "docstring": "Decorator to measure execution time (and optional system usage) of a function.\n\nUsage:\n    @performance_monitor.track_execution\n    def my_function(...):\n        ...\n\nArgs:\n    function (Callable): The function to be wrapped.\n\nReturns:\n    Callable: The wrapped function with performance logging."
    },
    {
        "name": "get_performance_log",
        "file": ".\\ai_engine\\models\\memory\\performance_monitor.py",
        "start_line": 99,
        "end_line": 106,
        "params": [
            "self"
        ],
        "docstring": "Returns a list of recent performance logs.\n\nReturns:\n    List[Dict[str, Any]]: Execution performance and optional system usage data."
    },
    {
        "name": "clear_logs",
        "file": ".\\ai_engine\\models\\memory\\performance_monitor.py",
        "start_line": 108,
        "end_line": 113,
        "params": [
            "self"
        ],
        "docstring": "Clears all stored performance logs."
    },
    {
        "name": "wrapper",
        "file": ".\\ai_engine\\models\\memory\\performance_monitor.py",
        "start_line": 63,
        "end_line": 95,
        "params": [],
        "docstring": null
    },
    {
        "name": "__init__",
        "file": ".\\ai_engine\\models\\memory\\structured_memory_segment.py",
        "start_line": 25,
        "end_line": 36,
        "params": [
            "self",
            "text",
            "metadata",
            "tags"
        ],
        "docstring": "Initializes a structured memory record.\n\nArgs:\n    text (str): The main textual content to store.\n    metadata (Optional[Dict[str, Any]]): Additional descriptive data.\n    tags (Optional[List[str]]): Tags/labels for classification or search."
    },
    {
        "name": "__repr__",
        "file": ".\\ai_engine\\models\\memory\\structured_memory_segment.py",
        "start_line": 38,
        "end_line": 39,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "cosine_similarity",
        "file": ".\\ai_engine\\models\\memory\\vector_memory_manager.py",
        "start_line": 22,
        "end_line": 26,
        "params": [
            "vec_a",
            "vec_b"
        ],
        "docstring": "Compute cosine similarity between two vectors."
    },
    {
        "name": "__init__",
        "file": ".\\ai_engine\\models\\memory\\vector_memory_manager.py",
        "start_line": 36,
        "end_line": 46,
        "params": [
            "self",
            "memory_limit",
            "embedding_model"
        ],
        "docstring": "Initializes the VectorMemoryManager with an optional embedding model.\n\nArgs:\n    memory_limit (int): Maximum number of memory entries.\n    embedding_model (Optional[Any]): A model with an `encode()` method that computes embeddings."
    },
    {
        "name": "store_segment",
        "file": ".\\ai_engine\\models\\memory\\vector_memory_manager.py",
        "start_line": 48,
        "end_line": 63,
        "params": [
            "self",
            "segment"
        ],
        "docstring": "Stores a structured memory segment along with its embedding.\n\nArgs:\n    segment (StructuredMemorySegment): The memory segment to store."
    },
    {
        "name": "search_by_text",
        "file": ".\\ai_engine\\models\\memory\\vector_memory_manager.py",
        "start_line": 65,
        "end_line": 100,
        "params": [
            "self",
            "query_text",
            "top_k"
        ],
        "docstring": "Searches stored memory segments for the best semantic matches to the query text.\n\nArgs:\n    query_text (str): The query text to embed and compare.\n    top_k (int): Number of top matching segments to return.\n\nReturns:\n    List[StructuredMemorySegment]: Best matching segments."
    },
    {
        "name": "_compute_embedding",
        "file": ".\\ai_engine\\models\\memory\\vector_memory_manager.py",
        "start_line": 102,
        "end_line": 121,
        "params": [
            "self",
            "text"
        ],
        "docstring": "Computes text embeddings using the provided model.\n\nArgs:\n    text (str): The text to embed.\n\nReturns:\n    Optional[np.ndarray]: The computed embedding as a NumPy array, or None if failed."
    },
    {
        "name": "_normalize_vector",
        "file": ".\\ai_engine\\models\\memory\\vector_memory_manager.py",
        "start_line": 124,
        "end_line": 137,
        "params": [
            "vector"
        ],
        "docstring": "Normalizes a vector to unit length.\n\nArgs:\n    vector (np.ndarray): The vector to normalize.\n\nReturns:\n    np.ndarray: The normalized vector."
    },
    {
        "name": "__init__",
        "file": ".\\ai_engine\\reasoning_engine\\reasoning_engine.py",
        "start_line": 27,
        "end_line": 32,
        "params": [
            "self",
            "cache_enabled"
        ],
        "docstring": null
    },
    {
        "name": "_cache_key",
        "file": ".\\ai_engine\\reasoning_engine\\reasoning_engine.py",
        "start_line": 34,
        "end_line": 36,
        "params": [
            "self",
            "prompt"
        ],
        "docstring": null
    },
    {
        "name": "reason",
        "file": ".\\ai_engine\\reasoning_engine\\reasoning_engine.py",
        "start_line": 38,
        "end_line": 51,
        "params": [
            "self",
            "prompt"
        ],
        "docstring": "Performs reasoning on the given prompt using the integrated rule-based model."
    },
    {
        "name": "__init__",
        "file": ".\\ai_engine\\reasoning_engine\\rule_based_reasoning.py",
        "start_line": 22,
        "end_line": 29,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "reason",
        "file": ".\\ai_engine\\reasoning_engine\\rule_based_reasoning.py",
        "start_line": 31,
        "end_line": 41,
        "params": [
            "self",
            "prompt"
        ],
        "docstring": "Processes the input prompt using pattern-based rules."
    },
    {
        "name": "reason_cause_effect",
        "file": ".\\ai_engine\\reasoning_engine\\rule_based_reasoning.py",
        "start_line": 43,
        "end_line": 47,
        "params": [
            "self",
            "cause",
            "effect"
        ],
        "docstring": "Handles reasoning of the form 'impact of X on Y'."
    },
    {
        "name": "reason_relationship",
        "file": ".\\ai_engine\\reasoning_engine\\rule_based_reasoning.py",
        "start_line": 49,
        "end_line": 53,
        "params": [
            "self",
            "entity1",
            "entity2"
        ],
        "docstring": "Handles reasoning of the form 'relationship between X and Y'."
    },
    {
        "name": "reason_decision_making",
        "file": ".\\ai_engine\\reasoning_engine\\rule_based_reasoning.py",
        "start_line": 55,
        "end_line": 59,
        "params": [
            "self",
            "action",
            "condition"
        ],
        "docstring": "Handles reasoning of the form 'should I do X if Y'."
    },
    {
        "name": "main",
        "file": ".\\scripts\\main.py",
        "start_line": 29,
        "end_line": 48,
        "params": [],
        "docstring": null
    },
    {
        "name": "main",
        "file": ".\\scripts\\run_debugger.py",
        "start_line": 22,
        "end_line": 33,
        "params": [],
        "docstring": null
    },
    {
        "name": "test_sample",
        "file": ".\\tests\\generated_tests.py",
        "start_line": 2,
        "end_line": 3,
        "params": [],
        "docstring": null
    },
    {
        "name": "run_tests",
        "file": ".\\tests\\run_tests.py",
        "start_line": 15,
        "end_line": 24,
        "params": [],
        "docstring": "Runs pytest and collects failed test cases."
    },
    {
        "name": "setUp",
        "file": ".\\tests\\test_AgentActor.py",
        "start_line": 24,
        "end_line": 33,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "test_describe_capabilities",
        "file": ".\\tests\\test_AgentActor.py",
        "start_line": 35,
        "end_line": 39,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "test_solve_task_execute_python",
        "file": ".\\tests\\test_AgentActor.py",
        "start_line": 41,
        "end_line": 44,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "test_solve_task_execute_shell",
        "file": ".\\tests\\test_AgentActor.py",
        "start_line": 46,
        "end_line": 49,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "test_solve_task_invalid",
        "file": ".\\tests\\test_AgentActor.py",
        "start_line": 51,
        "end_line": 53,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "test_utilize_tool_valid",
        "file": ".\\tests\\test_AgentActor.py",
        "start_line": 55,
        "end_line": 61,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "test_utilize_tool_invalid_tool",
        "file": ".\\tests\\test_AgentActor.py",
        "start_line": 63,
        "end_line": 66,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "test_utilize_tool_invalid_operation",
        "file": ".\\tests\\test_AgentActor.py",
        "start_line": 69,
        "end_line": 82,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "test_perform_task_python",
        "file": ".\\tests\\test_AgentActor.py",
        "start_line": 84,
        "end_line": 87,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "test_perform_task_shell",
        "file": ".\\tests\\test_AgentActor.py",
        "start_line": 89,
        "end_line": 92,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "test_perform_task_invalid_type",
        "file": ".\\tests\\test_AgentActor.py",
        "start_line": 94,
        "end_line": 96,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "test_shutdown",
        "file": ".\\tests\\test_AgentActor.py",
        "start_line": 98,
        "end_line": 101,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "__init__",
        "file": ".\\tests\\test_agent_base.py",
        "start_line": 19,
        "end_line": 20,
        "params": [
            "self",
            "name",
            "project_name"
        ],
        "docstring": null
    },
    {
        "name": "describe_capabilities",
        "file": ".\\tests\\test_agent_base.py",
        "start_line": 22,
        "end_line": 23,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "solve_task",
        "file": ".\\tests\\test_agent_base.py",
        "start_line": 25,
        "end_line": 26,
        "params": [
            "self",
            "task"
        ],
        "docstring": null
    },
    {
        "name": "setUp",
        "file": ".\\tests\\test_agent_base.py",
        "start_line": 32,
        "end_line": 34,
        "params": [
            "self"
        ],
        "docstring": "Setup method to create a test agent instance."
    },
    {
        "name": "test_initialization",
        "file": ".\\tests\\test_agent_base.py",
        "start_line": 36,
        "end_line": 39,
        "params": [
            "self"
        ],
        "docstring": "Test if the agent initializes correctly."
    },
    {
        "name": "test_solve_task",
        "file": ".\\tests\\test_agent_base.py",
        "start_line": 41,
        "end_line": 44,
        "params": [
            "self"
        ],
        "docstring": "Test the solve_task method."
    },
    {
        "name": "test_describe_capabilities",
        "file": ".\\tests\\test_agent_base.py",
        "start_line": 46,
        "end_line": 48,
        "params": [
            "self"
        ],
        "docstring": "Test the describe_capabilities method."
    },
    {
        "name": "test_shutdown",
        "file": ".\\tests\\test_agent_base.py",
        "start_line": 50,
        "end_line": 56,
        "params": [
            "self"
        ],
        "docstring": "Test the shutdown method."
    },
    {
        "name": "__init__",
        "file": ".\\tests\\test_agent_dispatcher.py",
        "start_line": 23,
        "end_line": 24,
        "params": [
            "self",
            "name",
            "project_name"
        ],
        "docstring": null
    },
    {
        "name": "describe_capabilities",
        "file": ".\\tests\\test_agent_dispatcher.py",
        "start_line": 26,
        "end_line": 27,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "solve_task",
        "file": ".\\tests\\test_agent_dispatcher.py",
        "start_line": 29,
        "end_line": 30,
        "params": [
            "self",
            "action"
        ],
        "docstring": null
    },
    {
        "name": "solve_task",
        "file": ".\\tests\\test_agent_dispatcher.py",
        "start_line": 34,
        "end_line": 35,
        "params": [
            "self",
            "action"
        ],
        "docstring": null
    },
    {
        "name": "__init__",
        "file": ".\\tests\\test_agent_dispatcher.py",
        "start_line": 39,
        "end_line": 40,
        "params": [
            "self",
            "api_key",
            "endpoint"
        ],
        "docstring": null
    },
    {
        "name": "describe_capabilities",
        "file": ".\\tests\\test_agent_dispatcher.py",
        "start_line": 42,
        "end_line": 43,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "solve_task",
        "file": ".\\tests\\test_agent_dispatcher.py",
        "start_line": 45,
        "end_line": 48,
        "params": [
            "self",
            "action"
        ],
        "docstring": null
    },
    {
        "name": "__init__",
        "file": ".\\tests\\test_agent_dispatcher.py",
        "start_line": 52,
        "end_line": 60,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "setUp",
        "file": ".\\tests\\test_agent_dispatcher.py",
        "start_line": 65,
        "end_line": 69,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "test_initialization_with_agents",
        "file": ".\\tests\\test_agent_dispatcher.py",
        "start_line": 71,
        "end_line": 75,
        "params": [
            "self"
        ],
        "docstring": "Test dispatcher initializes and lists available agents correctly."
    },
    {
        "name": "test_initialization_without_agents",
        "file": ".\\tests\\test_agent_dispatcher.py",
        "start_line": 77,
        "end_line": 82,
        "params": [
            "self"
        ],
        "docstring": "Test dispatcher warns when no agents are loaded."
    },
    {
        "name": "test_register_agent_valid",
        "file": ".\\tests\\test_agent_dispatcher.py",
        "start_line": 84,
        "end_line": 89,
        "params": [
            "self"
        ],
        "docstring": "Test registering a valid agent."
    },
    {
        "name": "test_register_agent_invalid",
        "file": ".\\tests\\test_agent_dispatcher.py",
        "start_line": 91,
        "end_line": 95,
        "params": [
            "self"
        ],
        "docstring": "Test attempting to register an invalid agent."
    },
    {
        "name": "test_register_duplicate_agent",
        "file": ".\\tests\\test_agent_dispatcher.py",
        "start_line": 97,
        "end_line": 102,
        "params": [
            "self"
        ],
        "docstring": "Test registering an agent that already exists."
    },
    {
        "name": "test_dispatch_task_valid_agent",
        "file": ".\\tests\\test_agent_dispatcher.py",
        "start_line": 104,
        "end_line": 110,
        "params": [
            "self"
        ],
        "docstring": "Test dispatcher successfully dispatches a task to a valid agent."
    },
    {
        "name": "test_dispatch_task_invalid_agent",
        "file": ".\\tests\\test_agent_dispatcher.py",
        "start_line": 113,
        "end_line": 118,
        "params": [
            "self",
            "mock_logger"
        ],
        "docstring": "Test dispatcher handles task dispatching for a non-existent agent."
    },
    {
        "name": "test_dispatch_task_agent_without_methods",
        "file": ".\\tests\\test_agent_dispatcher.py",
        "start_line": 121,
        "end_line": 132,
        "params": [
            "self",
            "mock_logger"
        ],
        "docstring": "Test dispatcher handles an agent missing task handling methods.\nWe simulate this by registering an InvalidAgent whose solve_task method\nalways raises an AttributeError."
    },
    {
        "name": "test_dispatch_task_exception_handling",
        "file": ".\\tests\\test_agent_dispatcher.py",
        "start_line": 135,
        "end_line": 143,
        "params": [
            "self",
            "mock_logger"
        ],
        "docstring": "Test dispatcher handles exceptions in task execution."
    },
    {
        "name": "test_dispatch_internal_agent",
        "file": ".\\tests\\test_agent_dispatcher.py",
        "start_line": 145,
        "end_line": 152,
        "params": [
            "self"
        ],
        "docstring": "Test dispatching a task to an internal dummy agent."
    },
    {
        "name": "test_dispatch_external_agent",
        "file": ".\\tests\\test_agent_dispatcher.py",
        "start_line": 155,
        "end_line": 170,
        "params": [
            "self",
            "mock_post"
        ],
        "docstring": "Test dispatching a task to an external agent adapter."
    },
    {
        "name": "test_dispatch_invalid_agent",
        "file": ".\\tests\\test_agent_dispatcher.py",
        "start_line": 172,
        "end_line": 177,
        "params": [
            "self"
        ],
        "docstring": "Test dispatching a task to a non-existent agent."
    },
    {
        "name": "describe_capabilities",
        "file": ".\\tests\\test_agent_registry.py",
        "start_line": 25,
        "end_line": 27,
        "params": [
            "self"
        ],
        "docstring": "Returns a description of the agent's capabilities."
    },
    {
        "name": "solve_task",
        "file": ".\\tests\\test_agent_registry.py",
        "start_line": 29,
        "end_line": 31,
        "params": [
            "self",
            "task"
        ],
        "docstring": "Simulates solving a given task."
    },
    {
        "name": "setUp",
        "file": ".\\tests\\test_agent_registry.py",
        "start_line": 38,
        "end_line": 46,
        "params": [
            "self"
        ],
        "docstring": "Set up a fresh AgentRegistry instance for each test."
    },
    {
        "name": "test_load_agents",
        "file": ".\\tests\\test_agent_registry.py",
        "start_line": 48,
        "end_line": 53,
        "params": [
            "self"
        ],
        "docstring": "Test if agents are correctly loaded into the registry."
    },
    {
        "name": "test_get_valid_agent",
        "file": ".\\tests\\test_agent_registry.py",
        "start_line": 55,
        "end_line": 58,
        "params": [
            "self"
        ],
        "docstring": "Test retrieving a valid agent."
    },
    {
        "name": "test_get_invalid_agent",
        "file": ".\\tests\\test_agent_registry.py",
        "start_line": 60,
        "end_line": 63,
        "params": [
            "self"
        ],
        "docstring": "Test retrieving a non-existent agent."
    },
    {
        "name": "test_list_agents",
        "file": ".\\tests\\test_agent_registry.py",
        "start_line": 65,
        "end_line": 69,
        "params": [
            "self"
        ],
        "docstring": "Test that agents are listed correctly."
    },
    {
        "name": "test_register_agent",
        "file": ".\\tests\\test_agent_registry.py",
        "start_line": 71,
        "end_line": 76,
        "params": [
            "self"
        ],
        "docstring": "Test registering a new agent."
    },
    {
        "name": "test_register_duplicate_agent",
        "file": ".\\tests\\test_agent_registry.py",
        "start_line": 78,
        "end_line": 81,
        "params": [
            "self"
        ],
        "docstring": "Test that registering the same agent twice fails."
    },
    {
        "name": "test_unregister_agent",
        "file": ".\\tests\\test_agent_registry.py",
        "start_line": 83,
        "end_line": 87,
        "params": [
            "self"
        ],
        "docstring": "Test unregistering an existing agent."
    },
    {
        "name": "test_unregister_nonexistent_agent",
        "file": ".\\tests\\test_agent_registry.py",
        "start_line": 89,
        "end_line": 92,
        "params": [
            "self"
        ],
        "docstring": "Test unregistering a non-existent agent."
    },
    {
        "name": "test_agent_exists",
        "file": ".\\tests\\test_agent_registry.py",
        "start_line": 94,
        "end_line": 97,
        "params": [
            "self"
        ],
        "docstring": "Test checking if an agent exists."
    },
    {
        "name": "setUp",
        "file": ".\\tests\\test_ai_agent_utils.py",
        "start_line": 28,
        "end_line": 29,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "test_track_execution",
        "file": ".\\tests\\test_ai_agent_utils.py",
        "start_line": 31,
        "end_line": 44,
        "params": [
            "self"
        ],
        "docstring": "Test execution time tracking."
    },
    {
        "name": "test_clear_logs",
        "file": ".\\tests\\test_ai_agent_utils.py",
        "start_line": 46,
        "end_line": 49,
        "params": [
            "self"
        ],
        "docstring": "Test clearing performance logs."
    },
    {
        "name": "setUp",
        "file": ".\\tests\\test_ai_agent_utils.py",
        "start_line": 55,
        "end_line": 56,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "test_store_and_retrieve_memory",
        "file": ".\\tests\\test_ai_agent_utils.py",
        "start_line": 58,
        "end_line": 62,
        "params": [
            "self"
        ],
        "docstring": "Test storing and retrieving memory."
    },
    {
        "name": "test_clear_memory",
        "file": ".\\tests\\test_ai_agent_utils.py",
        "start_line": 64,
        "end_line": 68,
        "params": [
            "self"
        ],
        "docstring": "Test clearing memory storage."
    },
    {
        "name": "test_export_and_import_memory",
        "file": ".\\tests\\test_ai_agent_utils.py",
        "start_line": 70,
        "end_line": 81,
        "params": [
            "self"
        ],
        "docstring": "Test exporting and importing memory to/from a file."
    },
    {
        "name": "test_create_segment",
        "file": ".\\tests\\test_ai_agent_utils.py",
        "start_line": 87,
        "end_line": 95,
        "params": [
            "self"
        ],
        "docstring": "Test creating a structured memory segment."
    },
    {
        "name": "setUp",
        "file": ".\\tests\\test_ai_agent_utils.py",
        "start_line": 101,
        "end_line": 102,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "test_store_segment",
        "file": ".\\tests\\test_ai_agent_utils.py",
        "start_line": 104,
        "end_line": 111,
        "params": [
            "self"
        ],
        "docstring": "Test storing a segment in vector memory."
    },
    {
        "name": "test_search_by_text_without_model",
        "file": ".\\tests\\test_ai_agent_utils.py",
        "start_line": 113,
        "end_line": 131,
        "params": [
            "self"
        ],
        "docstring": "Test searching stored segments without an AI model."
    },
    {
        "name": "sample_function",
        "file": ".\\tests\\test_ai_agent_utils.py",
        "start_line": 35,
        "end_line": 37,
        "params": [],
        "docstring": null
    },
    {
        "name": "setUp",
        "file": ".\\tests\\test_ai_confidence_manager.py",
        "start_line": 17,
        "end_line": 27,
        "params": [
            "self"
        ],
        "docstring": "Initialize the AIConfidenceManager instance and test data."
    },
    {
        "name": "tearDown",
        "file": ".\\tests\\test_ai_confidence_manager.py",
        "start_line": 29,
        "end_line": 33,
        "params": [
            "self"
        ],
        "docstring": "Clean up generated JSON files to avoid interference between tests."
    },
    {
        "name": "test_assign_confidence_score",
        "file": ".\\tests\\test_ai_confidence_manager.py",
        "start_line": 37,
        "end_line": 68,
        "params": [
            "self",
            "mock_history",
            "mock_random"
        ],
        "docstring": "Test that assign_confidence_score assigns the expected confidence score and reason,\nand that it correctly stores the patch in both confidence_scores and high_confidence_store."
    },
    {
        "name": "test_get_best_high_confidence_patch",
        "file": ".\\tests\\test_ai_confidence_manager.py",
        "start_line": 70,
        "end_line": 81,
        "params": [
            "self"
        ],
        "docstring": "Test retrieving the best high-confidence patch."
    },
    {
        "name": "test_get_best_high_confidence_patch_none",
        "file": ".\\tests\\test_ai_confidence_manager.py",
        "start_line": 83,
        "end_line": 90,
        "params": [
            "self"
        ],
        "docstring": "Test that None is returned when there are no high-confidence patches."
    },
    {
        "name": "test_suggest_patch_reattempt",
        "file": ".\\tests\\test_ai_confidence_manager.py",
        "start_line": 92,
        "end_line": 105,
        "params": [
            "self"
        ],
        "docstring": "Test suggesting a patch for reattempt when a stored patch has improved confidence."
    },
    {
        "name": "test_suggest_patch_reattempt_none",
        "file": ".\\tests\\test_ai_confidence_manager.py",
        "start_line": 107,
        "end_line": 118,
        "params": [
            "self"
        ],
        "docstring": "Test that suggest_patch_reattempt returns None when no patch qualifies."
    },
    {
        "name": "ai_model_manager",
        "file": ".\\tests\\test_ai_model_manager.py",
        "start_line": 29,
        "end_line": 31,
        "params": [],
        "docstring": "Fixture to initialize an instance of AIModelManager for tests."
    },
    {
        "name": "test_save_model",
        "file": ".\\tests\\test_ai_model_manager.py",
        "start_line": 37,
        "end_line": 42,
        "params": [
            "ai_model_manager"
        ],
        "docstring": "Test that the model can be saved via file write."
    },
    {
        "name": "test_load_model",
        "file": ".\\tests\\test_ai_model_manager.py",
        "start_line": 45,
        "end_line": 51,
        "params": [
            "ai_model_manager"
        ],
        "docstring": "Test that the model is loaded correctly from file."
    },
    {
        "name": "test_generate_patch",
        "file": ".\\tests\\test_ai_model_manager.py",
        "start_line": 60,
        "end_line": 71,
        "params": [
            "mock_generate_with_model",
            "mock_assign_confidence",
            "mock_get_best_patch",
            "ai_model_manager"
        ],
        "docstring": "Test patch generation with model prioritization and confidence tracking.\nSimulate a scenario where the first model returns a valid patch."
    },
    {
        "name": "test_generate_patch_success",
        "file": ".\\tests\\test_ai_model_manager.py",
        "start_line": 77,
        "end_line": 85,
        "params": [
            "mock_generate",
            "mock_store",
            "mock_assign",
            "ai_model_manager"
        ],
        "docstring": "Test successful patch generation using AI model selection and confidence scoring."
    },
    {
        "name": "test_generate_patch_failure",
        "file": ".\\tests\\test_ai_model_manager.py",
        "start_line": 89,
        "end_line": 96,
        "params": [
            "mock_generate",
            "ai_model_manager",
            "caplog"
        ],
        "docstring": "Test the behavior when no AI model generates a valid patch."
    },
    {
        "name": "test_format_prompt",
        "file": ".\\tests\\test_ai_model_manager.py",
        "start_line": 102,
        "end_line": 110,
        "params": [
            "ai_model_manager"
        ],
        "docstring": "Test that the debugging prompt is formatted correctly with error message,\nfile name, and code context."
    },
    {
        "name": "test_compute_error_signature",
        "file": ".\\tests\\test_ai_model_manager.py",
        "start_line": 113,
        "end_line": 121,
        "params": [
            "ai_model_manager"
        ],
        "docstring": "Test that the error signature (SHA-256 hash) is computed deterministically and uniquely."
    },
    {
        "name": "setUp",
        "file": ".\\tests\\test_ai_patch_optimizer.py",
        "start_line": 11,
        "end_line": 19,
        "params": [
            "self"
        ],
        "docstring": "Set up an instance of AIPatchOptimizer for testing."
    },
    {
        "name": "test_refine_failed_patch_success",
        "file": ".\\tests\\test_ai_patch_optimizer.py",
        "start_line": 24,
        "end_line": 28,
        "params": [
            "self",
            "mock_get_confidence",
            "mock_assign_confidence",
            "mock_get_failed_patches"
        ],
        "docstring": "Test refining a failed patch when AI confidence improves."
    },
    {
        "name": "test_refine_failed_patch_max_attempts",
        "file": ".\\tests\\test_ai_patch_optimizer.py",
        "start_line": 31,
        "end_line": 34,
        "params": [
            "self",
            "mock_get_failed_patches"
        ],
        "docstring": "Test that refining a patch fails after reaching max modification attempts."
    },
    {
        "name": "test_refine_failed_patch_low_confidence",
        "file": ".\\tests\\test_ai_patch_optimizer.py",
        "start_line": 39,
        "end_line": 42,
        "params": [
            "self",
            "mock_get_confidence",
            "mock_assign_confidence",
            "mock_get_failed_patches"
        ],
        "docstring": "Test refining a failed patch when AI confidence does not improve."
    },
    {
        "name": "test_attempt_patch_reapply_success",
        "file": ".\\tests\\test_ai_patch_optimizer.py",
        "start_line": 47,
        "end_line": 50,
        "params": [
            "self",
            "mock_generate_with_model",
            "mock_refine_failed_patch"
        ],
        "docstring": "Test that a modified patch is successfully reapplied."
    },
    {
        "name": "test_attempt_patch_reapply_failure",
        "file": ".\\tests\\test_ai_patch_optimizer.py",
        "start_line": 53,
        "end_line": 56,
        "params": [
            "self",
            "mock_refine_failed_patch"
        ],
        "docstring": "Test that a patch reapply fails when no valid modifications are found."
    },
    {
        "name": "setUp",
        "file": ".\\tests\\test_ai_patch_retry_manager.py",
        "start_line": 11,
        "end_line": 27,
        "params": [
            "self"
        ],
        "docstring": "Sets up an instance of AIPatchRetryManager for testing."
    },
    {
        "name": "test_retry_failed_patches_success",
        "file": ".\\tests\\test_ai_patch_retry_manager.py",
        "start_line": 37,
        "end_line": 44,
        "params": [
            "self",
            "mock_apply_patch",
            "mock_get_confidence",
            "mock_modify_patch",
            "mock_analyze_failed_patch"
        ],
        "docstring": "Test AI patch retry process when a patch modification is successful."
    },
    {
        "name": "test_retry_failed_patches_failure",
        "file": ".\\tests\\test_ai_patch_retry_manager.py",
        "start_line": 54,
        "end_line": 61,
        "params": [
            "self",
            "mock_apply_patch",
            "mock_get_confidence",
            "mock_modify_patch",
            "mock_analyze_failed_patch"
        ],
        "docstring": "Test AI patch retry process when a patch modification fails."
    },
    {
        "name": "test_retry_failed_patches_low_confidence",
        "file": ".\\tests\\test_ai_patch_retry_manager.py",
        "start_line": 65,
        "end_line": 78,
        "params": [
            "self",
            "mock_get_confidence",
            "mock_analyze_failed_patch"
        ],
        "docstring": "Test AI patch retry when confidence remains too low."
    },
    {
        "name": "setUp",
        "file": ".\\tests\\test_ai_patch_review_manager.py",
        "start_line": 32,
        "end_line": 40,
        "params": [
            "self"
        ],
        "docstring": "Sets up an instance of AIPatchReviewManager for testing."
    },
    {
        "name": "tearDown",
        "file": ".\\tests\\test_ai_patch_review_manager.py",
        "start_line": 42,
        "end_line": 46,
        "params": [
            "self"
        ],
        "docstring": "Cleanup after tests by removing any created test files."
    },
    {
        "name": "test_rank_human_reviewed_patches",
        "file": ".\\tests\\test_ai_patch_review_manager.py",
        "start_line": 49,
        "end_line": 68,
        "params": [
            "self",
            "mock_evaluate_patch"
        ],
        "docstring": "Test AI ranking of human-reviewed patches."
    },
    {
        "name": "test_log_patch_attempt",
        "file": ".\\tests\\test_ai_patch_review_manager.py",
        "start_line": 70,
        "end_line": 80,
        "params": [
            "self"
        ],
        "docstring": "Test logging of patch attempts."
    },
    {
        "name": "test_get_best_patch",
        "file": ".\\tests\\test_ai_patch_review_manager.py",
        "start_line": 82,
        "end_line": 86,
        "params": [
            "self"
        ],
        "docstring": "Test retrieving the highest-ranked patch."
    },
    {
        "name": "test_process_human_reviewed_patches_success",
        "file": ".\\tests\\test_ai_patch_review_manager.py",
        "start_line": 90,
        "end_line": 99,
        "params": [
            "self",
            "mock_apply_patch",
            "mock_rank_patches"
        ],
        "docstring": "Test processing of human-reviewed patches when application succeeds."
    },
    {
        "name": "test_process_human_reviewed_patches_failure",
        "file": ".\\tests\\test_ai_patch_review_manager.py",
        "start_line": 103,
        "end_line": 112,
        "params": [
            "self",
            "mock_apply_patch",
            "mock_rank_patches"
        ],
        "docstring": "Test processing of human-reviewed patches when application fails."
    },
    {
        "name": "test_analyze_patch_failures",
        "file": ".\\tests\\test_ai_patch_review_manager.py",
        "start_line": 114,
        "end_line": 125,
        "params": [
            "self"
        ],
        "docstring": "Test analysis of common patch failure patterns."
    },
    {
        "name": "test_chunk_code",
        "file": ".\\tests\\test_ai_patch_utils.py",
        "start_line": 16,
        "end_line": 21,
        "params": [
            "self"
        ],
        "docstring": "Test that code chunking correctly splits long content."
    },
    {
        "name": "test_query_llm_success",
        "file": ".\\tests\\test_ai_patch_utils.py",
        "start_line": 24,
        "end_line": 28,
        "params": [
            "self",
            "mock_run"
        ],
        "docstring": "Test LLM query succeeds and returns a patch suggestion."
    },
    {
        "name": "test_query_llm_failure",
        "file": ".\\tests\\test_ai_patch_utils.py",
        "start_line": 31,
        "end_line": 35,
        "params": [
            "self",
            "mock_run"
        ],
        "docstring": "Test LLM query fails and returns None."
    },
    {
        "name": "test_query_openai_success",
        "file": ".\\tests\\test_ai_patch_utils.py",
        "start_line": 38,
        "end_line": 44,
        "params": [
            "self",
            "mock_openai"
        ],
        "docstring": "Test OpenAI query succeeds and returns a patch suggestion."
    },
    {
        "name": "test_query_openai_failure",
        "file": ".\\tests\\test_ai_patch_utils.py",
        "start_line": 47,
        "end_line": 50,
        "params": [
            "self",
            "mock_openai"
        ],
        "docstring": "Test OpenAI query failure returns None."
    },
    {
        "name": "test_generate_patch_fallback_to_deepseek",
        "file": ".\\tests\\test_ai_patch_utils.py",
        "start_line": 54,
        "end_line": 63,
        "params": [
            "self",
            "mock_query_openai",
            "mock_query_llm"
        ],
        "docstring": "Test that patch generation falls back to DeepSeek if Ollama fails."
    },
    {
        "name": "test_generate_patch_fallback_to_openai",
        "file": ".\\tests\\test_ai_patch_utils.py",
        "start_line": 67,
        "end_line": 76,
        "params": [
            "self",
            "mock_query_openai",
            "mock_query_llm"
        ],
        "docstring": "Test that patch generation falls back to OpenAI if LLM fails."
    },
    {
        "name": "test_generate_patch_no_suggestions",
        "file": ".\\tests\\test_ai_patch_utils.py",
        "start_line": 80,
        "end_line": 89,
        "params": [
            "self",
            "mock_query_openai",
            "mock_query_llm"
        ],
        "docstring": "Test that patch generation returns an empty string if no AI suggests a fix."
    },
    {
        "name": "cleanup_files",
        "file": ".\\tests\\test_ai_rollback_analysis.py",
        "start_line": 24,
        "end_line": 35,
        "params": [],
        "docstring": "Removes test-related JSON files after each test."
    },
    {
        "name": "test_track_patch_history",
        "file": ".\\tests\\test_ai_rollback_analysis.py",
        "start_line": 38,
        "end_line": 51,
        "params": [
            "cleanup_files"
        ],
        "docstring": "Test that track_patch_history stores patch data correctly."
    },
    {
        "name": "test_analyze_failed_patches",
        "file": ".\\tests\\test_ai_rollback_analysis.py",
        "start_line": 57,
        "end_line": 79,
        "params": [
            "mock_ai_client",
            "mock_patch_manager",
            "mock_save",
            "cleanup_files"
        ],
        "docstring": "Test that analyze_failed_patches classifies patches correctly\nbased on AIClient evaluations."
    },
    {
        "name": "test_refine_patches_success",
        "file": ".\\tests\\test_ai_rollback_analysis.py",
        "start_line": 85,
        "end_line": 110,
        "params": [
            "mock_ai_client",
            "mock_patch_manager",
            "mock_save",
            "cleanup_files"
        ],
        "docstring": "Test that refine_patches successfully refines patches with a high score\nand moves uncertain patches to human review."
    },
    {
        "name": "test_refine_patches_none",
        "file": ".\\tests\\test_ai_rollback_analysis.py",
        "start_line": 116,
        "end_line": 130,
        "params": [
            "mock_ai_client",
            "mock_patch_manager",
            "mock_save",
            "cleanup_files"
        ],
        "docstring": "Test that refine_patches returns False if no patches are refinable."
    },
    {
        "name": "test_process_failed_patches_success",
        "file": ".\\tests\\test_ai_rollback_analysis.py",
        "start_line": 134,
        "end_line": 138,
        "params": [
            "mock_refine",
            "cleanup_files"
        ],
        "docstring": "Test process_failed_patches returns True if refinement was done."
    },
    {
        "name": "test_process_failed_patches_failure",
        "file": ".\\tests\\test_ai_rollback_analysis.py",
        "start_line": 142,
        "end_line": 146,
        "params": [
            "mock_refine",
            "cleanup_files"
        ],
        "docstring": "Test process_failed_patches returns False if no refinements occurred."
    },
    {
        "name": "extract_failures",
        "file": ".\\tests\\test_auto_fixer.py",
        "start_line": 15,
        "end_line": 17,
        "params": [
            "test_output"
        ],
        "docstring": "Extracts failure details from pytest output."
    },
    {
        "name": "attempt_fixes",
        "file": ".\\tests\\test_auto_fixer.py",
        "start_line": 19,
        "end_line": 23,
        "params": [
            "failures"
        ],
        "docstring": "Applies fixes using AutoFixer."
    },
    {
        "name": "setUpClass",
        "file": ".\\tests\\test_auto_fixer.py",
        "start_line": 42,
        "end_line": 44,
        "params": [
            "cls"
        ],
        "docstring": null
    },
    {
        "name": "setUp",
        "file": ".\\tests\\test_auto_fixer.py",
        "start_line": 46,
        "end_line": 54,
        "params": [
            "self"
        ],
        "docstring": "Sets up a test workspace for file operations."
    },
    {
        "name": "tearDown",
        "file": ".\\tests\\test_auto_fixer.py",
        "start_line": 56,
        "end_line": 58,
        "params": [
            "self"
        ],
        "docstring": "Cleans up the test workspace."
    },
    {
        "name": "test_apply_fix_with_known_pattern",
        "file": ".\\tests\\test_auto_fixer.py",
        "start_line": 60,
        "end_line": 65,
        "params": [
            "self"
        ],
        "docstring": "Test that a known error pattern is fixed."
    },
    {
        "name": "test_quick_fix_missing_attribute",
        "file": ".\\tests\\test_auto_fixer.py",
        "start_line": 67,
        "end_line": 73,
        "params": [
            "self"
        ],
        "docstring": "Test auto-fixing a missing attribute in a copied project file."
    },
    {
        "name": "test_apply_fix_with_llm_patch",
        "file": ".\\tests\\test_auto_fixer.py",
        "start_line": 75,
        "end_line": 81,
        "params": [
            "self"
        ],
        "docstring": "Test applying an LLM-generated patch."
    },
    {
        "name": "test_corrupt_file",
        "file": ".\\tests\\test_auto_fixer.py",
        "start_line": 83,
        "end_line": 90,
        "params": [
            "self"
        ],
        "docstring": "Ensure AutoFixer can handle a corrupt file gracefully."
    },
    {
        "name": "test_ai_generated_fix_success",
        "file": ".\\tests\\test_auto_fixer.py",
        "start_line": 92,
        "end_line": 96,
        "params": [
            "self"
        ],
        "docstring": "Ensure AutoFixer applies AI-generated patches correctly."
    },
    {
        "name": "test_ai_generated_fix_invalid",
        "file": ".\\tests\\test_auto_fixer.py",
        "start_line": 98,
        "end_line": 102,
        "params": [
            "self"
        ],
        "docstring": "Ensure AutoFixer rejects invalid AI-generated patches."
    },
    {
        "name": "test_quick_fix_type_error",
        "file": ".\\tests\\test_auto_fixer.py",
        "start_line": 104,
        "end_line": 114,
        "params": [
            "self"
        ],
        "docstring": "Ensure AutoFixer correctly inserts missing arguments in function calls."
    },
    {
        "name": "test_full_auto_debugging",
        "file": ".\\tests\\test_auto_fixer.py",
        "start_line": 116,
        "end_line": 127,
        "params": [
            "self"
        ],
        "docstring": "Ensure AutoFixer can run full debugging cycle on a failing test suite."
    },
    {
        "name": "setUp",
        "file": ".\\tests\\test_auto_fix_manager.py",
        "start_line": 17,
        "end_line": 27,
        "params": [
            "self"
        ],
        "docstring": "Initialize the AIConfidenceManager instance and test data."
    },
    {
        "name": "tearDown",
        "file": ".\\tests\\test_auto_fix_manager.py",
        "start_line": 29,
        "end_line": 33,
        "params": [
            "self"
        ],
        "docstring": "Clean up generated JSON files to avoid interference between tests."
    },
    {
        "name": "test_assign_confidence_score",
        "file": ".\\tests\\test_auto_fix_manager.py",
        "start_line": 37,
        "end_line": 68,
        "params": [
            "self",
            "mock_history",
            "mock_random"
        ],
        "docstring": "Test that assign_confidence_score assigns the expected confidence score and reason,\nand that it correctly stores the patch in both confidence_scores and high_confidence_store."
    },
    {
        "name": "test_get_best_high_confidence_patch",
        "file": ".\\tests\\test_auto_fix_manager.py",
        "start_line": 70,
        "end_line": 81,
        "params": [
            "self"
        ],
        "docstring": "Test retrieving the best high-confidence patch."
    },
    {
        "name": "test_get_best_high_confidence_patch_none",
        "file": ".\\tests\\test_auto_fix_manager.py",
        "start_line": 83,
        "end_line": 90,
        "params": [
            "self"
        ],
        "docstring": "Test that None is returned when there are no high-confidence patches."
    },
    {
        "name": "test_suggest_patch_reattempt",
        "file": ".\\tests\\test_auto_fix_manager.py",
        "start_line": 92,
        "end_line": 105,
        "params": [
            "self"
        ],
        "docstring": "Test suggesting a patch for reattempt when a stored patch has improved confidence."
    },
    {
        "name": "test_suggest_patch_reattempt_none",
        "file": ".\\tests\\test_auto_fix_manager.py",
        "start_line": 107,
        "end_line": 118,
        "params": [
            "self"
        ],
        "docstring": "Test that suggest_patch_reattempt returns None when no patch qualifies."
    },
    {
        "name": "setUp",
        "file": ".\\tests\\test_custom_agent.py",
        "start_line": 25,
        "end_line": 27,
        "params": [
            "self"
        ],
        "docstring": "Set up a fresh instance of CustomAgent for each test."
    },
    {
        "name": "test_initialization",
        "file": ".\\tests\\test_custom_agent.py",
        "start_line": 29,
        "end_line": 32,
        "params": [
            "self"
        ],
        "docstring": "Test if the CustomAgent initializes correctly."
    },
    {
        "name": "test_describe_capabilities",
        "file": ".\\tests\\test_custom_agent.py",
        "start_line": 34,
        "end_line": 39,
        "params": [
            "self"
        ],
        "docstring": "Test the describe_capabilities method."
    },
    {
        "name": "test_solve_task_success",
        "file": ".\\tests\\test_custom_agent.py",
        "start_line": 41,
        "end_line": 44,
        "params": [
            "self"
        ],
        "docstring": "Test the solve_task method with valid task execution."
    },
    {
        "name": "test_solve_task_with_error",
        "file": ".\\tests\\test_custom_agent.py",
        "start_line": 47,
        "end_line": 50,
        "params": [
            "self",
            "mock_task_logic"
        ],
        "docstring": "Test handling of exceptions in solve_task."
    },
    {
        "name": "test_perform_task_logic",
        "file": ".\\tests\\test_custom_agent.py",
        "start_line": 52,
        "end_line": 55,
        "params": [
            "self"
        ],
        "docstring": "Test perform_task_logic returns expected result."
    },
    {
        "name": "test_solve_task_failure",
        "file": ".\\tests\\test_custom_agent.py",
        "start_line": 57,
        "end_line": 64,
        "params": [
            "self"
        ],
        "docstring": "Test solve_task method handling a task failure."
    },
    {
        "name": "test_shutdown",
        "file": ".\\tests\\test_custom_agent.py",
        "start_line": 66,
        "end_line": 70,
        "params": [
            "self"
        ],
        "docstring": "Test that shutdown logs properly."
    },
    {
        "name": "faulty_logic",
        "file": ".\\tests\\test_custom_agent.py",
        "start_line": 59,
        "end_line": 60,
        "params": [],
        "docstring": null
    },
    {
        "name": "setUp",
        "file": ".\\tests\\test_debugger_cli.py",
        "start_line": 27,
        "end_line": 37,
        "params": [
            "self"
        ],
        "docstring": "Sets up an instance of DebuggerCLI for testing."
    },
    {
        "name": "tearDown",
        "file": ".\\tests\\test_debugger_cli.py",
        "start_line": 39,
        "end_line": 42,
        "params": [
            "self"
        ],
        "docstring": "Cleans up any temporary test files."
    },
    {
        "name": "test_load_ai_performance",
        "file": ".\\tests\\test_debugger_cli.py",
        "start_line": 47,
        "end_line": 53,
        "params": [
            "self",
            "mock_open",
            "mock_json_load",
            "mock_exists"
        ],
        "docstring": "Test loading AI performance data."
    },
    {
        "name": "test_load_ai_performance_empty",
        "file": ".\\tests\\test_debugger_cli.py",
        "start_line": 57,
        "end_line": 61,
        "params": [
            "self",
            "mock_open",
            "mock_json_load"
        ],
        "docstring": "Test loading AI performance when no data exists."
    },
    {
        "name": "test_run_debugger_specific_file",
        "file": ".\\tests\\test_debugger_cli.py",
        "start_line": 63,
        "end_line": 68,
        "params": [
            "self"
        ],
        "docstring": "Test debugging a specific file."
    },
    {
        "name": "test_run_debugger_full",
        "file": ".\\tests\\test_debugger_cli.py",
        "start_line": 70,
        "end_line": 74,
        "params": [
            "self"
        ],
        "docstring": "Test running the full debugging process."
    },
    {
        "name": "test_show_logs",
        "file": ".\\tests\\test_debugger_cli.py",
        "start_line": 76,
        "end_line": 80,
        "params": [
            "self"
        ],
        "docstring": "Test displaying debugging logs."
    },
    {
        "name": "test_rollback_fixes",
        "file": ".\\tests\\test_debugger_cli.py",
        "start_line": 82,
        "end_line": 88,
        "params": [
            "self"
        ],
        "docstring": "Test rolling back fixes."
    },
    {
        "name": "test_rollback_fixes_no_changes",
        "file": ".\\tests\\test_debugger_cli.py",
        "start_line": 90,
        "end_line": 94,
        "params": [
            "self"
        ],
        "docstring": "Test rolling back fixes when no modifications exist."
    },
    {
        "name": "test_fix_imports_no_errors",
        "file": ".\\tests\\test_debugger_cli.py",
        "start_line": 96,
        "end_line": 101,
        "params": [
            "self"
        ],
        "docstring": "Test checking for import errors when none exist."
    },
    {
        "name": "test_fix_imports_with_errors",
        "file": ".\\tests\\test_debugger_cli.py",
        "start_line": 103,
        "end_line": 107,
        "params": [
            "self"
        ],
        "docstring": "Test checking for and fixing missing imports."
    },
    {
        "name": "test_parse_arguments_debug_file",
        "file": ".\\tests\\test_debugger_cli.py",
        "start_line": 112,
        "end_line": 116,
        "params": [
            "self",
            "mock_parse_args",
            "mock_run_debugger"
        ],
        "docstring": "Test CLI argument parsing for debugging a specific file."
    },
    {
        "name": "test_parse_arguments_logs",
        "file": ".\\tests\\test_debugger_cli.py",
        "start_line": 121,
        "end_line": 125,
        "params": [
            "self",
            "mock_parse_args",
            "mock_show_logs"
        ],
        "docstring": "Test CLI argument parsing for displaying logs."
    },
    {
        "name": "test_parse_arguments_rollback",
        "file": ".\\tests\\test_debugger_cli.py",
        "start_line": 130,
        "end_line": 134,
        "params": [
            "self",
            "mock_parse_args",
            "mock_rollback_fixes"
        ],
        "docstring": "Test CLI argument parsing for rollback fixes."
    },
    {
        "name": "test_parse_arguments_performance",
        "file": ".\\tests\\test_debugger_cli.py",
        "start_line": 139,
        "end_line": 143,
        "params": [
            "self",
            "mock_parse_args",
            "mock_show_ai_performance"
        ],
        "docstring": "Test CLI argument parsing for viewing AI performance."
    },
    {
        "name": "test_parse_arguments_fix_imports",
        "file": ".\\tests\\test_debugger_cli.py",
        "start_line": 148,
        "end_line": 152,
        "params": [
            "self",
            "mock_parse_args",
            "mock_fix_imports"
        ],
        "docstring": "Test CLI argument parsing for fixing import errors."
    },
    {
        "name": "setUp",
        "file": ".\\tests\\test_debugger_core.py",
        "start_line": 11,
        "end_line": 13,
        "params": [
            "self"
        ],
        "docstring": "Set up DebugAgent instance for testing."
    },
    {
        "name": "test_analyze_error",
        "file": ".\\tests\\test_debugger_core.py",
        "start_line": 19,
        "end_line": 23,
        "params": [
            "self"
        ],
        "docstring": "Test analyzing error messages."
    },
    {
        "name": "test_run_diagnostics",
        "file": ".\\tests\\test_debugger_core.py",
        "start_line": 25,
        "end_line": 29,
        "params": [
            "self"
        ],
        "docstring": "Test running diagnostics."
    },
    {
        "name": "test_describe_capabilities",
        "file": ".\\tests\\test_debugger_core.py",
        "start_line": 31,
        "end_line": 36,
        "params": [
            "self"
        ],
        "docstring": "Test capability description."
    },
    {
        "name": "test_learning_db",
        "file": ".\\tests\\test_debugger_core.py",
        "start_line": 42,
        "end_line": 59,
        "params": [
            "self"
        ],
        "docstring": "Test storing and retrieving fixes from learning DB."
    },
    {
        "name": "test_run_tests",
        "file": ".\\tests\\test_debugger_core.py",
        "start_line": 66,
        "end_line": 71,
        "params": [
            "self",
            "mock_subprocess"
        ],
        "docstring": "Test running all tests."
    },
    {
        "name": "test_run_tests_for_files",
        "file": ".\\tests\\test_debugger_core.py",
        "start_line": 74,
        "end_line": 79,
        "params": [
            "self",
            "mock_subprocess"
        ],
        "docstring": "Test running tests for specific files."
    },
    {
        "name": "test_parse_test_failures",
        "file": ".\\tests\\test_debugger_core.py",
        "start_line": 81,
        "end_line": 88,
        "params": [
            "self"
        ],
        "docstring": "Test parsing pytest output for failures."
    },
    {
        "name": "test_apply_fix_known_pattern",
        "file": ".\\tests\\test_debugger_core.py",
        "start_line": 95,
        "end_line": 100,
        "params": [
            "self",
            "mock_known_pattern"
        ],
        "docstring": "Test applying fix via known error pattern."
    },
    {
        "name": "test_apply_fix_adaptive_learning",
        "file": ".\\tests\\test_debugger_core.py",
        "start_line": 104,
        "end_line": 110,
        "params": [
            "self",
            "mock_adaptive_fix",
            "mock_known_pattern"
        ],
        "docstring": "Test applying fix using adaptive learning when known pattern fails."
    },
    {
        "name": "test_apply_fix_failure",
        "file": ".\\tests\\test_debugger_core.py",
        "start_line": 114,
        "end_line": 120,
        "params": [
            "self",
            "mock_adaptive_fix",
            "mock_known_pattern"
        ],
        "docstring": "Test failure scenario when no fix is applicable."
    },
    {
        "name": "test_retry_tests_success",
        "file": ".\\tests\\test_debugger_core.py",
        "start_line": 132,
        "end_line": 136,
        "params": [
            "self",
            "mock_push",
            "mock_apply_fix",
            "mock_run_tests"
        ],
        "docstring": "Test retrying tests and fixing failures."
    },
    {
        "name": "test_retry_tests_failure",
        "file": ".\\tests\\test_debugger_core.py",
        "start_line": 142,
        "end_line": 146,
        "params": [
            "self",
            "mock_rollback",
            "mock_apply_fix",
            "mock_run_tests"
        ],
        "docstring": "Test retrying tests but failing to fix issues."
    },
    {
        "name": "test_push_to_github_success",
        "file": ".\\tests\\test_debugger_core.py",
        "start_line": 153,
        "end_line": 160,
        "params": [
            "self",
            "mock_subprocess"
        ],
        "docstring": "Test successful Git push."
    },
    {
        "name": "test_push_to_github_failure",
        "file": ".\\tests\\test_debugger_core.py",
        "start_line": 163,
        "end_line": 166,
        "params": [
            "self",
            "mock_subprocess"
        ],
        "docstring": "Test handling Git push failure."
    },
    {
        "name": "test_automate_debugging_success",
        "file": ".\\tests\\test_debugger_core.py",
        "start_line": 173,
        "end_line": 177,
        "params": [
            "self",
            "mock_retry"
        ],
        "docstring": "Test successful automated debugging."
    },
    {
        "name": "test_automate_debugging_failure",
        "file": ".\\tests\\test_debugger_core.py",
        "start_line": 180,
        "end_line": 184,
        "params": [
            "self",
            "mock_retry"
        ],
        "docstring": "Test automated debugging failure."
    },
    {
        "name": "reporter",
        "file": ".\\tests\\test_debugger_reporter.py",
        "start_line": 10,
        "end_line": 12,
        "params": [],
        "docstring": "Fixture to initialize DebuggerReporter instance."
    },
    {
        "name": "temp_report_file",
        "file": ".\\tests\\test_debugger_reporter.py",
        "start_line": 15,
        "end_line": 19,
        "params": [
            "tmp_path"
        ],
        "docstring": "Creates a temporary debugging report file."
    },
    {
        "name": "test_initialize_report",
        "file": ".\\tests\\test_debugger_reporter.py",
        "start_line": 22,
        "end_line": 32,
        "params": [],
        "docstring": "Test that a new report is created if no report exists."
    },
    {
        "name": "test_load_existing_report",
        "file": ".\\tests\\test_debugger_reporter.py",
        "start_line": 36,
        "end_line": 44,
        "params": [
            "mock_open",
            "mock_exists",
            "reporter"
        ],
        "docstring": "Test loading an existing debugging report without errors."
    },
    {
        "name": "test_log_failed_patch",
        "file": ".\\tests\\test_debugger_reporter.py",
        "start_line": 47,
        "end_line": 50,
        "params": [
            "reporter"
        ],
        "docstring": "Test logging a failed patch."
    },
    {
        "name": "test_log_ai_explanation",
        "file": ".\\tests\\test_debugger_reporter.py",
        "start_line": 52,
        "end_line": 58,
        "params": [
            "reporter"
        ],
        "docstring": "Test logging an AI explanation."
    },
    {
        "name": "test_save_report",
        "file": ".\\tests\\test_debugger_reporter.py",
        "start_line": 62,
        "end_line": 68,
        "params": [
            "mock_open",
            "reporter"
        ],
        "docstring": "Test saving the debugging report to a JSON file."
    },
    {
        "name": "test_send_email_report",
        "file": ".\\tests\\test_debugger_reporter.py",
        "start_line": 72,
        "end_line": 83,
        "params": [
            "mock_send_report",
            "reporter"
        ],
        "docstring": "Test sending an email report with a valid email."
    },
    {
        "name": "test_send_email_invalid_email",
        "file": ".\\tests\\test_debugger_reporter.py",
        "start_line": 87,
        "end_line": 92,
        "params": [
            "mock_send_email",
            "mock_logger_error",
            "reporter"
        ],
        "docstring": "Test that an invalid email prevents sending a report and logs an error."
    },
    {
        "name": "debugger",
        "file": ".\\tests\\test_debugger_runner.py",
        "start_line": 19,
        "end_line": 26,
        "params": [],
        "docstring": "Fixture to initialize DebuggerRunner with mocks."
    },
    {
        "name": "test_run_tests_success",
        "file": ".\\tests\\test_debugger_runner.py",
        "start_line": 28,
        "end_line": 37,
        "params": [
            "debugger"
        ],
        "docstring": "Test successful test run with no failures."
    },
    {
        "name": "test_run_tests_failure",
        "file": ".\\tests\\test_debugger_runner.py",
        "start_line": 39,
        "end_line": 54,
        "params": [
            "debugger"
        ],
        "docstring": "Test a failed test run with no fixes applied."
    },
    {
        "name": "test_retry_tests_success",
        "file": ".\\tests\\test_debugger_runner.py",
        "start_line": 56,
        "end_line": 78,
        "params": [
            "debugger"
        ],
        "docstring": "Test retry mechanism when fixes are applied successfully."
    },
    {
        "name": "test_retry_tests_fail",
        "file": ".\\tests\\test_debugger_runner.py",
        "start_line": 80,
        "end_line": 93,
        "params": [
            "debugger"
        ],
        "docstring": "Test retry mechanism when fixes are ineffective."
    },
    {
        "name": "test_retry_tests_no_failures",
        "file": ".\\tests\\test_debugger_runner.py",
        "start_line": 95,
        "end_line": 103,
        "params": [
            "debugger"
        ],
        "docstring": "Test when there are no test failures on the first run."
    },
    {
        "name": "strategy",
        "file": ".\\tests\\test_debugging_strategy.py",
        "start_line": 32,
        "end_line": 36,
        "params": [],
        "docstring": "Fixture to initialize DebuggingStrategy and clear the learning database before tests."
    },
    {
        "name": "test_generate_patch_with_ai",
        "file": ".\\tests\\test_debugging_strategy.py",
        "start_line": 41,
        "end_line": 58,
        "params": [
            "mock_generate_patch",
            "strategy"
        ],
        "docstring": "Test AI-based patch generation when AST-based fixes don't apply.\n\n- Mocks AIModelManager to return a predefined patch.\n- Ensures generate_patch calls AIModelManager when AST fixes are unavailable.\n- Verifies the returned patch contains expected changes."
    },
    {
        "name": "test_generate_patch_ai_fails",
        "file": ".\\tests\\test_debugging_strategy.py",
        "start_line": 62,
        "end_line": 73,
        "params": [
            "mock_generate_patch",
            "strategy"
        ],
        "docstring": "Test behavior when AI fails to generate a patch.\n\n- Mocks AIModelManager to return None.\n- Ensures that generate_patch correctly handles AI failure."
    },
    {
        "name": "test_generate_patch_ast_based",
        "file": ".\\tests\\test_debugging_strategy.py",
        "start_line": 78,
        "end_line": 91,
        "params": [
            "mock_find_class",
            "strategy"
        ],
        "docstring": "Test AST-based method stub generation for missing attributes.\n\n- Simulates a missing method error.\n- Ensures generate_patch generates a valid method stub via AST."
    },
    {
        "name": "test_apply_patch_failure",
        "file": ".\\tests\\test_debugging_strategy.py",
        "start_line": 96,
        "end_line": 109,
        "params": [
            "mock_subprocess",
            "strategy"
        ],
        "docstring": "Test handling of failed patch application.\n\n- Mocks subprocess.run to simulate a failure.\n- Ensures apply_patch gracefully handles patch failures."
    },
    {
        "name": "auto_fixer",
        "file": ".\\tests\\test_debug_agent_auto_fixer.py",
        "start_line": 58,
        "end_line": 62,
        "params": [],
        "docstring": "Creates a new DebugAgentAutoFixer instance for each test."
    },
    {
        "name": "fix_function",
        "file": ".\\tests\\test_debug_agent_auto_fixer.py",
        "start_line": 66,
        "end_line": 76,
        "params": [],
        "docstring": "Cleans up test artifacts after each test run: removing created modules and backup directories."
    },
    {
        "name": "test_ensure_modules_exist",
        "file": ".\\tests\\test_debug_agent_auto_fixer.py",
        "start_line": 79,
        "end_line": 84,
        "params": [
            "auto_fixer"
        ],
        "docstring": "Test if missing required modules are created successfully by auto_fixer."
    },
    {
        "name": "test_fix_test_imports",
        "file": ".\\tests\\test_debug_agent_auto_fixer.py",
        "start_line": 87,
        "end_line": 98,
        "params": [
            "auto_fixer"
        ],
        "docstring": "Test if auto_fixer can process (placeholder) fixing of broken imports in test files."
    },
    {
        "name": "test_fix_unterminated_strings",
        "file": ".\\tests\\test_debug_agent_auto_fixer.py",
        "start_line": 101,
        "end_line": 110,
        "params": [
            "auto_fixer"
        ],
        "docstring": "Test if unterminated strings in 'test_unterminated.py' are correctly fixed."
    },
    {
        "name": "test_check_syntax_errors",
        "file": ".\\tests\\test_debug_agent_auto_fixer.py",
        "start_line": 113,
        "end_line": 120,
        "params": [
            "auto_fixer"
        ],
        "docstring": "Test if syntax errors are correctly detected by auto_fixer."
    },
    {
        "name": "test_backup_and_restore",
        "file": ".\\tests\\test_debug_agent_auto_fixer.py",
        "start_line": 123,
        "end_line": 135,
        "params": [
            "auto_fixer"
        ],
        "docstring": "Test if file backup and restore operations function correctly."
    },
    {
        "name": "test_re_attempt_failed_patches",
        "file": ".\\tests\\test_debug_agent_auto_fixer.py",
        "start_line": 138,
        "end_line": 151,
        "params": [
            "auto_fixer"
        ],
        "docstring": "Test if auto_fixer correctly retries failed patches before invoking AI-based solutions."
    },
    {
        "name": "setUp",
        "file": ".\\tests\\test_debug_agent_utils.py",
        "start_line": 23,
        "end_line": 26,
        "params": [
            "self"
        ],
        "docstring": "Set up test case variables."
    },
    {
        "name": "test_deepseek_chunk_code",
        "file": ".\\tests\\test_debug_agent_utils.py",
        "start_line": 28,
        "end_line": 42,
        "params": [
            "self"
        ],
        "docstring": "Test deepseek_chunk_code to ensure correct chunking of code."
    },
    {
        "name": "test_run_deepseek_ollama_analysis",
        "file": ".\\tests\\test_debug_agent_utils.py",
        "start_line": 45,
        "end_line": 52,
        "params": [
            "self",
            "mock_subprocess"
        ],
        "docstring": "Test Ollama and DeepSeek fallback system."
    },
    {
        "name": "test_parse_diff_suggestion",
        "file": ".\\tests\\test_debug_agent_utils.py",
        "start_line": 54,
        "end_line": 73,
        "params": [
            "self"
        ],
        "docstring": "Test parse_diff_suggestion to ensure it correctly parses a patch."
    },
    {
        "name": "test_rollback_changes",
        "file": ".\\tests\\test_debug_agent_utils.py",
        "start_line": 76,
        "end_line": 79,
        "params": [
            "self",
            "mock_subprocess"
        ],
        "docstring": "Test rollback_changes to ensure Git restore is called correctly."
    },
    {
        "name": "test_queue_additional_agents",
        "file": ".\\tests\\test_debug_agent_utils.py",
        "start_line": 81,
        "end_line": 86,
        "params": [
            "self"
        ],
        "docstring": "Test queue_additional_agents to ensure agents are queued properly."
    },
    {
        "name": "setUp",
        "file": ".\\tests\\test_deepseek_model.py",
        "start_line": 25,
        "end_line": 35,
        "params": [
            "self"
        ],
        "docstring": "Sets up an instance of DeepSeekModel for testing."
    },
    {
        "name": "tearDown",
        "file": ".\\tests\\test_deepseek_model.py",
        "start_line": 37,
        "end_line": 40,
        "params": [
            "self"
        ],
        "docstring": "Cleanup after tests by removing AI performance tracking file if created."
    },
    {
        "name": "test_generate_with_deepseek",
        "file": ".\\tests\\test_deepseek_model.py",
        "start_line": 43,
        "end_line": 51,
        "params": [
            "self",
            "mock_subprocess"
        ],
        "docstring": "Test calling DeepSeek AI for patch generation."
    },
    {
        "name": "test_generate_with_openai",
        "file": ".\\tests\\test_deepseek_model.py",
        "start_line": 54,
        "end_line": 62,
        "params": [
            "self",
            "mock_openai"
        ],
        "docstring": "Test OpenAI GPT-4 fallback."
    },
    {
        "name": "test_format_prompt",
        "file": ".\\tests\\test_deepseek_model.py",
        "start_line": 64,
        "end_line": 71,
        "params": [
            "self"
        ],
        "docstring": "Test formatting of debugging prompts."
    },
    {
        "name": "test_modify_prompt",
        "file": ".\\tests\\test_deepseek_model.py",
        "start_line": 73,
        "end_line": 80,
        "params": [
            "self"
        ],
        "docstring": "Test modifying prompts for AI retries."
    },
    {
        "name": "test_generate_patch",
        "file": ".\\tests\\test_deepseek_model.py",
        "start_line": 85,
        "end_line": 102,
        "params": [
            "self",
            "mock_random",
            "mock_openai",
            "mock_deepseek"
        ],
        "docstring": "Test patch generation with fallback and validation."
    },
    {
        "name": "test_validate_patch",
        "file": ".\\tests\\test_deepseek_model.py",
        "start_line": 105,
        "end_line": 109,
        "params": [
            "self",
            "mock_random"
        ],
        "docstring": "Test patch validation with a high confidence score."
    },
    {
        "name": "test_validate_patch_low_score",
        "file": ".\\tests\\test_deepseek_model.py",
        "start_line": 112,
        "end_line": 116,
        "params": [
            "self",
            "mock_random"
        ],
        "docstring": "Test patch validation rejection due to low confidence score."
    },
    {
        "name": "test_ai_performance_tracking",
        "file": ".\\tests\\test_deepseek_model.py",
        "start_line": 118,
        "end_line": 127,
        "params": [
            "self"
        ],
        "docstring": "Test AI performance tracking by recording success and failure."
    },
    {
        "name": "setUp",
        "file": ".\\tests\\test_email_reporter.py",
        "start_line": 4,
        "end_line": 9,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "test_email_validation",
        "file": ".\\tests\\test_email_reporter.py",
        "start_line": 11,
        "end_line": 13,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "test_send_email_failure_missing_credentials",
        "file": ".\\tests\\test_email_reporter.py",
        "start_line": 15,
        "end_line": 17,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "parser",
        "file": ".\\tests\\test_error_parser.py",
        "start_line": 22,
        "end_line": 24,
        "params": [],
        "docstring": "Fixture to initialize ErrorParser."
    },
    {
        "name": "test_parse_test_failures_valid",
        "file": ".\\tests\\test_error_parser.py",
        "start_line": 27,
        "end_line": 44,
        "params": [
            "parser"
        ],
        "docstring": "Tests if ErrorParser correctly extracts failures from valid pytest output."
    },
    {
        "name": "test_parse_test_failures_empty",
        "file": ".\\tests\\test_error_parser.py",
        "start_line": 47,
        "end_line": 53,
        "params": [
            "parser"
        ],
        "docstring": "Tests if ErrorParser handles empty pytest output gracefully."
    },
    {
        "name": "test_parse_test_failures_no_failures",
        "file": ".\\tests\\test_error_parser.py",
        "start_line": 56,
        "end_line": 67,
        "params": [
            "parser"
        ],
        "docstring": "Tests if ErrorParser correctly identifies output with no failures."
    },
    {
        "name": "test_parse_test_failures_malformed",
        "file": ".\\tests\\test_error_parser.py",
        "start_line": 70,
        "end_line": 89,
        "params": [
            "parser"
        ],
        "docstring": "Tests if ErrorParser can handle pytest output with unexpected formatting."
    },
    {
        "name": "sample_project",
        "file": ".\\tests\\test_init.py",
        "start_line": 15,
        "end_line": 45,
        "params": [
            "tmp_path"
        ],
        "docstring": "Creates a temporary sample project with the following structure:\n\nsample_project/\n  module1/\n    file1.py   -> Contains a module-level docstring and an import.\n  module2/\n    file2.py   -> Contains a module-level docstring and a different import.\n  file3.py     -> Contains code without a docstring."
    },
    {
        "name": "test_scan_directories",
        "file": ".\\tests\\test_init.py",
        "start_line": 48,
        "end_line": 58,
        "params": [
            "sample_project"
        ],
        "docstring": null
    },
    {
        "name": "test_extract_code_context",
        "file": ".\\tests\\test_init.py",
        "start_line": 61,
        "end_line": 72,
        "params": [
            "sample_project"
        ],
        "docstring": null
    },
    {
        "name": "test_map_dependencies",
        "file": ".\\tests\\test_init.py",
        "start_line": 75,
        "end_line": 90,
        "params": [
            "sample_project"
        ],
        "docstring": null
    },
    {
        "name": "test_save_analysis",
        "file": ".\\tests\\test_init.py",
        "start_line": 93,
        "end_line": 111,
        "params": [
            "tmp_path"
        ],
        "docstring": null
    },
    {
        "name": "test_init_file_setup_manager",
        "file": ".\\tests\\test_init.py",
        "start_line": 114,
        "end_line": 134,
        "params": [
            "tmp_path"
        ],
        "docstring": null
    },
    {
        "name": "test_run_project_setup",
        "file": ".\\tests\\test_init.py",
        "start_line": 137,
        "end_line": 154,
        "params": [
            "tmp_path"
        ],
        "docstring": null
    },
    {
        "name": "setUp",
        "file": ".\\tests\\test_journal_agent.py",
        "start_line": 18,
        "end_line": 20,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "tearDown",
        "file": ".\\tests\\test_journal_agent.py",
        "start_line": 22,
        "end_line": 25,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "test_create_journal_entry",
        "file": ".\\tests\\test_journal_agent.py",
        "start_line": 27,
        "end_line": 30,
        "params": [
            "self"
        ],
        "docstring": "Test creating a journal entry."
    },
    {
        "name": "test_retrieve_journal_entry",
        "file": ".\\tests\\test_journal_agent.py",
        "start_line": 32,
        "end_line": 37,
        "params": [
            "self"
        ],
        "docstring": "Test retrieving an existing journal entry."
    },
    {
        "name": "test_update_journal_entry",
        "file": ".\\tests\\test_journal_agent.py",
        "start_line": 39,
        "end_line": 43,
        "params": [
            "self"
        ],
        "docstring": "Test updating a journal entry."
    },
    {
        "name": "test_delete_journal_entry",
        "file": ".\\tests\\test_journal_agent.py",
        "start_line": 45,
        "end_line": 49,
        "params": [
            "self"
        ],
        "docstring": "Test deleting a journal entry."
    },
    {
        "name": "test_list_journal_entries",
        "file": ".\\tests\\test_journal_agent.py",
        "start_line": 51,
        "end_line": 56,
        "params": [
            "self"
        ],
        "docstring": "Test listing all journal entries."
    },
    {
        "name": "test_perform_task_create",
        "file": ".\\tests\\test_journal_agent.py",
        "start_line": 58,
        "end_line": 64,
        "params": [
            "self"
        ],
        "docstring": "Test performing a 'create' task."
    },
    {
        "name": "test_perform_task_retrieve",
        "file": ".\\tests\\test_journal_agent.py",
        "start_line": 66,
        "end_line": 71,
        "params": [
            "self"
        ],
        "docstring": "Test performing a 'retrieve' task."
    },
    {
        "name": "test_perform_task_update",
        "file": ".\\tests\\test_journal_agent.py",
        "start_line": 73,
        "end_line": 78,
        "params": [
            "self"
        ],
        "docstring": "Test performing an 'update' task."
    },
    {
        "name": "test_perform_task_delete",
        "file": ".\\tests\\test_journal_agent.py",
        "start_line": 80,
        "end_line": 85,
        "params": [
            "self"
        ],
        "docstring": "Test performing a 'delete' task."
    },
    {
        "name": "test_perform_task_invalid_action",
        "file": ".\\tests\\test_journal_agent.py",
        "start_line": 87,
        "end_line": 91,
        "params": [
            "self"
        ],
        "docstring": "Test handling of an invalid action."
    },
    {
        "name": "reset_logger",
        "file": ".\\tests\\test_logger.py",
        "start_line": 12,
        "end_line": 16,
        "params": [],
        "docstring": "Resets the logger between tests to ensure handlers are not duplicated."
    },
    {
        "name": "test_console_logging",
        "file": ".\\tests\\test_logger.py",
        "start_line": 19,
        "end_line": 37,
        "params": [
            "capsys"
        ],
        "docstring": "Test if logs are correctly output to the console."
    },
    {
        "name": "temp_log_file",
        "file": ".\\tests\\test_logger.py",
        "start_line": 40,
        "end_line": 51,
        "params": [],
        "docstring": "Creates a temporary log file for testing file logging."
    },
    {
        "name": "test_log_level_env_variable",
        "file": ".\\tests\\test_logger.py",
        "start_line": 53,
        "end_line": 60,
        "params": [],
        "docstring": "Test that logger respects the LOG_LEVEL environment variable."
    },
    {
        "name": "test_file_logging",
        "file": ".\\tests\\test_logger.py",
        "start_line": 62,
        "end_line": 81,
        "params": [
            "temp_log_file"
        ],
        "docstring": "Test if logs are correctly written to the log file."
    },
    {
        "name": "test_get_logs",
        "file": ".\\tests\\test_logger.py",
        "start_line": 84,
        "end_line": 88,
        "params": [
            "temp_log_file"
        ],
        "docstring": "Test retrieval of logs from file."
    },
    {
        "name": "test_get_logs_empty",
        "file": ".\\tests\\test_logger.py",
        "start_line": 91,
        "end_line": 94,
        "params": [],
        "docstring": "Test `get_logs()` when log file does not exist."
    },
    {
        "name": "test_logger_has_correct_handlers",
        "file": ".\\tests\\test_logger.py",
        "start_line": 97,
        "end_line": 102,
        "params": [],
        "docstring": "Test that the logger has two handlers (console + file)."
    },
    {
        "name": "test_colored_formatter",
        "file": ".\\tests\\test_logger.py",
        "start_line": 105,
        "end_line": 115,
        "params": [],
        "docstring": "Test that ColoredFormatter applies ANSI colors correctly."
    },
    {
        "name": "setUp",
        "file": ".\\tests\\test_mistral_model.py",
        "start_line": 29,
        "end_line": 39,
        "params": [
            "self"
        ],
        "docstring": "Sets up an instance of MistralModel for testing."
    },
    {
        "name": "tearDown",
        "file": ".\\tests\\test_mistral_model.py",
        "start_line": 41,
        "end_line": 44,
        "params": [
            "self"
        ],
        "docstring": "Cleanup after tests by removing AI performance tracking file if created."
    },
    {
        "name": "test_generate_with_mistral",
        "file": ".\\tests\\test_mistral_model.py",
        "start_line": 47,
        "end_line": 55,
        "params": [
            "self",
            "mock_subprocess"
        ],
        "docstring": "Test calling Mistral AI for patch generation."
    },
    {
        "name": "test_generate_with_openai",
        "file": ".\\tests\\test_mistral_model.py",
        "start_line": 58,
        "end_line": 66,
        "params": [
            "self",
            "mock_openai"
        ],
        "docstring": "Test OpenAI GPT-4 fallback."
    },
    {
        "name": "test_format_prompt",
        "file": ".\\tests\\test_mistral_model.py",
        "start_line": 68,
        "end_line": 75,
        "params": [
            "self"
        ],
        "docstring": "Test formatting of debugging prompts."
    },
    {
        "name": "test_modify_prompt",
        "file": ".\\tests\\test_mistral_model.py",
        "start_line": 77,
        "end_line": 84,
        "params": [
            "self"
        ],
        "docstring": "Test modifying prompts for AI retries."
    },
    {
        "name": "test_generate_patch",
        "file": ".\\tests\\test_mistral_model.py",
        "start_line": 89,
        "end_line": 106,
        "params": [
            "self",
            "mock_random",
            "mock_openai",
            "mock_mistral"
        ],
        "docstring": "Test patch generation with fallback and validation."
    },
    {
        "name": "test_validate_patch",
        "file": ".\\tests\\test_mistral_model.py",
        "start_line": 111,
        "end_line": 115,
        "params": [
            "self",
            "mock_random"
        ],
        "docstring": "Test patch validation with a high confidence score."
    },
    {
        "name": "test_validate_patch_low_score",
        "file": ".\\tests\\test_mistral_model.py",
        "start_line": 118,
        "end_line": 122,
        "params": [
            "self",
            "mock_random"
        ],
        "docstring": "Test patch validation rejection due to low confidence score."
    },
    {
        "name": "test_ai_performance_tracking",
        "file": ".\\tests\\test_mistral_model.py",
        "start_line": 124,
        "end_line": 133,
        "params": [
            "self"
        ],
        "docstring": "Test AI performance tracking by recording success and failure."
    },
    {
        "name": "setUp",
        "file": ".\\tests\\test_openai_model.py",
        "start_line": 29,
        "end_line": 49,
        "params": [
            "self"
        ],
        "docstring": "Sets up an instance of OpenAIModel for testing."
    },
    {
        "name": "tearDown",
        "file": ".\\tests\\test_openai_model.py",
        "start_line": 51,
        "end_line": 54,
        "params": [
            "self"
        ],
        "docstring": "Cleanup after tests by removing AI performance tracking file if created."
    },
    {
        "name": "test_generate_with_openai",
        "file": ".\\tests\\test_openai_model.py",
        "start_line": 57,
        "end_line": 63,
        "params": [
            "self",
            "mock_openai"
        ],
        "docstring": "Test calling OpenAI GPT-4 Turbo for patch generation."
    },
    {
        "name": "test_format_prompt",
        "file": ".\\tests\\test_openai_model.py",
        "start_line": 65,
        "end_line": 71,
        "params": [
            "self"
        ],
        "docstring": "Test formatting of debugging prompts."
    },
    {
        "name": "test_modify_prompt",
        "file": ".\\tests\\test_openai_model.py",
        "start_line": 73,
        "end_line": 79,
        "params": [
            "self"
        ],
        "docstring": "Test modifying prompts for AI retries."
    },
    {
        "name": "test_generate_patch",
        "file": ".\\tests\\test_openai_model.py",
        "start_line": 83,
        "end_line": 97,
        "params": [
            "self",
            "mock_random",
            "mock_openai"
        ],
        "docstring": "Test patch generation with retries and validation."
    },
    {
        "name": "test_validate_patch",
        "file": ".\\tests\\test_openai_model.py",
        "start_line": 100,
        "end_line": 103,
        "params": [
            "self",
            "mock_random"
        ],
        "docstring": "Test patch validation with a high confidence score."
    },
    {
        "name": "test_validate_patch_low_score",
        "file": ".\\tests\\test_openai_model.py",
        "start_line": 106,
        "end_line": 109,
        "params": [
            "self",
            "mock_random"
        ],
        "docstring": "Test patch validation rejection due to low confidence score."
    },
    {
        "name": "test_ai_performance_tracking",
        "file": ".\\tests\\test_openai_model.py",
        "start_line": 111,
        "end_line": 120,
        "params": [
            "self"
        ],
        "docstring": "Test AI performance tracking by recording success and failure."
    },
    {
        "name": "test_generate_with_openai_fails_without_api_key",
        "file": ".\\tests\\test_openai_model.py",
        "start_line": 123,
        "end_line": 128,
        "params": [
            "self",
            "mock_openai"
        ],
        "docstring": "Ensure that OpenAI GPT-4 does not attempt to generate patches if the API key is missing."
    },
    {
        "name": "test_generate_with_openai_exception_handling",
        "file": ".\\tests\\test_openai_model.py",
        "start_line": 131,
        "end_line": 140,
        "params": [
            "self",
            "mock_openai"
        ],
        "docstring": "Ensure OpenAI API failures are handled gracefully."
    },
    {
        "name": "__init__",
        "file": ".\\tests\\test_patch_manager.py",
        "start_line": 31,
        "end_line": 32,
        "params": [
            "self",
            "debug_strategy"
        ],
        "docstring": null
    },
    {
        "name": "apply_fix",
        "file": ".\\tests\\test_patch_manager.py",
        "start_line": 34,
        "end_line": 39,
        "params": [
            "self",
            "failure"
        ],
        "docstring": "Applies a fix for a test failure."
    },
    {
        "name": "__init__",
        "file": ".\\tests\\test_patch_tracking_manager.py",
        "start_line": 40,
        "end_line": 46,
        "params": [
            "self"
        ],
        "docstring": "Initialize patch tracking with persistent storage."
    },
    {
        "name": "_load_patch_data",
        "file": ".\\tests\\test_patch_tracking_manager.py",
        "start_line": 48,
        "end_line": 62,
        "params": [
            "self",
            "file_path",
            "default"
        ],
        "docstring": "Loads JSON patch data, ensuring valid dictionary format."
    },
    {
        "name": "_save_patch_data",
        "file": ".\\tests\\test_patch_tracking_manager.py",
        "start_line": 64,
        "end_line": 70,
        "params": [
            "self",
            "file_path",
            "data"
        ],
        "docstring": "Safely writes patch tracking data to a JSON file."
    },
    {
        "name": "record_failed_patch",
        "file": ".\\tests\\test_patch_tracking_manager.py",
        "start_line": 73,
        "end_line": 79,
        "params": [
            "self",
            "error_signature",
            "patch"
        ],
        "docstring": "Records a failed patch, preventing duplicate entries."
    },
    {
        "name": "record_successful_patch",
        "file": ".\\tests\\test_patch_tracking_manager.py",
        "start_line": 82,
        "end_line": 88,
        "params": [
            "self",
            "error_signature",
            "patch"
        ],
        "docstring": "Logs a successful patch to track AI debugging progress."
    },
    {
        "name": "record_import_fix",
        "file": ".\\tests\\test_patch_tracking_manager.py",
        "start_line": 91,
        "end_line": 102,
        "params": [
            "self",
            "module_name",
            "fix_success"
        ],
        "docstring": "Tracks AI-generated import fixes separately to assess performance."
    },
    {
        "name": "record_ai_feedback",
        "file": ".\\tests\\test_patch_tracking_manager.py",
        "start_line": 105,
        "end_line": 112,
        "params": [
            "self",
            "error_signature",
            "feedback",
            "quality_score"
        ],
        "docstring": "Stores AI-generated feedback on debugging effectiveness."
    },
    {
        "name": "track_ai_performance",
        "file": ".\\tests\\test_patch_tracking_manager.py",
        "start_line": 115,
        "end_line": 132,
        "params": [
            "self"
        ],
        "docstring": "Tracks AI debugging success rates and import fix performance."
    },
    {
        "name": "get_failed_patches",
        "file": ".\\tests\\test_patch_tracking_manager.py",
        "start_line": 135,
        "end_line": 137,
        "params": [
            "self",
            "error_signature"
        ],
        "docstring": "Retrieves failed patches for a specific error."
    },
    {
        "name": "get_successful_patches",
        "file": ".\\tests\\test_patch_tracking_manager.py",
        "start_line": 139,
        "end_line": 141,
        "params": [
            "self",
            "error_signature"
        ],
        "docstring": "Retrieves successful patches for a specific error."
    },
    {
        "name": "undo_last_fix",
        "file": ".\\tests\\test_patch_tracking_manager.py",
        "start_line": 143,
        "end_line": 152,
        "params": [
            "self",
            "error_signature"
        ],
        "docstring": "Rolls back the last fix for a given error signature."
    },
    {
        "name": "setup_test_project",
        "file": ".\\tests\\test_project_context_analyzer.py",
        "start_line": 20,
        "end_line": 46,
        "params": [],
        "docstring": "Sets up a mock Python project for testing."
    },
    {
        "name": "test_directory_scanning",
        "file": ".\\tests\\test_project_context_analyzer.py",
        "start_line": 49,
        "end_line": 58,
        "params": [
            "setup_test_project"
        ],
        "docstring": "Tests that Python files are detected correctly."
    },
    {
        "name": "test_docstring_extraction",
        "file": ".\\tests\\test_project_context_analyzer.py",
        "start_line": 61,
        "end_line": 78,
        "params": [
            "setup_test_project"
        ],
        "docstring": "Tests that docstrings are correctly extracted from Python files."
    },
    {
        "name": "test_dependency_mapping",
        "file": ".\\tests\\test_project_context_analyzer.py",
        "start_line": 81,
        "end_line": 99,
        "params": [
            "setup_test_project"
        ],
        "docstring": "Tests that module dependencies are correctly detected."
    },
    {
        "name": "test_project_analysis_save",
        "file": ".\\tests\\test_project_context_analyzer.py",
        "start_line": 102,
        "end_line": 117,
        "params": [
            "setup_test_project"
        ],
        "docstring": "Tests that project analysis is saved to a JSON file."
    },
    {
        "name": "describe_capabilities",
        "file": ".\\tests\\test_registry.py",
        "start_line": 19,
        "end_line": 20,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "solve_task",
        "file": ".\\tests\\test_registry.py",
        "start_line": 22,
        "end_line": 23,
        "params": [
            "self",
            "task"
        ],
        "docstring": null
    },
    {
        "name": "setUp",
        "file": ".\\tests\\test_registry.py",
        "start_line": 28,
        "end_line": 30,
        "params": [
            "self"
        ],
        "docstring": "Initialize the agent registry before each test."
    },
    {
        "name": "test_get_valid_agent",
        "file": ".\\tests\\test_registry.py",
        "start_line": 34,
        "end_line": 37,
        "params": [
            "self"
        ],
        "docstring": "Test retrieving a valid agent."
    },
    {
        "name": "test_register_agent",
        "file": ".\\tests\\test_registry.py",
        "start_line": 41,
        "end_line": 46,
        "params": [
            "self"
        ],
        "docstring": "Test registering a new agent."
    },
    {
        "name": "test_register_duplicate_agent",
        "file": ".\\tests\\test_registry.py",
        "start_line": 48,
        "end_line": 53,
        "params": [
            "self"
        ],
        "docstring": "Test that registering the same agent twice fails."
    },
    {
        "name": "test_unregister_agent",
        "file": ".\\tests\\test_registry.py",
        "start_line": 55,
        "end_line": 61,
        "params": [
            "self"
        ],
        "docstring": "Test unregistering an existing agent."
    },
    {
        "name": "test_unregister_nonexistent_agent",
        "file": ".\\tests\\test_registry.py",
        "start_line": 63,
        "end_line": 66,
        "params": [
            "self"
        ],
        "docstring": "Test unregistering a non-existent agent."
    },
    {
        "name": "test_get_valid_agent",
        "file": ".\\tests\\test_registry.py",
        "start_line": 68,
        "end_line": 71,
        "params": [
            "self"
        ],
        "docstring": "Test retrieving a valid agent."
    },
    {
        "name": "test_list_agents",
        "file": ".\\tests\\test_registry.py",
        "start_line": 73,
        "end_line": 76,
        "params": [
            "self"
        ],
        "docstring": "Test that agents are loaded correctly."
    },
    {
        "name": "test_agent_exists",
        "file": ".\\tests\\test_registry.py",
        "start_line": 78,
        "end_line": 80,
        "params": [
            "self"
        ],
        "docstring": "Test checking if an agent exists."
    },
    {
        "name": "setUpClass",
        "file": ".\\tests\\test_report_manager.py",
        "start_line": 25,
        "end_line": 32,
        "params": [
            "cls"
        ],
        "docstring": "Set up test environment before all tests."
    },
    {
        "name": "setUp",
        "file": ".\\tests\\test_report_manager.py",
        "start_line": 34,
        "end_line": 37,
        "params": [
            "self"
        ],
        "docstring": "Ensure 'reports/' directory exists and save an initial report."
    },
    {
        "name": "tearDown",
        "file": ".\\tests\\test_report_manager.py",
        "start_line": 39,
        "end_line": 56,
        "params": [
            "self"
        ],
        "docstring": "Safely remove reports and log handlers after tests."
    },
    {
        "name": "test_save_report",
        "file": ".\\tests\\test_report_manager.py",
        "start_line": 58,
        "end_line": 63,
        "params": [
            "self"
        ],
        "docstring": "Test saving a JSON report."
    },
    {
        "name": "test_load_report",
        "file": ".\\tests\\test_report_manager.py",
        "start_line": 65,
        "end_line": 72,
        "params": [
            "self"
        ],
        "docstring": "Test loading an existing report."
    },
    {
        "name": "test_list_reports",
        "file": ".\\tests\\test_report_manager.py",
        "start_line": 74,
        "end_line": 77,
        "params": [
            "self"
        ],
        "docstring": "Test listing available reports."
    },
    {
        "name": "test_search_reports_by_filename",
        "file": ".\\tests\\test_report_manager.py",
        "start_line": 79,
        "end_line": 82,
        "params": [
            "self"
        ],
        "docstring": "Test searching reports by filename."
    },
    {
        "name": "test_search_reports_by_content",
        "file": ".\\tests\\test_report_manager.py",
        "start_line": 84,
        "end_line": 87,
        "params": [
            "self"
        ],
        "docstring": "Test searching reports by content (keyword inside JSON data)."
    },
    {
        "name": "test_delete_old_reports",
        "file": ".\\tests\\test_report_manager.py",
        "start_line": 91,
        "end_line": 95,
        "params": [
            "self",
            "mock_getmtime",
            "mock_remove"
        ],
        "docstring": "Test deleting reports older than a certain threshold."
    },
    {
        "name": "test_log_entry",
        "file": ".\\tests\\test_report_manager.py",
        "start_line": 98,
        "end_line": 110,
        "params": [
            "self",
            "mock_get_logger"
        ],
        "docstring": "Test logging system with different levels."
    },
    {
        "name": "test_log_rotation",
        "file": ".\\tests\\test_report_manager.py",
        "start_line": 113,
        "end_line": 125,
        "params": [
            "self"
        ],
        "docstring": "Test log rotation mechanism to prevent oversized log files."
    },
    {
        "name": "rollback_manager",
        "file": ".\\tests\\test_rollback_manager.py",
        "start_line": 22,
        "end_line": 24,
        "params": [],
        "docstring": "Fixture to initialize RollbackManager."
    },
    {
        "name": "test_rollback_triggered_on_failure",
        "file": ".\\tests\\test_rollback_manager.py",
        "start_line": 29,
        "end_line": 35,
        "params": [
            "mock_restore_backup",
            "rollback_manager"
        ],
        "docstring": "Rollback should be triggered after multiple failed patch attempts."
    },
    {
        "name": "test_re_attempt_failed_patches_success",
        "file": ".\\tests\\test_rollback_manager.py",
        "start_line": 44,
        "end_line": 64,
        "params": [
            "mock_record_success",
            "mock_restore",
            "mock_backup",
            "mock_apply_patch",
            "mock_get_failed_patches",
            "rollback_manager"
        ],
        "docstring": "Failed patches should be retried, succeeding before falling back to AI."
    },
    {
        "name": "test_max_retry_limit",
        "file": ".\\tests\\test_rollback_manager.py",
        "start_line": 72,
        "end_line": 91,
        "params": [
            "mock_restore",
            "mock_backup",
            "mock_apply_patch",
            "mock_get_failed_patches",
            "rollback_manager"
        ],
        "docstring": "Rollback should stop retrying after reaching max retry attempts."
    },
    {
        "name": "test_macd_curl_detection",
        "file": ".\\tests\\test_tbow_scanner.py",
        "start_line": 14,
        "end_line": 28,
        "params": [
            "self",
            "mock_fetch"
        ],
        "docstring": "Test that the MACD curl is correctly detected based on mock market data."
    },
    {
        "name": "test_no_macd_curl",
        "file": ".\\tests\\test_tbow_scanner.py",
        "start_line": 31,
        "end_line": 45,
        "params": [
            "self",
            "mock_fetch"
        ],
        "docstring": "Test that no MACD curl is detected when MACD remains below signal."
    },
    {
        "name": "test_edge_case_macd_touching_signal",
        "file": ".\\tests\\test_tbow_scanner.py",
        "start_line": 48,
        "end_line": 62,
        "params": [
            "self",
            "mock_fetch"
        ],
        "docstring": "Test edge case where MACD touches the signal line but doesn't cross it."
    },
    {
        "name": "test_mismatched_data_lengths",
        "file": ".\\tests\\test_tbow_scanner.py",
        "start_line": 65,
        "end_line": 79,
        "params": [
            "self",
            "mock_fetch"
        ],
        "docstring": "Test that detection fails if MACD and signal lists have mismatched lengths."
    },
    {
        "name": "test_calculate_macd_slope",
        "file": ".\\tests\\test_tbow_scanner.py",
        "start_line": 82,
        "end_line": 97,
        "params": [
            "self",
            "mock_fetch"
        ],
        "docstring": "Test that the MACD slope is correctly calculated."
    },
    {
        "name": "test_analyze_curl_strength",
        "file": ".\\tests\\test_tbow_scanner.py",
        "start_line": 100,
        "end_line": 125,
        "params": [
            "self",
            "mock_fetch"
        ],
        "docstring": "Test that analyze_curl_strength returns the correct value when a valid MACD curl is present,\nand returns 0.0 when there is no valid curl."
    },
    {
        "name": "test_execute_trading_strategy",
        "file": ".\\tests\\test_tbow_tactic_agent.py",
        "start_line": 10,
        "end_line": 16,
        "params": [
            "self",
            "mock_trade_executor",
            "mock_scanner"
        ],
        "docstring": "Test the full agent execution pipeline."
    },
    {
        "name": "test_manage_risk",
        "file": ".\\tests\\test_tbow_tactic_agent.py",
        "start_line": 20,
        "end_line": 26,
        "params": [
            "self",
            "mock_close_position",
            "mock_get_position"
        ],
        "docstring": "Test risk management logic."
    },
    {
        "name": "test_stop_loss_trigger",
        "file": ".\\tests\\test_tbow_tactic_agent.py",
        "start_line": 30,
        "end_line": 36,
        "params": [
            "self",
            "mock_close_position",
            "mock_get_position"
        ],
        "docstring": "Test if stop-loss triggers position closure."
    },
    {
        "name": "test_place_order",
        "file": ".\\tests\\test_tbow_trade_executor.py",
        "start_line": 8,
        "end_line": 19,
        "params": [
            "self",
            "mock_alpaca"
        ],
        "docstring": "Test order placement logic with mocked Alpaca API."
    },
    {
        "name": "test_get_position",
        "file": ".\\tests\\test_tbow_trade_executor.py",
        "start_line": 22,
        "end_line": 33,
        "params": [
            "self",
            "mock_alpaca"
        ],
        "docstring": "Test retrieving position data."
    },
    {
        "name": "test_close_position",
        "file": ".\\tests\\test_tbow_trade_executor.py",
        "start_line": 36,
        "end_line": 44,
        "params": [
            "self",
            "mock_alpaca"
        ],
        "docstring": "Test closing a position."
    },
    {
        "name": "setUp",
        "file": ".\\tests\\test_test_retry_manager.py",
        "start_line": 21,
        "end_line": 31,
        "params": [
            "self"
        ],
        "docstring": "Set up a fresh instance of ReportManager for each test."
    },
    {
        "name": "tearDown",
        "file": ".\\tests\\test_test_retry_manager.py",
        "start_line": 33,
        "end_line": 50,
        "params": [
            "self"
        ],
        "docstring": "Cleanup generated test reports and release file locks."
    },
    {
        "name": "test_save_report",
        "file": ".\\tests\\test_test_retry_manager.py",
        "start_line": 52,
        "end_line": 63,
        "params": [
            "self"
        ],
        "docstring": "Test saving a JSON report."
    },
    {
        "name": "test_load_report",
        "file": ".\\tests\\test_test_retry_manager.py",
        "start_line": 65,
        "end_line": 70,
        "params": [
            "self"
        ],
        "docstring": "Test loading a JSON report."
    },
    {
        "name": "test_load_nonexistent_report",
        "file": ".\\tests\\test_test_retry_manager.py",
        "start_line": 72,
        "end_line": 74,
        "params": [
            "self"
        ],
        "docstring": "Test attempting to load a non-existent report."
    },
    {
        "name": "test_list_reports",
        "file": ".\\tests\\test_test_retry_manager.py",
        "start_line": 76,
        "end_line": 84,
        "params": [
            "self"
        ],
        "docstring": "Test listing available reports."
    },
    {
        "name": "test_search_reports",
        "file": ".\\tests\\test_test_retry_manager.py",
        "start_line": 86,
        "end_line": 110,
        "params": [
            "self"
        ],
        "docstring": "Test searching reports by keyword."
    },
    {
        "name": "test_delete_old_reports",
        "file": ".\\tests\\test_test_retry_manager.py",
        "start_line": 115,
        "end_line": 132,
        "params": [
            "self",
            "mock_remove"
        ],
        "docstring": "Test deleting reports older than a specific number of days."
    },
    {
        "name": "test_log_entry",
        "file": ".\\tests\\test_test_retry_manager.py",
        "start_line": 134,
        "end_line": 138,
        "params": [
            "self"
        ],
        "docstring": "Test structured logging of a message."
    },
    {
        "name": "setUp",
        "file": ".\\tests\\test_trading_agent.py",
        "start_line": 26,
        "end_line": 28,
        "params": [
            "self"
        ],
        "docstring": "Set up a fresh instance of TradingAgent for each test."
    },
    {
        "name": "test_initialization",
        "file": ".\\tests\\test_trading_agent.py",
        "start_line": 30,
        "end_line": 33,
        "params": [
            "self"
        ],
        "docstring": "Test if the TradingAgent initializes correctly."
    },
    {
        "name": "test_describe_capabilities",
        "file": ".\\tests\\test_trading_agent.py",
        "start_line": 35,
        "end_line": 40,
        "params": [
            "self"
        ],
        "docstring": "Test the describe_capabilities method."
    },
    {
        "name": "test_execute_trade_test_mode",
        "file": ".\\tests\\test_trading_agent.py",
        "start_line": 42,
        "end_line": 45,
        "params": [
            "self"
        ],
        "docstring": "Test execute_trade in test mode."
    },
    {
        "name": "test_execute_trade_live_mode",
        "file": ".\\tests\\test_trading_agent.py",
        "start_line": 48,
        "end_line": 58,
        "params": [
            "self",
            "mock_tradeapi"
        ],
        "docstring": "Test execute_trade in live mode with mock Alpaca API."
    },
    {
        "name": "test_execute_trade_failure",
        "file": ".\\tests\\test_trading_agent.py",
        "start_line": 61,
        "end_line": 71,
        "params": [
            "self",
            "mock_tradeapi"
        ],
        "docstring": "Test handling of trade execution failure."
    },
    {
        "name": "test_solve_task_fetch_market_data",
        "file": ".\\tests\\test_trading_agent.py",
        "start_line": 73,
        "end_line": 76,
        "params": [
            "self"
        ],
        "docstring": "Test solve_task with market data retrieval."
    },
    {
        "name": "test_solve_task_execute_trade",
        "file": ".\\tests\\test_trading_agent.py",
        "start_line": 78,
        "end_line": 83,
        "params": [
            "self"
        ],
        "docstring": "Test solve_task with execute_trade task."
    },
    {
        "name": "test_solve_task_unknown",
        "file": ".\\tests\\test_trading_agent.py",
        "start_line": 85,
        "end_line": 88,
        "params": [
            "self"
        ],
        "docstring": "Test solve_task with an unknown task."
    },
    {
        "name": "test_shutdown",
        "file": ".\\tests\\test_trading_agent.py",
        "start_line": 90,
        "end_line": 96,
        "params": [
            "self"
        ],
        "docstring": "Test that shutdown logs properly."
    },
    {
        "name": "initialize_database",
        "file": ".\\test_workspace\\ai_refactor_agent.py",
        "start_line": 23,
        "end_line": 36,
        "params": [],
        "docstring": null
    },
    {
        "name": "save_ai_suggestion",
        "file": ".\\test_workspace\\ai_refactor_agent.py",
        "start_line": 38,
        "end_line": 45,
        "params": [
            "file_name",
            "original_code",
            "ai_suggestion"
        ],
        "docstring": null
    },
    {
        "name": "get_python_files",
        "file": ".\\test_workspace\\ai_refactor_agent.py",
        "start_line": 48,
        "end_line": 64,
        "params": [],
        "docstring": "Returns a list of all Python files in the project directory,\nincluding those in subdirectories."
    },
    {
        "name": "backup_file",
        "file": ".\\test_workspace\\ai_refactor_agent.py",
        "start_line": 67,
        "end_line": 76,
        "params": [
            "file_path"
        ],
        "docstring": null
    },
    {
        "name": "restore_backup",
        "file": ".\\test_workspace\\ai_refactor_agent.py",
        "start_line": 78,
        "end_line": 85,
        "params": [
            "file_path"
        ],
        "docstring": null
    },
    {
        "name": "analyze_code_with_ollama",
        "file": ".\\test_workspace\\ai_refactor_agent.py",
        "start_line": 88,
        "end_line": 134,
        "params": [
            "file_path"
        ],
        "docstring": "Uses the Ollama CLI with the mistral:latest model to analyze and refactor code.\nReturns a tuple (original_code, ai_suggestion) if successful; otherwise, (original_code, None)."
    },
    {
        "name": "process_file",
        "file": ".\\test_workspace\\ai_refactor_agent.py",
        "start_line": 136,
        "end_line": 147,
        "params": [
            "file_path"
        ],
        "docstring": null
    },
    {
        "name": "refactor_files",
        "file": ".\\test_workspace\\ai_refactor_agent.py",
        "start_line": 149,
        "end_line": 158,
        "params": [],
        "docstring": null
    },
    {
        "name": "get_human_feedback",
        "file": ".\\test_workspace\\ai_refactor_agent.py",
        "start_line": 161,
        "end_line": 166,
        "params": [],
        "docstring": null
    },
    {
        "name": "submit_human_feedback",
        "file": ".\\test_workspace\\ai_refactor_agent.py",
        "start_line": 168,
        "end_line": 172,
        "params": [
            "review_id",
            "feedback"
        ],
        "docstring": null
    },
    {
        "name": "review_pending_suggestions",
        "file": ".\\test_workspace\\ai_refactor_agent.py",
        "start_line": 174,
        "end_line": 192,
        "params": [],
        "docstring": null
    },
    {
        "name": "update_performance_log",
        "file": ".\\test_workspace\\ai_refactor_agent.py",
        "start_line": 195,
        "end_line": 212,
        "params": [
            "refactored_files"
        ],
        "docstring": null
    },
    {
        "name": "run_agent",
        "file": ".\\test_workspace\\ai_refactor_agent.py",
        "start_line": 214,
        "end_line": 216,
        "params": [],
        "docstring": null
    },
    {
        "name": "refactor_function_with_ai",
        "file": ".\\test_workspace\\ai_refactor_agent.py",
        "start_line": 219,
        "end_line": 242,
        "params": [
            "function_data"
        ],
        "docstring": "Uses AI (Ollama) to refactor a function and return the improved version."
    },
    {
        "name": "apply_refactored_function",
        "file": ".\\test_workspace\\ai_refactor_agent.py",
        "start_line": 244,
        "end_line": 255,
        "params": [
            "original_function",
            "refactored_function"
        ],
        "docstring": "Replaces the original function with the refactored version in the source file."
    },
    {
        "name": "iteratively_refactor_project",
        "file": ".\\test_workspace\\ai_refactor_agent.py",
        "start_line": 257,
        "end_line": 284,
        "params": [],
        "docstring": "Iteratively improves the project function by function.\nExtracts function definitions from 'function_map.json', refactors each function,\nand applies changes if tests pass."
    },
    {
        "name": "scan_directory",
        "file": ".\\test_workspace\\ai_refactor_agent.py",
        "start_line": 55,
        "end_line": 61,
        "params": [
            "directory"
        ],
        "docstring": null
    },
    {
        "name": "extract_functions_from_file",
        "file": ".\\test_workspace\\ai_test_agent.py",
        "start_line": 22,
        "end_line": 44,
        "params": [
            "file_path"
        ],
        "docstring": "Extracts function definitions from a Python file using AST."
    },
    {
        "name": "scan_project_for_functions",
        "file": ".\\test_workspace\\ai_test_agent.py",
        "start_line": 46,
        "end_line": 56,
        "params": [
            "project_path"
        ],
        "docstring": "Scans all Python files in the project and extracts function definitions."
    },
    {
        "name": "create_function_map",
        "file": ".\\test_workspace\\ai_test_agent.py",
        "start_line": 58,
        "end_line": 63,
        "params": [],
        "docstring": "Generates the function map and saves it to FUNCTION_MAP_FILE."
    },
    {
        "name": "__init__",
        "file": ".\\test_workspace\\ai_test_agent.py",
        "start_line": 78,
        "end_line": 81,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "run_coverage",
        "file": ".\\test_workspace\\ai_test_agent.py",
        "start_line": 83,
        "end_line": 96,
        "params": [
            "self"
        ],
        "docstring": "Runs pytest with coverage to generate an HTML report."
    },
    {
        "name": "load_function_map",
        "file": ".\\test_workspace\\ai_test_agent.py",
        "start_line": 98,
        "end_line": 108,
        "params": [
            "self"
        ],
        "docstring": "Loads the function map from FUNCTION_MAP_FILE."
    },
    {
        "name": "generate_tests_for_function",
        "file": ".\\test_workspace\\ai_test_agent.py",
        "start_line": 110,
        "end_line": 151,
        "params": [
            "self",
            "function_data",
            "retry_count"
        ],
        "docstring": "Uses AI (via Ollama) to generate pytest unit tests for a given function.\nAutomatically refines the prompt on failure."
    },
    {
        "name": "save_generated_tests",
        "file": ".\\test_workspace\\ai_test_agent.py",
        "start_line": 153,
        "end_line": 160,
        "params": [
            "self",
            "test_code"
        ],
        "docstring": "Appends the generated tests to the designated tests file."
    },
    {
        "name": "run_generated_tests",
        "file": ".\\test_workspace\\ai_test_agent.py",
        "start_line": 162,
        "end_line": 171,
        "params": [
            "self"
        ],
        "docstring": "Runs the generated tests using pytest and returns the output."
    },
    {
        "name": "debug_failed_tests",
        "file": ".\\test_workspace\\ai_test_agent.py",
        "start_line": 173,
        "end_line": 198,
        "params": [
            "self",
            "error_logs"
        ],
        "docstring": "Uses AI to generate debugging suggestions based on test error logs."
    },
    {
        "name": "test_and_debug_mode",
        "file": ".\\test_workspace\\ai_test_agent.py",
        "start_line": 200,
        "end_line": 244,
        "params": [
            "self"
        ],
        "docstring": "Runs the complete test and debug process:\n  1. Runs coverage analysis.\n  2. Loads (or creates) the function map and extracts each function's code.\n  3. For each function, uses AI to generate tests.\n  4. Saves the generated tests.\n  5. Runs the generated tests.\n  6. If tests fail, recursively reattempts test generation (self-healing) and generates debug suggestions."
    },
    {
        "name": "extract_functions_from_file",
        "file": ".\\test_workspace\\extract_functions.py",
        "start_line": 5,
        "end_line": 25,
        "params": [
            "file_path"
        ],
        "docstring": "Extracts function definitions from a Python file."
    },
    {
        "name": "scan_project_for_functions",
        "file": ".\\test_workspace\\extract_functions.py",
        "start_line": 27,
        "end_line": 39,
        "params": [
            "project_path"
        ],
        "docstring": "Scans all Python files in the project and extracts function definitions."
    },
    {
        "name": "initialize_database",
        "file": ".\\test_workspace\\initialize_db.py",
        "start_line": 5,
        "end_line": 18,
        "params": [],
        "docstring": "Creates the required database table if it doesn't exist."
    },
    {
        "name": "run_linters",
        "file": ".\\test_workspace\\run_linter.py",
        "start_line": 3,
        "end_line": 12,
        "params": [],
        "docstring": "Runs Ruff, Black, and Pylint for AI-driven linting and formatting."
    },
    {
        "name": "test_ai_refactoring",
        "file": ".\\test_workspace\\test_ai_refactor.py",
        "start_line": 4,
        "end_line": 10,
        "params": [],
        "docstring": null
    },
    {
        "name": "test_agent",
        "file": ".\\test_workspace\\test_ai_test_agent.py",
        "start_line": 7,
        "end_line": 8,
        "params": [],
        "docstring": null
    },
    {
        "name": "test_run_coverage",
        "file": ".\\test_workspace\\test_ai_test_agent.py",
        "start_line": 10,
        "end_line": 13,
        "params": [
            "test_agent"
        ],
        "docstring": "Ensure that coverage analysis runs and returns output."
    },
    {
        "name": "test_load_function_map",
        "file": ".\\test_workspace\\test_ai_test_agent.py",
        "start_line": 15,
        "end_line": 21,
        "params": [
            "test_agent"
        ],
        "docstring": "Ensure the function map loads or is created."
    },
    {
        "name": "test_generate_tests_for_function",
        "file": ".\\test_workspace\\test_ai_test_agent.py",
        "start_line": 23,
        "end_line": 32,
        "params": [
            "test_agent"
        ],
        "docstring": "Ensure AI generates valid test code for a sample function."
    },
    {
        "name": "test_save_and_run_generated_tests",
        "file": ".\\test_workspace\\test_ai_test_agent.py",
        "start_line": 34,
        "end_line": 45,
        "params": [
            "test_agent"
        ],
        "docstring": "Ensure that generated tests are saved properly and run without failures."
    },
    {
        "name": "test_debug_failed_tests",
        "file": ".\\test_workspace\\test_ai_test_agent.py",
        "start_line": 47,
        "end_line": 51,
        "params": [
            "test_agent"
        ],
        "docstring": "Ensure that debug suggestions are generated for a fake error log."
    },
    {
        "name": "test_database",
        "file": ".\\test_workspace\\test_database.py",
        "start_line": 6,
        "end_line": 24,
        "params": [],
        "docstring": null
    },
    {
        "name": "test_file_handling",
        "file": ".\\test_workspace\\test_file_handling.py",
        "start_line": 5,
        "end_line": 27,
        "params": [],
        "docstring": null
    },
    {
        "name": "test_human_review",
        "file": ".\\test_workspace\\test_human_review.py",
        "start_line": 3,
        "end_line": 12,
        "params": [],
        "docstring": null
    },
    {
        "name": "__init__",
        "file": ".\\ui\\debugger_dashboard.py",
        "start_line": 34,
        "end_line": 91,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "load_json",
        "file": ".\\ui\\debugger_dashboard.py",
        "start_line": 93,
        "end_line": 101,
        "params": [
            "self",
            "file_path"
        ],
        "docstring": "Helper to safely load JSON files."
    },
    {
        "name": "save_json",
        "file": ".\\ui\\debugger_dashboard.py",
        "start_line": 103,
        "end_line": 109,
        "params": [
            "self",
            "file_path",
            "data"
        ],
        "docstring": "Helper to safely save JSON files."
    },
    {
        "name": "update_dashboard",
        "file": ".\\ui\\debugger_dashboard.py",
        "start_line": 111,
        "end_line": 135,
        "params": [
            "self"
        ],
        "docstring": "Fetches latest data and updates the UI."
    },
    {
        "name": "handle_import_fix",
        "file": ".\\ui\\debugger_dashboard.py",
        "start_line": 137,
        "end_line": 152,
        "params": [
            "self",
            "row",
            "column"
        ],
        "docstring": "Automatically fixes import errors when clicking the table."
    },
    {
        "name": "apply_import_fix",
        "file": ".\\ui\\debugger_dashboard.py",
        "start_line": 154,
        "end_line": 168,
        "params": [
            "self",
            "module",
            "suggested_fix"
        ],
        "docstring": "Applies an import fix directly to source files and commits to Git."
    },
    {
        "name": "modify_source_file",
        "file": ".\\ui\\debugger_dashboard.py",
        "start_line": 170,
        "end_line": 195,
        "params": [
            "self",
            "file_path",
            "module",
            "suggested_fix"
        ],
        "docstring": "Modifies the actual Python file to apply the import fix."
    },
    {
        "name": "commit_to_git",
        "file": ".\\ui\\debugger_dashboard.py",
        "start_line": 197,
        "end_line": 203,
        "params": [
            "self",
            "file_path",
            "message"
        ],
        "docstring": "Commits the applied fix to Git."
    },
    {
        "name": "undo_selected_fix",
        "file": ".\\ui\\debugger_dashboard.py",
        "start_line": 205,
        "end_line": 216,
        "params": [
            "self"
        ],
        "docstring": "Restores the original version of a file before the fix."
    },
    {
        "name": "main",
        "file": ".\\ui\\FixForge.py",
        "start_line": 324,
        "end_line": 329,
        "params": [],
        "docstring": null
    },
    {
        "name": "generate_patch",
        "file": ".\\ui\\FixForge.py",
        "start_line": 17,
        "end_line": 18,
        "params": [
            "self",
            "error",
            "file"
        ],
        "docstring": null
    },
    {
        "name": "apply_patch",
        "file": ".\\ui\\FixForge.py",
        "start_line": 20,
        "end_line": 22,
        "params": [
            "self",
            "patch"
        ],
        "docstring": null
    },
    {
        "name": "__init__",
        "file": ".\\ui\\FixForge.py",
        "start_line": 32,
        "end_line": 34,
        "params": [
            "self",
            "parent"
        ],
        "docstring": null
    },
    {
        "name": "init_ui",
        "file": ".\\ui\\FixForge.py",
        "start_line": 36,
        "end_line": 57,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "run_setup",
        "file": ".\\ui\\FixForge.py",
        "start_line": 59,
        "end_line": 65,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "__init__",
        "file": ".\\ui\\FixForge.py",
        "start_line": 69,
        "end_line": 71,
        "params": [
            "self",
            "parent"
        ],
        "docstring": null
    },
    {
        "name": "init_ui",
        "file": ".\\ui\\FixForge.py",
        "start_line": 73,
        "end_line": 102,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "apply_fix",
        "file": ".\\ui\\FixForge.py",
        "start_line": 104,
        "end_line": 116,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "__init__",
        "file": ".\\ui\\FixForge.py",
        "start_line": 120,
        "end_line": 123,
        "params": [
            "self",
            "parent"
        ],
        "docstring": null
    },
    {
        "name": "init_ui",
        "file": ".\\ui\\FixForge.py",
        "start_line": 125,
        "end_line": 173,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "start_session",
        "file": ".\\ui\\FixForge.py",
        "start_line": 175,
        "end_line": 185,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "document_resolution",
        "file": ".\\ui\\FixForge.py",
        "start_line": 187,
        "end_line": 196,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "summarize_session",
        "file": ".\\ui\\FixForge.py",
        "start_line": 198,
        "end_line": 207,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "perform_backup",
        "file": ".\\ui\\FixForge.py",
        "start_line": 209,
        "end_line": 214,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "__init__",
        "file": ".\\ui\\FixForge.py",
        "start_line": 218,
        "end_line": 221,
        "params": [
            "self",
            "parent"
        ],
        "docstring": null
    },
    {
        "name": "init_ui",
        "file": ".\\ui\\FixForge.py",
        "start_line": 223,
        "end_line": 251,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "load_json",
        "file": ".\\ui\\FixForge.py",
        "start_line": 253,
        "end_line": 262,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "populate_tree",
        "file": ".\\ui\\FixForge.py",
        "start_line": 264,
        "end_line": 291,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "filter_tree",
        "file": ".\\ui\\FixForge.py",
        "start_line": 293,
        "end_line": 297,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "filter_item",
        "file": ".\\ui\\FixForge.py",
        "start_line": 299,
        "end_line": 307,
        "params": [
            "self",
            "item",
            "search_text"
        ],
        "docstring": null
    },
    {
        "name": "__init__",
        "file": ".\\ui\\FixForge.py",
        "start_line": 311,
        "end_line": 314,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "init_ui",
        "file": ".\\ui\\FixForge.py",
        "start_line": 316,
        "end_line": 322,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "add_items",
        "file": ".\\ui\\FixForge.py",
        "start_line": 275,
        "end_line": 285,
        "params": [
            "parent_item",
            "dictionary"
        ],
        "docstring": null
    },
    {
        "name": "__init__",
        "file": ".\\utils\\scheduler.py",
        "start_line": 12,
        "end_line": 13,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "schedule_task",
        "file": ".\\utils\\scheduler.py",
        "start_line": 15,
        "end_line": 31,
        "params": [
            "self",
            "func",
            "interval"
        ],
        "docstring": "Schedules a function to run at a set interval.\n\nArgs:\n    func (function): The function to execute.\n    interval (int): Time in minutes."
    },
    {
        "name": "job",
        "file": ".\\utils\\scheduler.py",
        "start_line": 23,
        "end_line": 27,
        "params": [],
        "docstring": null
    },
    {
        "name": "__init__",
        "file": ".\\_SRC FILES\\AgentActorTesting.py",
        "start_line": 11,
        "end_line": 14,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "__getattr__",
        "file": ".\\_SRC FILES\\AgentActorTesting.py",
        "start_line": 16,
        "end_line": 18,
        "params": [
            "self",
            "item"
        ],
        "docstring": "Simulate missing tools by raising an AttributeError."
    },
    {
        "name": "execute_code",
        "file": ".\\_SRC FILES\\AgentActorTesting.py",
        "start_line": 22,
        "end_line": 25,
        "params": [
            "self",
            "code"
        ],
        "docstring": null
    },
    {
        "name": "execute_command",
        "file": ".\\_SRC FILES\\AgentActorTesting.py",
        "start_line": 29,
        "end_line": 34,
        "params": [
            "self",
            "command"
        ],
        "docstring": null
    },
    {
        "name": "generate_content",
        "file": ".\\_SRC FILES\\AgentActorTesting.py",
        "start_line": 38,
        "end_line": 44,
        "params": [
            "self",
            "topic"
        ],
        "docstring": null
    },
    {
        "name": "schedule_content",
        "file": ".\\_SRC FILES\\AgentActorTesting.py",
        "start_line": 47,
        "end_line": 48,
        "params": [
            "self",
            "content",
            "time"
        ],
        "docstring": null
    },
    {
        "name": "post_content",
        "file": ".\\_SRC FILES\\AgentActorTesting.py",
        "start_line": 50,
        "end_line": 51,
        "params": [
            "self",
            "content"
        ],
        "docstring": null
    },
    {
        "name": "__init__",
        "file": ".\\_SRC FILES\\AgentActorTesting.py",
        "start_line": 59,
        "end_line": 62,
        "params": [
            "self",
            "tool_server",
            "memory_manager",
            "performance_monitor"
        ],
        "docstring": null
    },
    {
        "name": "solve_task",
        "file": ".\\_SRC FILES\\AgentActorTesting.py",
        "start_line": 64,
        "end_line": 75,
        "params": [
            "self",
            "task"
        ],
        "docstring": "Executes a given task as Python code, a shell command, or a content automation task."
    },
    {
        "name": "_execute_shell_task",
        "file": ".\\_SRC FILES\\AgentActorTesting.py",
        "start_line": 77,
        "end_line": 82,
        "params": [
            "self",
            "command"
        ],
        "docstring": "Executes a shell command safely and handles errors."
    },
    {
        "name": "_execute_content_task",
        "file": ".\\_SRC FILES\\AgentActorTesting.py",
        "start_line": 84,
        "end_line": 98,
        "params": [
            "self",
            "task"
        ],
        "docstring": "Handles content automation commands."
    },
    {
        "name": "utilize_tool",
        "file": ".\\_SRC FILES\\AgentActorTesting.py",
        "start_line": 100,
        "end_line": 114,
        "params": [
            "self",
            "tool_name",
            "operation",
            "parameters"
        ],
        "docstring": "Executes an operation on a specified tool within ToolServer."
    },
    {
        "name": "setUp",
        "file": ".\\_SRC FILES\\AgentActorTesting.py",
        "start_line": 121,
        "end_line": 123,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "test_solve_task_python",
        "file": ".\\_SRC FILES\\AgentActorTesting.py",
        "start_line": 125,
        "end_line": 128,
        "params": [
            "self"
        ],
        "docstring": "Test executing a Python task."
    },
    {
        "name": "test_solve_task_shell",
        "file": ".\\_SRC FILES\\AgentActorTesting.py",
        "start_line": 130,
        "end_line": 133,
        "params": [
            "self"
        ],
        "docstring": "Test executing a shell command."
    },
    {
        "name": "test_solve_task_invalid",
        "file": ".\\_SRC FILES\\AgentActorTesting.py",
        "start_line": 135,
        "end_line": 138,
        "params": [
            "self"
        ],
        "docstring": "Test handling of an invalid shell command."
    },
    {
        "name": "test_solve_task_content_generate",
        "file": ".\\_SRC FILES\\AgentActorTesting.py",
        "start_line": 140,
        "end_line": 144,
        "params": [
            "self"
        ],
        "docstring": "Test generating content."
    },
    {
        "name": "test_solve_task_content_post",
        "file": ".\\_SRC FILES\\AgentActorTesting.py",
        "start_line": 147,
        "end_line": 150,
        "params": [
            "self"
        ],
        "docstring": "Test posting content."
    },
    {
        "name": "__init__",
        "file": ".\\_SRC FILES\\ai_agent.py",
        "start_line": 2,
        "end_line": 3,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "register_plugin",
        "file": ".\\_SRC FILES\\ai_agent.py",
        "start_line": 5,
        "end_line": 7,
        "params": [
            "self",
            "name",
            "plugin"
        ],
        "docstring": "Registers a plugin with the agent."
    },
    {
        "name": "execute",
        "file": ".\\_SRC FILES\\ai_agent.py",
        "start_line": 9,
        "end_line": 13,
        "params": [
            "self",
            "plugin_name",
            "command"
        ],
        "docstring": "Executes a command using the specified plugin."
    },
    {
        "name": "__init__",
        "file": ".\\_SRC FILES\\agents\\core\\1AgentDispatcher.py",
        "start_line": 77,
        "end_line": 87,
        "params": [
            "self",
            "rate_limit",
            "time_window"
        ],
        "docstring": "Initializes the RateLimiter.\n\nArgs:\n    rate_limit (int): Max number of tasks allowed in the time window.\n    time_window (int): Time window in seconds for rate limit."
    },
    {
        "name": "release",
        "file": ".\\_SRC FILES\\agents\\core\\1AgentDispatcher.py",
        "start_line": 102,
        "end_line": 105,
        "params": [
            "self"
        ],
        "docstring": "Releases a token back to the bucket."
    },
    {
        "name": "__init__",
        "file": ".\\_SRC FILES\\agents\\core\\1AgentDispatcher.py",
        "start_line": 114,
        "end_line": 145,
        "params": [
            "self",
            "agents_directory",
            "model_name",
            "ollama_url",
            "max_retries"
        ],
        "docstring": "Initializes the AgentDispatcher with necessary utilities and dynamically loads agents.\n\nArgs:\n    agents_directory (str): The directory where agent plugin modules are located.\n    model_name (str): The name of the Mistral model configured in Ollama.\n    ollama_url (str): The base URL for the Ollama API.\n    max_retries (int): Maximum number of retries for task execution."
    },
    {
        "name": "load_agents",
        "file": ".\\_SRC FILES\\agents\\core\\1AgentDispatcher.py",
        "start_line": 147,
        "end_line": 197,
        "params": [
            "self",
            "agents_directory"
        ],
        "docstring": "Loads agent plugins from the specified directory.\n\nArgs:\n    agents_directory (str): Directory containing agent plugin modules.\n\nReturns:\n    Dict[str, AgentPlugin]: Loaded agent instances."
    },
    {
        "name": "add_agent",
        "file": ".\\_SRC FILES\\agents\\core\\1AgentDispatcher.py",
        "start_line": 438,
        "end_line": 447,
        "params": [
            "self",
            "agent_instance"
        ],
        "docstring": "Adds a new agent to the dispatcher dynamically.\n\nArgs:\n    agent_instance (AgentPlugin): The agent instance to add."
    },
    {
        "name": "remove_agent",
        "file": ".\\_SRC FILES\\agents\\core\\1AgentDispatcher.py",
        "start_line": 449,
        "end_line": 461,
        "params": [
            "self",
            "agent_name"
        ],
        "docstring": "Removes an agent from the dispatcher.\n\nArgs:\n    agent_name (str): The name of the agent to remove."
    },
    {
        "name": "list_agents",
        "file": ".\\_SRC FILES\\agents\\core\\1AgentDispatcher.py",
        "start_line": 463,
        "end_line": 479,
        "params": [
            "self"
        ],
        "docstring": "Lists all registered agents.\n\nReturns:\n    List[str]: Names of all agents currently available."
    },
    {
        "name": "_send_alert",
        "file": ".\\_SRC FILES\\agents\\core\\1AgentDispatcher.py",
        "start_line": 528,
        "end_line": 536,
        "params": [
            "self",
            "message"
        ],
        "docstring": "Sends an alert for critical failures.\n\nArgs:\n    message (str): Alert message."
    },
    {
        "name": "__init__",
        "file": ".\\_SRC FILES\\agents\\core\\1AgentDispatcher.py",
        "start_line": 548,
        "end_line": 575,
        "params": [
            "self",
            "name",
            "project_name",
            "memory_manager",
            "performance_monitor",
            "dispatcher"
        ],
        "docstring": "Initialize the AI agent with a name, project name, a MemoryManager instance,\nand a PerformanceMonitor instance.\n\nArgs:\n    name (str): Name of the AI agent.\n    project_name (str): Name of the project/domain the agent is associated with.\n    memory_manager (MemoryManager): Instance of MemoryManager for handling memory operations.\n    performance_monitor (PerformanceMonitor): Instance of PerformanceMonitor for tracking performance.\n    dispatcher (AgentDispatcher): Reference to the dispatcher for self-improvement actions."
    },
    {
        "name": "describe_capabilities",
        "file": ".\\_SRC FILES\\agents\\core\\1AgentDispatcher.py",
        "start_line": 632,
        "end_line": 644,
        "params": [
            "self"
        ],
        "docstring": "Returns a description of the agent's capabilities.\n\nReturns:\n    str: Capabilities description."
    },
    {
        "name": "self_improve",
        "file": ".\\_SRC FILES\\agents\\core\\1AgentDispatcher.py",
        "start_line": 646,
        "end_line": 680,
        "params": [
            "self"
        ],
        "docstring": "Analyze performance and adjust operations to improve future interactions.\nThis method embodies the self-improvement capability of the AI agent."
    },
    {
        "name": "take_action_based_on_failure",
        "file": ".\\_SRC FILES\\agents\\core\\1AgentDispatcher.py",
        "start_line": 682,
        "end_line": 703,
        "params": [
            "self",
            "reason"
        ],
        "docstring": "Takes specific actions based on the identified failure reason.\n\nArgs:\n    reason (str): The most common failure reason."
    },
    {
        "name": "suggest_improvements",
        "file": ".\\_SRC FILES\\agents\\core\\1AgentDispatcher.py",
        "start_line": 705,
        "end_line": 728,
        "params": [
            "self"
        ],
        "docstring": "Suggests improvements to its own operations based on performance data."
    },
    {
        "name": "__init__",
        "file": ".\\_SRC FILES\\agents\\core\\1agent_actor.py",
        "start_line": 12,
        "end_line": 24,
        "params": [
            "self",
            "tool_server",
            "memory_manager",
            "performance_monitor"
        ],
        "docstring": "Initializes AgentActor with tool server, memory, and performance monitoring.\n\nArgs:\n    tool_server: The ToolServer instance to manage tools.\n    memory_manager: Instance for managing task memory.\n    performance_monitor: Instance for tracking performance metrics."
    },
    {
        "name": "solve_task",
        "file": ".\\_SRC FILES\\agents\\core\\1agent_actor.py",
        "start_line": 26,
        "end_line": 49,
        "params": [
            "self",
            "task"
        ],
        "docstring": "Executes a given task as either Python code or shell command.\n\nArgs:\n    task (str): The task to execute. Prefix 'python:' for Python code execution.\n\nReturns:\n    str: Result of the task execution."
    },
    {
        "name": "_execute_python_task",
        "file": ".\\_SRC FILES\\agents\\core\\1agent_actor.py",
        "start_line": 51,
        "end_line": 68,
        "params": [
            "self",
            "python_code"
        ],
        "docstring": "Executes Python code within the PythonNotebook environment.\n\nArgs:\n    python_code (str): The Python code to execute.\n\nReturns:\n    str: Result or error message from Python execution."
    },
    {
        "name": "_execute_shell_task",
        "file": ".\\_SRC FILES\\agents\\core\\1agent_actor.py",
        "start_line": 70,
        "end_line": 87,
        "params": [
            "self",
            "command"
        ],
        "docstring": "Executes a shell command using the ToolServer's shell tool.\n\nArgs:\n    command (str): The shell command to execute.\n\nReturns:\n    str: Command output or error message."
    },
    {
        "name": "utilize_tool",
        "file": ".\\_SRC FILES\\agents\\core\\1agent_actor.py",
        "start_line": 89,
        "end_line": 114,
        "params": [
            "self",
            "tool_name",
            "operation",
            "parameters"
        ],
        "docstring": "Executes an operation on a specified tool within ToolServer.\n\nArgs:\n    tool_name (str): Name of the tool in ToolServer.\n    operation (str): The operation method to call on the tool.\n    parameters (Dict[str, Any]): Dictionary of parameters for the operation.\n\nReturns:\n    Any: Result of the tool operation or error message."
    },
    {
        "name": "__init__",
        "file": ".\\_SRC FILES\\agents\\core\\1CustomAgent.py",
        "start_line": 19,
        "end_line": 28,
        "params": [
            "self",
            "name",
            "project_name"
        ],
        "docstring": "Initializes the CustomAgent, setting up logging and required resources.\n\nArgs:\n    name (str): Name of the agent (default is \"CustomAgent\").\n    project_name (str): Project or domain the agent is associated with."
    },
    {
        "name": "solve_task",
        "file": ".\\_SRC FILES\\agents\\core\\1CustomAgent.py",
        "start_line": 30,
        "end_line": 49,
        "params": [
            "self",
            "task"
        ],
        "docstring": "Executes a custom-defined task, handling errors gracefully.\n\nArgs:\n    task (str): The main task description.\n    **kwargs: Additional arguments required for task execution.\n\nReturns:\n    Any: Result of the executed task or error message if task fails."
    },
    {
        "name": "perform_task_logic",
        "file": ".\\_SRC FILES\\agents\\core\\1CustomAgent.py",
        "start_line": 51,
        "end_line": 67,
        "params": [
            "self",
            "task"
        ],
        "docstring": "Implements the core logic for task execution.\n\nArgs:\n    task (str): Description of the task.\n    **kwargs: Additional parameters for task-specific logic.\n\nReturns:\n    str: Message indicating task completion."
    },
    {
        "name": "describe_capabilities",
        "file": ".\\_SRC FILES\\agents\\core\\1CustomAgent.py",
        "start_line": 69,
        "end_line": 78,
        "params": [
            "self"
        ],
        "docstring": "Provides a description of the agent\u2019s capabilities.\n\nReturns:\n    str: Description of what the agent can do."
    },
    {
        "name": "shutdown",
        "file": ".\\_SRC FILES\\agents\\core\\1CustomAgent.py",
        "start_line": 80,
        "end_line": 84,
        "params": [
            "self"
        ],
        "docstring": "Shuts down the agent, releasing any allocated resources."
    },
    {
        "name": "__init__",
        "file": ".\\_SRC FILES\\agents\\core\\1DebuggerAgent.py",
        "start_line": 19,
        "end_line": 27,
        "params": [
            "self",
            "name"
        ],
        "docstring": "Initializes the DebuggerAgent, preparing it for various debugging operations.\n\nArgs:\n    name (str): The name of the agent (default is \"DebuggerAgent\")."
    },
    {
        "name": "solve_task",
        "file": ".\\_SRC FILES\\agents\\core\\1DebuggerAgent.py",
        "start_line": 29,
        "end_line": 52,
        "params": [
            "self",
            "task"
        ],
        "docstring": "Executes a debugging task based on the provided task type.\n\nArgs:\n    task (str): Type of debugging task (e.g., 'analyze_error', 'run_diagnostics').\n    **kwargs: Additional arguments specific to the task.\n\nReturns:\n    Any: Result of the debugging task or an error message if the task is unknown."
    },
    {
        "name": "analyze_error",
        "file": ".\\_SRC FILES\\agents\\core\\1DebuggerAgent.py",
        "start_line": 54,
        "end_line": 73,
        "params": [
            "self",
            "error",
            "context"
        ],
        "docstring": "Analyzes an error message, providing diagnostics and potential resolution steps.\n\nArgs:\n    error (Optional[str]): Error message to analyze.\n    context (Optional[Dict[str, Any]]): Additional context for error analysis (e.g., environment details).\n\nReturns:\n    str: Analysis result or a message if no error is provided."
    },
    {
        "name": "run_diagnostics",
        "file": ".\\_SRC FILES\\agents\\core\\1DebuggerAgent.py",
        "start_line": 75,
        "end_line": 96,
        "params": [
            "self",
            "system_check",
            "detailed"
        ],
        "docstring": "Runs system diagnostics, with options for basic or detailed checks.\n\nArgs:\n    system_check (bool): If True, perform system-level diagnostics.\n    detailed (bool): If True, include detailed diagnostic information.\n\nReturns:\n    str: Diagnostic results."
    },
    {
        "name": "describe_capabilities",
        "file": ".\\_SRC FILES\\agents\\core\\1DebuggerAgent.py",
        "start_line": 98,
        "end_line": 110,
        "params": [
            "self"
        ],
        "docstring": "Provides a summary of the agent's debugging capabilities.\n\nReturns:\n    str: Description of the agent's debugging functionalities."
    },
    {
        "name": "shutdown",
        "file": ".\\_SRC FILES\\agents\\core\\1DebuggerAgent.py",
        "start_line": 112,
        "end_line": 116,
        "params": [
            "self"
        ],
        "docstring": "Gracefully shuts down the agent, releasing any resources if necessary."
    },
    {
        "name": "__init__",
        "file": ".\\_SRC FILES\\agents\\core\\1journal_agent.py",
        "start_line": 37,
        "end_line": 48,
        "params": [
            "self",
            "name",
            "description"
        ],
        "docstring": "Initializes the JournalAgent with default parameters.\n\nArgs:\n    name (str): The agent's name.\n    description (str): A short description of the agent's purpose."
    },
    {
        "name": "create_journal_entry",
        "file": ".\\_SRC FILES\\agents\\core\\1journal_agent.py",
        "start_line": 50,
        "end_line": 80,
        "params": [
            "self",
            "title",
            "content",
            "tags"
        ],
        "docstring": "Creates a new journal entry with title, content, and optional tags.\n\nArgs:\n    title (str): The title of the journal entry.\n    content (str): The main content of the journal entry.\n    tags (Optional[List[str]]): Tags associated with the entry.\n\nReturns:\n    Dict[str, Any]: Metadata of the created entry, including file path and timestamp."
    },
    {
        "name": "retrieve_journal_entry",
        "file": ".\\_SRC FILES\\agents\\core\\1journal_agent.py",
        "start_line": 82,
        "end_line": 106,
        "params": [
            "self",
            "title"
        ],
        "docstring": "Retrieves a journal entry by title from the journal directory.\n\nArgs:\n    title (str): Title of the journal entry to retrieve.\n\nReturns:\n    Dict[str, Any]: The content of the journal entry if found, otherwise an error message."
    },
    {
        "name": "update_journal_entry",
        "file": ".\\_SRC FILES\\agents\\core\\1journal_agent.py",
        "start_line": 108,
        "end_line": 135,
        "params": [
            "self",
            "title",
            "new_content"
        ],
        "docstring": "Updates an existing journal entry with new content.\n\nArgs:\n    title (str): Title of the journal entry to update.\n    new_content (str): New content to update in the journal entry.\n\nReturns:\n    Dict[str, Any]: Success message with the updated timestamp or error message."
    },
    {
        "name": "delete_journal_entry",
        "file": ".\\_SRC FILES\\agents\\core\\1journal_agent.py",
        "start_line": 137,
        "end_line": 159,
        "params": [
            "self",
            "title"
        ],
        "docstring": "Deletes a journal entry by title.\n\nArgs:\n    title (str): Title of the journal entry to delete.\n\nReturns:\n    Dict[str, str]: Success or error message."
    },
    {
        "name": "list_journal_entries",
        "file": ".\\_SRC FILES\\agents\\core\\1journal_agent.py",
        "start_line": 161,
        "end_line": 176,
        "params": [
            "self"
        ],
        "docstring": "Lists all journal entries in the journal directory.\n\nReturns:\n    List[Dict[str, str]]: A list of journal entry metadata including titles and timestamps."
    },
    {
        "name": "perform_task",
        "file": ".\\_SRC FILES\\agents\\core\\1journal_agent.py",
        "start_line": 178,
        "end_line": 215,
        "params": [
            "self",
            "task_data"
        ],
        "docstring": "Executes a journal-related task based on task_data.\n\nArgs:\n    task_data (Dict[str, Any]): Information necessary for the task execution, with keys like \"action\", \"title\", etc.\n\nReturns:\n    str: Outcome of the task."
    },
    {
        "name": "solve_task",
        "file": ".\\_SRC FILES\\agents\\core\\AgentPlanner.py",
        "start_line": 13,
        "end_line": 35,
        "params": [
            "self",
            "task",
            "priority",
            "milestone_criteria"
        ],
        "docstring": "Plans the main task by dividing it into subtasks with assigned priorities and identifying milestones.\n\nArgs:\n    task (str): The primary task to organize.\n    priority (Optional[str]): Priority level for subtasks (default is 'Medium').\n    milestone_criteria (Optional[str]): Keyword to designate specific subtasks as milestones.\n\nReturns:\n    Dict[str, List[Dict[str, str]]]: Contains 'subtasks' with priorities and 'milestones'."
    },
    {
        "name": "divide_task",
        "file": ".\\_SRC FILES\\agents\\core\\AgentPlanner.py",
        "start_line": 37,
        "end_line": 51,
        "params": [
            "self",
            "task",
            "priority"
        ],
        "docstring": "Splits the main task into a list of subtasks, each assigned a specified priority.\n\nArgs:\n    task (str): The main task to split.\n    priority (str): Priority level for each subtask.\n\nReturns:\n    List[Dict[str, str]]: List of subtasks with their assigned priorities."
    },
    {
        "name": "generate_milestones",
        "file": ".\\_SRC FILES\\agents\\core\\AgentPlanner.py",
        "start_line": 53,
        "end_line": 71,
        "params": [
            "self",
            "subtasks",
            "milestone_criteria"
        ],
        "docstring": "Identifies milestones among subtasks based on the criteria or default settings.\n\nArgs:\n    subtasks (List[Dict[str, str]]): List of subtasks with assigned priorities.\n    milestone_criteria (Optional[str]): Keyword for defining milestones.\n\nReturns:\n    List[Dict[str, str]]: List of milestone subtasks."
    },
    {
        "name": "__init__",
        "file": ".\\_SRC FILES\\agents\\core\\AIAgentWithMemory.py",
        "start_line": 31,
        "end_line": 54,
        "params": [
            "self",
            "name",
            "project_name",
            "memory_manager",
            "performance_monitor",
            "dispatcher"
        ],
        "docstring": "Initialize the AI agent with a name, project name, a MemoryManager instance,\nand a PerformanceMonitor instance.\n\nArgs:\n    name (str): Name of the AI agent.\n    project_name (str): Name of the project/domain the agent is associated with.\n    memory_manager (MemoryManager): Instance of MemoryManager for handling memory operations.\n    performance_monitor (PerformanceMonitor): Instance of PerformanceMonitor for tracking performance.\n    dispatcher (AgentDispatcher): Reference to the dispatcher for self-improvement actions."
    },
    {
        "name": "run_query",
        "file": ".\\_SRC FILES\\agents\\core\\AIAgentWithMemory.py",
        "start_line": 56,
        "end_line": 105,
        "params": [
            "self",
            "prompt"
        ],
        "docstring": "Run a query against Mistral 7B via Ollama and store the interaction in memory.\n\nArgs:\n    prompt (str): The user prompt to send to Mistral.\n\nReturns:\n    str: The response from Mistral or an error message."
    },
    {
        "name": "chat",
        "file": ".\\_SRC FILES\\agents\\core\\AIAgentWithMemory.py",
        "start_line": 107,
        "end_line": 124,
        "params": [
            "self",
            "user_input"
        ],
        "docstring": "Facilitate a chat interaction with the AI agent.\n\nArgs:\n    user_input (str): Input from the user.\n\nReturns:\n    str: Response from the AI agent."
    },
    {
        "name": "self_improve",
        "file": ".\\_SRC FILES\\agents\\core\\AIAgentWithMemory.py",
        "start_line": 126,
        "end_line": 160,
        "params": [
            "self"
        ],
        "docstring": "Analyze performance and adjust operations to improve future interactions.\nThis method embodies the self-improvement capability of the AI agent."
    },
    {
        "name": "take_action_based_on_failure",
        "file": ".\\_SRC FILES\\agents\\core\\AIAgentWithMemory.py",
        "start_line": 162,
        "end_line": 181,
        "params": [
            "self",
            "reason"
        ],
        "docstring": "Takes specific actions based on the identified failure reason.\n\nArgs:\n    reason (str): The most common failure reason."
    },
    {
        "name": "suggest_improvements",
        "file": ".\\_SRC FILES\\agents\\core\\AIAgentWithMemory.py",
        "start_line": 183,
        "end_line": 204,
        "params": [
            "self"
        ],
        "docstring": "Suggests improvements to its own operations based on performance data."
    },
    {
        "name": "log_performance",
        "file": ".\\_SRC FILES\\agents\\core\\example_usage.py",
        "start_line": 14,
        "end_line": 16,
        "params": [
            "self",
            "agent_name",
            "prompt",
            "success",
            "response"
        ],
        "docstring": null
    },
    {
        "name": "analyze_performance",
        "file": ".\\_SRC FILES\\agents\\core\\example_usage.py",
        "start_line": 18,
        "end_line": 24,
        "params": [
            "self",
            "agent_name"
        ],
        "docstring": null
    },
    {
        "name": "__init__",
        "file": ".\\_SRC FILES\\agents\\core\\example_usage.py",
        "start_line": 28,
        "end_line": 32,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "solve_task",
        "file": ".\\_SRC FILES\\agents\\core\\example_usage.py",
        "start_line": 34,
        "end_line": 58,
        "params": [
            "self",
            "task_data"
        ],
        "docstring": "Implements the abstract solve_task method. Processes the task_data\nand returns a result. Can be extended to handle various task types."
    },
    {
        "name": "__init__",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\agent_base.py",
        "start_line": 107,
        "end_line": 142,
        "params": [
            "self",
            "name",
            "description",
            "project_name",
            "plugin_dir",
            "memory_manager",
            "performance_monitor",
            "log_to_file",
            "dispatcher",
            "reasoner"
        ],
        "docstring": "Initialize the RobustAgent with necessary components.\n\nArgs:\n    name (str): Name of the AI agent.\n    description (str): Description of the agent's capabilities.\n    project_name (str): Name of the project/domain the agent is associated with.\n    plugin_dir (str): Directory for dynamically loaded task plugins.\n    memory_manager (MemoryManager): Instance of MemoryManager for handling memory operations.\n    performance_monitor (Any): Instance of PerformanceMonitor for tracking performance.\n    log_to_file (bool): Whether to log to a file instead of the console.\n    dispatcher (Any): Reference to the dispatcher for self-improvement actions.\n    reasoner (ChainOfThoughtReasoner): Instance of ChainOfThoughtReasoner for advanced reasoning."
    },
    {
        "name": "_setup_logger",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\agent_base.py",
        "start_line": 144,
        "end_line": 151,
        "params": [
            "self",
            "log_to_file"
        ],
        "docstring": "Sets up the logging configuration for the agent."
    },
    {
        "name": "log",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\agent_base.py",
        "start_line": 153,
        "end_line": 155,
        "params": [
            "self",
            "message",
            "level"
        ],
        "docstring": "Logs a message at the specified logging level."
    },
    {
        "name": "log_json",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\agent_base.py",
        "start_line": 157,
        "end_line": 163,
        "params": [
            "self",
            "message",
            "data",
            "level"
        ],
        "docstring": "Logs a structured message with additional data in JSON format."
    },
    {
        "name": "log_error",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\agent_base.py",
        "start_line": 165,
        "end_line": 172,
        "params": [
            "self",
            "error",
            "context"
        ],
        "docstring": "Logs an error message with traceback and optional contextual information."
    },
    {
        "name": "load_plugins",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\agent_base.py",
        "start_line": 174,
        "end_line": 201,
        "params": [
            "self"
        ],
        "docstring": "Dynamically loads plugins (task handlers) from the specified directory.\n\nReturns:\n    Dict[str, Callable]: A dictionary of plugin functions."
    },
    {
        "name": "execute_plugin_task",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\agent_base.py",
        "start_line": 203,
        "end_line": 225,
        "params": [
            "self",
            "task_name",
            "task_data"
        ],
        "docstring": "Executes a task using a dynamically loaded plugin.\n\nArgs:\n    task_name (str): The name of the task/plugin to execute.\n    task_data (dict): Data to pass to the plugin.\n\nReturns:\n    str: The result of the plugin task or an error message."
    },
    {
        "name": "ai_diagnose_and_resolve",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\agent_base.py",
        "start_line": 227,
        "end_line": 251,
        "params": [
            "self",
            "error_message"
        ],
        "docstring": "Uses Mistral through Ollama CLI to diagnose and suggest resolutions for errors.\n\nArgs:\n    error_message (str): The error message to diagnose.\n\nReturns:\n    Optional[str]: Suggested resolution from AI, if available."
    },
    {
        "name": "handle_task_with_error_handling",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\agent_base.py",
        "start_line": 253,
        "end_line": 277,
        "params": [
            "self",
            "task_data",
            "fallback"
        ],
        "docstring": "Executes a task with error handling, AI-based resolution, and optional user prompt for oversight.\n\nArgs:\n    task_data (dict): Data necessary for task execution.\n    fallback (Optional[Callable]): Optional fallback function.\n\nReturns:\n    str: Outcome of the task or error message."
    },
    {
        "name": "handle_error_resolution",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\agent_base.py",
        "start_line": 279,
        "end_line": 315,
        "params": [
            "self",
            "task_id",
            "error",
            "fallback"
        ],
        "docstring": "Manages the resolution process for errors, including checking history, AI diagnosis,\ncached decisions, and user prompts.\n\nArgs:\n    task_id (int): The ID of the failed task.\n    error (Exception): The raised exception during task execution.\n    fallback (Optional[Callable]): Optional fallback function.\n\nReturns:\n    str: Suggested resolution or fallback message."
    },
    {
        "name": "prompt_user_for_manual_resolution",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\agent_base.py",
        "start_line": 317,
        "end_line": 338,
        "params": [
            "self",
            "error_messages",
            "fallback"
        ],
        "docstring": "Prompts the user for a manual resolution when automated methods fail.\n\nArgs:\n    error_messages (list): List of error messages to provide context.\n    fallback (Optional[Callable]): Optional fallback function.\n\nReturns:\n    str: User-provided manual resolution or fallback message."
    },
    {
        "name": "_extract_error_messages",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\agent_base.py",
        "start_line": 340,
        "end_line": 354,
        "params": [
            "self",
            "stack_trace"
        ],
        "docstring": "Extracts individual error messages from a stack trace.\n\nArgs:\n    stack_trace (str): The full stack trace.\n\nReturns:\n    list: A list of error messages."
    },
    {
        "name": "_execute_with_retry",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\agent_base.py",
        "start_line": 356,
        "end_line": 388,
        "params": [
            "self",
            "task_id",
            "task_data"
        ],
        "docstring": "Executes a task with retry logic, using exponential backoff.\nRetries up to `MAX_RETRIES` if exceptions are raised.\n\nArgs:\n    task_id (int): The ID of the task in the database.\n    task_data (dict): Data necessary for task execution.\n\nReturns:\n    str: The result of the task.\n\nRaises:\n    Exception: Re-raises the last exception if all retries fail."
    },
    {
        "name": "save_task_state",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\agent_base.py",
        "start_line": 390,
        "end_line": 404,
        "params": [
            "self",
            "task_type",
            "initial_status"
        ],
        "docstring": "Saves a new task state to the database for fault tolerance."
    },
    {
        "name": "update_task_state",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\agent_base.py",
        "start_line": 406,
        "end_line": 424,
        "params": [
            "self",
            "task_id",
            "new_status",
            "result"
        ],
        "docstring": "Updates the status and result of a task in the database."
    },
    {
        "name": "save_resolution_history",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\agent_base.py",
        "start_line": 426,
        "end_line": 442,
        "params": [
            "self",
            "error_message",
            "ai_suggestion",
            "user_decision"
        ],
        "docstring": "Saves a resolution history entry to the database."
    },
    {
        "name": "check_resolution_history",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\agent_base.py",
        "start_line": 444,
        "end_line": 463,
        "params": [
            "self",
            "error_messages"
        ],
        "docstring": "Checks if there is a resolution history for the given error messages.\n\nArgs:\n    error_messages (list): List of error messages.\n\nReturns:\n    Optional[ResolutionHistory]: The resolution history entry if found."
    },
    {
        "name": "get_cached_user_decision",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\agent_base.py",
        "start_line": 465,
        "end_line": 508,
        "params": [
            "self",
            "error_messages"
        ],
        "docstring": "Retrieves a cached user decision for similar error messages.\n\nArgs:\n    error_messages (list): List of error messages.\n\nReturns:\n    Optional[str]: The cached user decision if available, or None if no recent match is found."
    },
    {
        "name": "cache_user_decision",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\agent_base.py",
        "start_line": 510,
        "end_line": 559,
        "params": [
            "self",
            "error_message",
            "user_decision"
        ],
        "docstring": "Caches the user's decision with metadata, usage tracking, and dynamic retention based on frequency.\n\nArgs:\n    error_message (str): The error message.\n    user_decision (str): The user's resolution decision."
    },
    {
        "name": "_manage_cache_size",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\agent_base.py",
        "start_line": 561,
        "end_line": 572,
        "params": [
            "self",
            "session"
        ],
        "docstring": "Manages the size of the user decision cache."
    },
    {
        "name": "schedule_task",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\agent_base.py",
        "start_line": 574,
        "end_line": 582,
        "params": [
            "self",
            "cron_expression",
            "task_callable",
            "task_data",
            "task_id"
        ],
        "docstring": "Schedules a recurring task based on a cron expression."
    },
    {
        "name": "update_scheduled_task",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\agent_base.py",
        "start_line": 584,
        "end_line": 596,
        "params": [
            "self",
            "task_id",
            "new_cron_expression"
        ],
        "docstring": "Updates an existing scheduled task with a new cron expression."
    },
    {
        "name": "remove_scheduled_task",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\agent_base.py",
        "start_line": 598,
        "end_line": 605,
        "params": [
            "self",
            "task_id"
        ],
        "docstring": "Removes a scheduled task by its task_id."
    },
    {
        "name": "introduce",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\agent_base.py",
        "start_line": 607,
        "end_line": 611,
        "params": [
            "self"
        ],
        "docstring": "Provides a brief introduction of the agent, including name and description."
    },
    {
        "name": "describe_capabilities",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\agent_base.py",
        "start_line": 613,
        "end_line": 617,
        "params": [
            "self"
        ],
        "docstring": "Returns a description of the agent's capabilities."
    },
    {
        "name": "shutdown",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\agent_base.py",
        "start_line": 619,
        "end_line": 622,
        "params": [
            "self"
        ],
        "docstring": "Gracefully shuts down the scheduler and closes database sessions."
    },
    {
        "name": "run_query",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\agent_base.py",
        "start_line": 628,
        "end_line": 690,
        "params": [
            "self",
            "prompt"
        ],
        "docstring": "Run a query against Mistral 7B via Ollama and store the interaction in memory.\n\nArgs:\n    prompt (str): The user prompt to send to Mistral.\n\nReturns:\n    str: The response from Mistral or an error message."
    },
    {
        "name": "chat",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\agent_base.py",
        "start_line": 692,
        "end_line": 709,
        "params": [
            "self",
            "user_input"
        ],
        "docstring": "Facilitate a chat interaction with the AI agent.\n\nArgs:\n    user_input (str): Input from the user.\n\nReturns:\n    str: Response from the AI agent."
    },
    {
        "name": "_handle_error",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\agent_base.py",
        "start_line": 711,
        "end_line": 732,
        "params": [
            "self",
            "prompt",
            "error_message"
        ],
        "docstring": "Handle errors by attempting to retrieve cached decisions or triggering self-improvement.\n\nArgs:\n    prompt (str): The original prompt that caused the error.\n    error_message (str): The error message encountered."
    },
    {
        "name": "self_improve",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\agent_base.py",
        "start_line": 734,
        "end_line": 772,
        "params": [
            "self"
        ],
        "docstring": "Analyze performance and adjust operations to improve future interactions.\nThis method embodies the self-improvement capability of the AI agent."
    },
    {
        "name": "take_action_based_on_failure",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\agent_base.py",
        "start_line": 774,
        "end_line": 795,
        "params": [
            "self",
            "reason"
        ],
        "docstring": "Takes specific actions based on the identified failure reason.\n\nArgs:\n    reason (str): The most common failure reason."
    },
    {
        "name": "suggest_improvements",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\agent_base.py",
        "start_line": 797,
        "end_line": 824,
        "params": [
            "self"
        ],
        "docstring": "Suggests improvements to its own operations based on performance data."
    },
    {
        "name": "solve_task",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\agent_base.py",
        "start_line": 845,
        "end_line": 847,
        "params": [
            "self",
            "task_data"
        ],
        "docstring": "Abstract method to solve a task. Must be implemented by subclasses."
    },
    {
        "name": "main",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\agent_gui.py",
        "start_line": 212,
        "end_line": 237,
        "params": [],
        "docstring": null
    },
    {
        "name": "__init__",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\agent_gui.py",
        "start_line": 26,
        "end_line": 31,
        "params": [
            "self",
            "agent"
        ],
        "docstring": null
    },
    {
        "name": "init_ui",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\agent_gui.py",
        "start_line": 33,
        "end_line": 125,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "add_task",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\agent_gui.py",
        "start_line": 127,
        "end_line": 158,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "refresh_tasks",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\agent_gui.py",
        "start_line": 160,
        "end_line": 167,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "delete_task",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\agent_gui.py",
        "start_line": 169,
        "end_line": 182,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "refresh_logs",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\agent_gui.py",
        "start_line": 184,
        "end_line": 185,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "update_logs",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\agent_gui.py",
        "start_line": 187,
        "end_line": 193,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "refresh_resolutions",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\agent_gui.py",
        "start_line": 195,
        "end_line": 196,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "update_resolutions",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\agent_gui.py",
        "start_line": 198,
        "end_line": 210,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "run_scheduler",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\agent_gui.py",
        "start_line": 227,
        "end_line": 232,
        "params": [],
        "docstring": null
    },
    {
        "name": "track_performance",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\ai_agent_utils.py",
        "start_line": 263,
        "end_line": 272,
        "params": [
            "func"
        ],
        "docstring": "A decorator function to log performance metrics of a function."
    },
    {
        "name": "log_memory_usage",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\ai_agent_utils.py",
        "start_line": 338,
        "end_line": 356,
        "params": [
            "tag"
        ],
        "docstring": "Logs the current memory usage of the process.\n\nArgs:\n    tag (str): A custom tag for distinguishing the log entry."
    },
    {
        "name": "load_config",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\ai_agent_utils.py",
        "start_line": 358,
        "end_line": 380,
        "params": [
            "config_path"
        ],
        "docstring": "Loads configuration settings from a JSON file.\n\nArgs:\n    config_path (str): The path to the configuration file.\n\nReturns:\n    dict: Configuration settings as a dictionary."
    },
    {
        "name": "classify_severity",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\ai_agent_utils.py",
        "start_line": 422,
        "end_line": 427,
        "params": [
            "error_type"
        ],
        "docstring": "Classifies the severity level of the error based on the error type."
    },
    {
        "name": "capture_traceback",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\ai_agent_utils.py",
        "start_line": 429,
        "end_line": 432,
        "params": [
            "output"
        ],
        "docstring": "Extracts traceback details from the output if available."
    },
    {
        "name": "__init__",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\ai_agent_utils.py",
        "start_line": 63,
        "end_line": 68,
        "params": [
            "self",
            "performance_file"
        ],
        "docstring": null
    },
    {
        "name": "log_performance",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\ai_agent_utils.py",
        "start_line": 70,
        "end_line": 89,
        "params": [
            "self",
            "agent_name",
            "task",
            "success",
            "details"
        ],
        "docstring": "Logs the performance of an agent on a specific task."
    },
    {
        "name": "__init__",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\ai_agent_utils.py",
        "start_line": 100,
        "end_line": 102,
        "params": [
            "self",
            "memory_file"
        ],
        "docstring": null
    },
    {
        "name": "_initialize_memory_file",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\ai_agent_utils.py",
        "start_line": 104,
        "end_line": 111,
        "params": [
            "self"
        ],
        "docstring": "Initializes the memory file if it does not exist."
    },
    {
        "name": "save_memory",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\ai_agent_utils.py",
        "start_line": 113,
        "end_line": 129,
        "params": [
            "self",
            "project_name",
            "user_input",
            "ai_response"
        ],
        "docstring": "Saves the user input and AI response to memory."
    },
    {
        "name": "retrieve_memory",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\ai_agent_utils.py",
        "start_line": 131,
        "end_line": 146,
        "params": [
            "self",
            "project_name",
            "limit"
        ],
        "docstring": "Retrieves the latest interactions from memory."
    },
    {
        "name": "_load_memory_data",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\ai_agent_utils.py",
        "start_line": 148,
        "end_line": 153,
        "params": [
            "self"
        ],
        "docstring": "Loads memory data from the JSON file."
    },
    {
        "name": "_save_memory_data",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\ai_agent_utils.py",
        "start_line": 155,
        "end_line": 160,
        "params": [
            "self",
            "data"
        ],
        "docstring": "Saves memory data to the JSON file."
    },
    {
        "name": "__init__",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\ai_agent_utils.py",
        "start_line": 172,
        "end_line": 205,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "execute_code",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\ai_agent_utils.py",
        "start_line": 207,
        "end_line": 231,
        "params": [
            "self",
            "code"
        ],
        "docstring": "Executes Python code safely within a restricted environment."
    },
    {
        "name": "_apply_loop_limit",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\ai_agent_utils.py",
        "start_line": 233,
        "end_line": 249,
        "params": [
            "self",
            "code"
        ],
        "docstring": "Wraps loops in the code with an iteration limit to prevent infinite loops."
    },
    {
        "name": "set_state",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\ai_agent_utils.py",
        "start_line": 251,
        "end_line": 253,
        "params": [
            "self",
            "key",
            "value"
        ],
        "docstring": "Sets a value in the notebook's state."
    },
    {
        "name": "get_state",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\ai_agent_utils.py",
        "start_line": 255,
        "end_line": 257,
        "params": [
            "self",
            "key"
        ],
        "docstring": "Gets a value from the notebook's state."
    },
    {
        "name": "reset_state",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\ai_agent_utils.py",
        "start_line": 259,
        "end_line": 261,
        "params": [
            "self"
        ],
        "docstring": "Resets the notebook's state."
    },
    {
        "name": "wrapper",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\ai_agent_utils.py",
        "start_line": 267,
        "end_line": 271,
        "params": [],
        "docstring": null
    },
    {
        "name": "execute_command",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\ai_agent_utils.py",
        "start_line": 282,
        "end_line": 310,
        "params": [
            "self",
            "command"
        ],
        "docstring": "Executes a shell command."
    },
    {
        "name": "__init__",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\ai_agent_utils.py",
        "start_line": 320,
        "end_line": 325,
        "params": [
            "self",
            "shell",
            "python_notebook",
            "image_name",
            "dockerfile_path"
        ],
        "docstring": null
    },
    {
        "name": "execute_command",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\ai_agent_utils.py",
        "start_line": 327,
        "end_line": 331,
        "params": [
            "self",
            "command"
        ],
        "docstring": "Executes a shell command using the shell tool."
    },
    {
        "name": "execute_code",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\ai_agent_utils.py",
        "start_line": 333,
        "end_line": 337,
        "params": [
            "self",
            "code"
        ],
        "docstring": "Executes Python code using the Python notebook tool."
    },
    {
        "name": "__init__",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\ai_cache.py",
        "start_line": 14,
        "end_line": 18,
        "params": [
            "self",
            "cache_file"
        ],
        "docstring": null
    },
    {
        "name": "load_cache",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\ai_cache.py",
        "start_line": 20,
        "end_line": 31,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "set_fix",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\ai_cache.py",
        "start_line": 37,
        "end_line": 39,
        "params": [
            "self",
            "ai_model",
            "error_type",
            "error_message",
            "fix"
        ],
        "docstring": null
    },
    {
        "name": "save_cache",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\ai_cache.py",
        "start_line": 41,
        "end_line": 47,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "__init__",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\ChainOfThoughtReasoner.py",
        "start_line": 24,
        "end_line": 41,
        "params": [
            "self",
            "agent_dispatcher",
            "model_name",
            "ollama_url"
        ],
        "docstring": "Initializes the ChainOfThoughtReasoner with an agent dispatcher and a semantic model.\n\nArgs:\n    agent_dispatcher: An instance responsible for dispatching tasks to agents.\n    model_name (str): The name of the Mistral model configured in Ollama.\n    ollama_url (str): The URL for the Ollama model API."
    },
    {
        "name": "parse_decomposition_output",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\ChainOfThoughtReasoner.py",
        "start_line": 230,
        "end_line": 261,
        "params": [
            "self",
            "text"
        ],
        "docstring": "Parses the output from the decomposition model into a list of steps.\n\nArgs:\n    text (str): The raw text output from the decomposition model.\n\nReturns:\n    List[str]: A list of individual steps."
    },
    {
        "name": "build_reasoning_graph",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\ChainOfThoughtReasoner.py",
        "start_line": 263,
        "end_line": 278,
        "params": [
            "self",
            "steps"
        ],
        "docstring": "Builds a directed graph representing the dependencies between reasoning steps.\n\nArgs:\n    steps (List[str]): A list of steps to include in the reasoning graph."
    },
    {
        "name": "enrich_step_with_memory",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\ChainOfThoughtReasoner.py",
        "start_line": 280,
        "end_line": 296,
        "params": [
            "self",
            "step"
        ],
        "docstring": "Enhances the step with contextual memory for more informed processing.\n\nArgs:\n    step (str): The original step content.\n\nReturns:\n    str: The enriched step content."
    },
    {
        "name": "update_memory",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\ChainOfThoughtReasoner.py",
        "start_line": 298,
        "end_line": 307,
        "params": [
            "self",
            "step_id",
            "result"
        ],
        "docstring": "Updates the contextual memory with the result of a completed step.\n\nArgs:\n    step_id (str): The identifier of the completed step.\n    result (str): The result produced by the step."
    },
    {
        "name": "__init__",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\error_detection.py",
        "start_line": 40,
        "end_line": 47,
        "params": [
            "self",
            "pylint_path"
        ],
        "docstring": "Initialize ErrorDetection with optional path to pylint.\n\nArgs:\n    pylint_path (str): Path to the pylint executable. Defaults to 'pylint'."
    },
    {
        "name": "detect_syntax_errors",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\error_detection.py",
        "start_line": 49,
        "end_line": 63,
        "params": [
            "self",
            "code"
        ],
        "docstring": "Detects syntax errors in the provided code using AST parsing.\n\nArgs:\n    code (str): Code to check for syntax errors.\n\nReturns:\n    str: Error message if syntax errors are found, or an empty string if none."
    },
    {
        "name": "detect_runtime_errors",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\error_detection.py",
        "start_line": 65,
        "end_line": 81,
        "params": [
            "self",
            "code",
            "globals_",
            "locals_"
        ],
        "docstring": "Detects runtime errors by executing the code in a controlled environment.\n\nArgs:\n    code (str): Code to execute and check for runtime errors.\n    globals_ (dict): Optional globals for code execution.\n    locals_ (dict): Optional locals for code execution.\n\nReturns:\n    str: Error message if runtime errors occur, or an empty string if none."
    },
    {
        "name": "detect_logic_errors",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\error_detection.py",
        "start_line": 83,
        "end_line": 105,
        "params": [
            "self",
            "file_path"
        ],
        "docstring": "Runs pylint on the provided code file to identify potential logic errors.\n\nArgs:\n    file_path (str): Path to the file containing the code to be checked.\n\nReturns:\n    str: Pylint output with logic errors if found, or an empty string if none."
    },
    {
        "name": "detect_all_errors",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\error_detection.py",
        "start_line": 107,
        "end_line": 123,
        "params": [
            "self",
            "code",
            "file_path"
        ],
        "docstring": "Detects syntax, runtime, and logic errors in the provided code.\n\nArgs:\n    code (str): Code to check.\n    file_path (str): Optional path to the file for logic error checking with pylint.\n\nReturns:\n    dict: Dictionary with results for each error type."
    },
    {
        "name": "quick_fix_syntax_errors",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\error_detection.py",
        "start_line": 125,
        "end_line": 147,
        "params": [
            "self",
            "code"
        ],
        "docstring": "Attempts to fix basic syntax errors by identifying common patterns.\n\nArgs:\n    code (str): Code to fix.\n\nReturns:\n    tuple: (str) Attempted fix, (bool) Whether fix was successful."
    },
    {
        "name": "detect_errors_in_output",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\error_detection.py",
        "start_line": 149,
        "end_line": 207,
        "params": [
            "self",
            "output"
        ],
        "docstring": "Detects errors in the given output string, identifying occurrences, categorizing errors,\nand capturing additional context for each unique error.\n\nArgs:\n    output (str): The output or log string to analyze.\n\nReturns:\n    dict: A structured dictionary containing categorized errors with their types,\n          severity levels, messages, counts, and contextual tracebacks."
    },
    {
        "name": "classify_severity",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\error_detection.py",
        "start_line": 209,
        "end_line": 226,
        "params": [
            "self",
            "error_type"
        ],
        "docstring": "Classifies the severity of an error based on its type.\n\nArgs:\n    error_type (str): The type of error to classify.\n\nReturns:\n    str: A severity level (e.g., \"Critical\", \"Warning\", \"Info\")."
    },
    {
        "name": "capture_traceback",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\error_detection.py",
        "start_line": 228,
        "end_line": 241,
        "params": [
            "self",
            "output"
        ],
        "docstring": "Extracts traceback details from an error output.\n\nArgs:\n    output (str): The output containing error details.\n\nReturns:\n    str: The extracted traceback information."
    },
    {
        "name": "__init__",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\memory_manager.py",
        "start_line": 9,
        "end_line": 13,
        "params": [
            "self",
            "db_path",
            "table_name"
        ],
        "docstring": null
    },
    {
        "name": "_initialize_database",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\memory_manager.py",
        "start_line": 15,
        "end_line": 33,
        "params": [
            "self"
        ],
        "docstring": "Initialize the database and ensure the memory entries table exists."
    },
    {
        "name": "_get_connection",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\memory_manager.py",
        "start_line": 35,
        "end_line": 43,
        "params": [
            "self"
        ],
        "docstring": "Create and return a new database connection."
    },
    {
        "name": "save_memory",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\memory_manager.py",
        "start_line": 45,
        "end_line": 58,
        "params": [
            "self",
            "project_name",
            "user_prompt",
            "ai_response"
        ],
        "docstring": "Save a memory entry into the database."
    },
    {
        "name": "retrieve_memory",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\memory_manager.py",
        "start_line": 60,
        "end_line": 79,
        "params": [
            "self",
            "project_name",
            "limit"
        ],
        "docstring": "Retrieve the latest memory entries for a given project."
    },
    {
        "name": "delete_memory_older_than",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\memory_manager.py",
        "start_line": 81,
        "end_line": 96,
        "params": [
            "self",
            "project_name",
            "days"
        ],
        "docstring": "Delete memory entries older than the specified number of days."
    },
    {
        "name": "summarize_memories",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\memory_manager.py",
        "start_line": 98,
        "end_line": 104,
        "params": [
            "self",
            "project_name",
            "limit"
        ],
        "docstring": "Summarize recent memory entries for a project."
    },
    {
        "name": "close",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\memory_manager.py",
        "start_line": 106,
        "end_line": 108,
        "params": [
            "self"
        ],
        "docstring": "Close any active database connections (if needed)."
    },
    {
        "name": "__init__",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\mistral_model.py",
        "start_line": 13,
        "end_line": 15,
        "params": [
            "self",
            "command"
        ],
        "docstring": null
    },
    {
        "name": "__init__",
        "file": ".\\_SRC FILES\\agents\\core\\utilities\\ollama_model.py",
        "start_line": 15,
        "end_line": 17,
        "params": [
            "self",
            "command"
        ],
        "docstring": null
    },
    {
        "name": "run_task",
        "file": ".\\_SRC FILES\\agents\\plugins\\example_plugin.py",
        "start_line": 27,
        "end_line": 38,
        "params": [
            "data"
        ],
        "docstring": "Example plugin task function.\n\nArgs:\n    data (dict): Data passed to the plugin.\n\nReturns:\n    str: Result of the plugin task."
    },
    {
        "name": "__init__",
        "file": ".\\_SRC FILES\\agents\\plugins\\example_plugin.py",
        "start_line": 13,
        "end_line": 15,
        "params": [
            "self",
            "name"
        ],
        "docstring": null
    },
    {
        "name": "describe_capabilities",
        "file": ".\\_SRC FILES\\agents\\plugins\\example_plugin.py",
        "start_line": 24,
        "end_line": 25,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "__init__",
        "file": ".\\_SRC FILES\\agents\\plugins\\plugin_interface.py",
        "start_line": 11,
        "end_line": 21,
        "params": [
            "self",
            "name",
            "memory_manager",
            "performance_monitor",
            "dispatcher"
        ],
        "docstring": null
    },
    {
        "name": "describe_capabilities",
        "file": ".\\_SRC FILES\\agents\\plugins\\plugin_interface.py",
        "start_line": 37,
        "end_line": 44,
        "params": [
            "self"
        ],
        "docstring": "Describes the capabilities of the agent.\n\nReturns:\n    str: Description of capabilities."
    },
    {
        "name": "__init__",
        "file": ".\\_SRC FILES\\agents\\plugins\\sandboxed_python_agent.py",
        "start_line": 15,
        "end_line": 18,
        "params": [
            "self",
            "name"
        ],
        "docstring": null
    },
    {
        "name": "describe_capabilities",
        "file": ".\\_SRC FILES\\agents\\plugins\\sandboxed_python_agent.py",
        "start_line": 73,
        "end_line": 74,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "__init__",
        "file": ".\\_SRC FILES\\agents\\tasks\\debugger_agent.py",
        "start_line": 9,
        "end_line": 11,
        "params": [
            "self",
            "name",
            "memory_manager",
            "performance_monitor",
            "dispatcher"
        ],
        "docstring": null
    },
    {
        "name": "describe_capabilities",
        "file": ".\\_SRC FILES\\agents\\tasks\\debugger_agent.py",
        "start_line": 18,
        "end_line": 19,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "__init__",
        "file": ".\\_SRC FILES\\core\\debugger_agent.py",
        "start_line": 55,
        "end_line": 70,
        "params": [
            "self",
            "name",
            "description",
            "config_path"
        ],
        "docstring": "Initializes the DebuggerAgent with default parameters and sets up AI models.\n\nArgs:\n    name (str): The agent's name.\n    description (str): A short description of the agent's role.\n    config_path (str): Path to the configuration YAML file."
    },
    {
        "name": "setup_logging",
        "file": ".\\_SRC FILES\\core\\debugger_agent.py",
        "start_line": 72,
        "end_line": 99,
        "params": [
            "self",
            "config_path"
        ],
        "docstring": "Sets up logging based on the configuration file.\n\nArgs:\n    config_path (str): Path to the configuration YAML file."
    },
    {
        "name": "load_config",
        "file": ".\\_SRC FILES\\core\\debugger_agent.py",
        "start_line": 101,
        "end_line": 120,
        "params": [
            "self",
            "config_path"
        ],
        "docstring": "Loads the configuration from a YAML file.\n\nArgs:\n    config_path (str): Path to the configuration YAML file.\n\nReturns:\n    dict: Configuration dictionary."
    },
    {
        "name": "initialize_ai_models",
        "file": ".\\_SRC FILES\\core\\debugger_agent.py",
        "start_line": 122,
        "end_line": 141,
        "params": [
            "self"
        ],
        "docstring": "Initializes AI models based on the configuration.\n\nReturns:\n    dict: Dictionary of AI model instances."
    },
    {
        "name": "export_report",
        "file": ".\\_SRC FILES\\core\\debugger_agent.py",
        "start_line": 347,
        "end_line": 391,
        "params": [
            "self",
            "report",
            "format"
        ],
        "docstring": "Exports the error summary and suggested fixes in the specified format.\n\nArgs:\n    report (dict): The report containing error summaries and suggested fixes.\n    format (str): The format to export the report ('json' or 'html').\n\nReturns:\n    str: Path to the exported report or error message."
    },
    {
        "name": "__init__",
        "file": ".\\_SRC FILES\\core\\reasoner_controller.py",
        "start_line": 9,
        "end_line": 12,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "handle_task",
        "file": ".\\_SRC FILES\\core\\reasoner_controller.py",
        "start_line": 14,
        "end_line": 26,
        "params": [
            "self",
            "task"
        ],
        "docstring": "Processes a task using the ChainOfThoughtReasoner and returns the result.\n\nArgs:\n    task (str): The task input by the user.\n\nReturns:\n    str: The result of the reasoning process."
    },
    {
        "name": "__init__",
        "file": ".\\_SRC FILES\\core\\task_manager.py",
        "start_line": 10,
        "end_line": 12,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "run_task_sync",
        "file": ".\\_SRC FILES\\core\\task_manager.py",
        "start_line": 28,
        "end_line": 38,
        "params": [
            "self",
            "task"
        ],
        "docstring": "Runs a reasoning task synchronously.\n\nArgs:\n    task (str): The task to process.\n\nReturns:\n    str: The result of the task."
    },
    {
        "name": "__init__",
        "file": ".\\_SRC FILES\\core\\trading_robot.py",
        "start_line": 5,
        "end_line": 6,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "load_data",
        "file": ".\\_SRC FILES\\core\\trading_robot.py",
        "start_line": 8,
        "end_line": 9,
        "params": [
            "self",
            "path"
        ],
        "docstring": null
    },
    {
        "name": "run_analysis",
        "file": ".\\_SRC FILES\\core\\trading_robot.py",
        "start_line": 11,
        "end_line": 13,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "run_task",
        "file": ".\\_SRC FILES\\core\\plugins\\example_plugin.py",
        "start_line": 27,
        "end_line": 40,
        "params": [
            "task_data"
        ],
        "docstring": "Example plugin task that processes input data and returns a result.\n\nArgs:\n    task_data (dict): Data required for the task.\n    \nReturns:\n    str: Result of the task."
    },
    {
        "name": "__init__",
        "file": ".\\_SRC FILES\\core\\plugins\\example_plugin.py",
        "start_line": 13,
        "end_line": 15,
        "params": [
            "self",
            "name"
        ],
        "docstring": null
    },
    {
        "name": "describe_capabilities",
        "file": ".\\_SRC FILES\\core\\plugins\\example_plugin.py",
        "start_line": 24,
        "end_line": 25,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "__init__",
        "file": ".\\_SRC FILES\\dashboard\\error_insights_dashboard.py",
        "start_line": 33,
        "end_line": 39,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "log_error",
        "file": ".\\_SRC FILES\\dashboard\\error_insights_dashboard.py",
        "start_line": 41,
        "end_line": 62,
        "params": [
            "self",
            "error_message",
            "task",
            "severity"
        ],
        "docstring": "Logs errors into the dashboard for aggregation and analysis.\n\nArgs:\n    error_message (str): Description of the error.\n    task (str): The associated task name.\n    severity (str): Severity level (e.g., 'Critical', 'Moderate', 'Low')."
    },
    {
        "name": "generate_error_insights",
        "file": ".\\_SRC FILES\\dashboard\\error_insights_dashboard.py",
        "start_line": 64,
        "end_line": 83,
        "params": [
            "self"
        ],
        "docstring": "Aggregates and analyzes error data, returning insights including most \ncommon errors, trending issues, and severity distribution.\n\nReturns:\n    dict: A dictionary of aggregated insights and metrics."
    },
    {
        "name": "recommend_actions",
        "file": ".\\_SRC FILES\\dashboard\\error_insights_dashboard.py",
        "start_line": 85,
        "end_line": 101,
        "params": [
            "self"
        ],
        "docstring": "Provides recommended actions based on error patterns and historical \nresolutions, prioritizing high-severity or frequent errors.\n\nReturns:\n    list: List of recommended actions for high-priority errors."
    },
    {
        "name": "track_resolution_effectiveness",
        "file": ".\\_SRC FILES\\dashboard\\error_insights_dashboard.py",
        "start_line": 103,
        "end_line": 112,
        "params": [
            "self"
        ],
        "docstring": "Analyzes the effectiveness of past resolutions, tracking metrics like \nresolution time, recurrence rate, and the success of applied fixes."
    },
    {
        "name": "display_dashboard",
        "file": ".\\_SRC FILES\\dashboard\\error_insights_dashboard.py",
        "start_line": 114,
        "end_line": 136,
        "params": [
            "self"
        ],
        "docstring": "Displays the insights and recommended actions as a simulated dashboard output."
    },
    {
        "name": "__init__",
        "file": ".\\_SRC FILES\\gui\\ai_agent_gui.py",
        "start_line": 36,
        "end_line": 43,
        "params": [
            "self",
            "code"
        ],
        "docstring": "Initializes the ErrorDetector with code for analysis.\n\nArgs:\n    code (str): Python code to be analyzed."
    },
    {
        "name": "detect_syntax_errors",
        "file": ".\\_SRC FILES\\gui\\ai_agent_gui.py",
        "start_line": 45,
        "end_line": 56,
        "params": [
            "self"
        ],
        "docstring": "Detects syntax errors in the provided code using AST parsing.\n\nReturns:\n    str: Description of syntax errors if found, or an empty string."
    },
    {
        "name": "detect_runtime_errors",
        "file": ".\\_SRC FILES\\gui\\ai_agent_gui.py",
        "start_line": 58,
        "end_line": 73,
        "params": [
            "self",
            "globals_",
            "locals_"
        ],
        "docstring": "Detects runtime errors by executing the code in a controlled environment.\n\nArgs:\n    globals_ (dict): Optional globals for code execution.\n    locals_ (dict): Optional locals for code execution.\n\nReturns:\n    str: Description of runtime errors if found, or an empty string."
    },
    {
        "name": "detect_logic_errors",
        "file": ".\\_SRC FILES\\gui\\ai_agent_gui.py",
        "start_line": 75,
        "end_line": 97,
        "params": [
            "self"
        ],
        "docstring": "Detects potential logic errors using static analysis with pylint.\n\nReturns:\n    str: Output of pylint analysis indicating logic issues."
    },
    {
        "name": "detect_all_errors",
        "file": ".\\_SRC FILES\\gui\\ai_agent_gui.py",
        "start_line": 99,
        "end_line": 111,
        "params": [
            "self"
        ],
        "docstring": "Detects all error types: syntax, runtime, and logic.\n\nReturns:\n    dict: Dictionary of error types and their descriptions."
    },
    {
        "name": "__init__",
        "file": ".\\_SRC FILES\\gui\\gui.py",
        "start_line": 19,
        "end_line": 42,
        "params": [
            "self",
            "agent"
        ],
        "docstring": "Initialize the GUI with the AI agent instance.\n\nArgs:\n    agent (AIAgentWithMemory): The AI agent to interact with."
    },
    {
        "name": "send_message",
        "file": ".\\_SRC FILES\\gui\\gui.py",
        "start_line": 44,
        "end_line": 64,
        "params": [
            "self",
            "sender",
            "app_data"
        ],
        "docstring": "Callback function to send the user's message to the AI agent and display the response.\n\nArgs:\n    sender: The widget ID that triggered the callback.\n    app_data: Additional data from the widget (unused)."
    },
    {
        "name": "get_ai_response",
        "file": ".\\_SRC FILES\\gui\\gui.py",
        "start_line": 66,
        "end_line": 83,
        "params": [
            "self",
            "user_message"
        ],
        "docstring": "Get the AI's response to the user input and display it.\n\nArgs:\n    user_message (str): The user's message to the AI."
    },
    {
        "name": "display_message",
        "file": ".\\_SRC FILES\\gui\\gui.py",
        "start_line": 85,
        "end_line": 113,
        "params": [
            "self",
            "message",
            "sender_type"
        ],
        "docstring": "Display a message in the chat display area with appropriate styling.\n\nArgs:\n    message (str): The message to display.\n    sender_type (str): Type of sender ('user', 'ai', 'error') to apply styling."
    },
    {
        "name": "scroll_to_bottom",
        "file": ".\\_SRC FILES\\gui\\gui.py",
        "start_line": 115,
        "end_line": 123,
        "params": [
            "self"
        ],
        "docstring": "Scroll to the bottom of the chat display."
    },
    {
        "name": "clear_chat",
        "file": ".\\_SRC FILES\\gui\\gui.py",
        "start_line": 125,
        "end_line": 134,
        "params": [
            "self"
        ],
        "docstring": "Clear the chat history."
    },
    {
        "name": "save_chat",
        "file": ".\\_SRC FILES\\gui\\gui.py",
        "start_line": 136,
        "end_line": 159,
        "params": [
            "self"
        ],
        "docstring": "Save the current chat history to a text file."
    },
    {
        "name": "run",
        "file": ".\\_SRC FILES\\gui\\gui.py",
        "start_line": 161,
        "end_line": 203,
        "params": [
            "self"
        ],
        "docstring": "Start the Dear PyGui main loop with the enhanced GUI layout."
    },
    {
        "name": "run_application",
        "file": ".\\_SRC FILES\\gui\\main_window.py",
        "start_line": 79,
        "end_line": 83,
        "params": [],
        "docstring": null
    },
    {
        "name": "__init__",
        "file": ".\\_SRC FILES\\gui\\main_window.py",
        "start_line": 14,
        "end_line": 17,
        "params": [
            "self",
            "task",
            "manager"
        ],
        "docstring": null
    },
    {
        "name": "run",
        "file": ".\\_SRC FILES\\gui\\main_window.py",
        "start_line": 19,
        "end_line": 25,
        "params": [
            "self"
        ],
        "docstring": "Runs the async task and emits the result when complete."
    },
    {
        "name": "__init__",
        "file": ".\\_SRC FILES\\gui\\main_window.py",
        "start_line": 33,
        "end_line": 60,
        "params": [
            "self"
        ],
        "docstring": null
    },
    {
        "name": "run_task",
        "file": ".\\_SRC FILES\\gui\\main_window.py",
        "start_line": 62,
        "end_line": 71,
        "params": [
            "self"
        ],
        "docstring": "Initiates the reasoning process by passing the task input to TaskManager asynchronously."
    },
    {
        "name": "display_result",
        "file": ".\\_SRC FILES\\gui\\main_window.py",
        "start_line": 73,
        "end_line": 77,
        "params": [
            "self",
            "result"
        ],
        "docstring": "Displays the result from TaskManager in the GUI."
    },
    {
        "name": "__init__",
        "file": ".\\_SRC FILES\\pipeline\\optimization_pipeline.py",
        "start_line": 34,
        "end_line": 41,
        "params": [
            "self",
            "target_accuracy",
            "max_cycles"
        ],
        "docstring": null
    },
    {
        "name": "run_test_cycle",
        "file": ".\\_SRC FILES\\pipeline\\optimization_pipeline.py",
        "start_line": 43,
        "end_line": 69,
        "params": [
            "self"
        ],
        "docstring": "Runs a single cycle of tests, diagnostics, and optimization.\nLogs progress and adjustments made during the cycle."
    },
    {
        "name": "run_tests",
        "file": ".\\_SRC FILES\\pipeline\\optimization_pipeline.py",
        "start_line": 71,
        "end_line": 80,
        "params": [
            "self"
        ],
        "docstring": "Simulates running tests to evaluate model or system performance.\n\nReturns:\n    int: Simulated accuracy result."
    },
    {
        "name": "apply_optimizations",
        "file": ".\\_SRC FILES\\pipeline\\optimization_pipeline.py",
        "start_line": 82,
        "end_line": 102,
        "params": [
            "self",
            "diagnostics"
        ],
        "docstring": "Adjust configurations based on diagnostics. Simulates parameter tuning.\n\nArgs:\n    diagnostics (str): Diagnostics insights from the DiagnosticsAgent.\n\nReturns:\n    Dict[str, Any]: Dictionary of applied settings."
    },
    {
        "name": "log_results",
        "file": ".\\_SRC FILES\\pipeline\\optimization_pipeline.py",
        "start_line": 104,
        "end_line": 116,
        "params": [
            "self",
            "message"
        ],
        "docstring": "Logs the current cycle's results to the journal for record-keeping.\n\nArgs:\n    message (str): Log message summarizing the cycle's activities."
    },
    {
        "name": "start_pipeline",
        "file": ".\\_SRC FILES\\pipeline\\optimization_pipeline.py",
        "start_line": 118,
        "end_line": 131,
        "params": [
            "self"
        ],
        "docstring": "Starts the optimization pipeline, running cycles until the target accuracy\nis achieved or the maximum cycle limit is reached."
    },
    {
        "name": "__init__",
        "file": ".\\_SRC FILES\\SRC FILES\\agents\\core\\AgentDispatcher.py",
        "start_line": 77,
        "end_line": 87,
        "params": [
            "self",
            "rate_limit",
            "time_window"
        ],
        "docstring": "Initializes the RateLimiter.\n\nArgs:\n    rate_limit (int): Max number of tasks allowed in the time window.\n    time_window (int): Time window in seconds for rate limit."
    },
    {
        "name": "release",
        "file": ".\\_SRC FILES\\SRC FILES\\agents\\core\\AgentDispatcher.py",
        "start_line": 102,
        "end_line": 105,
        "params": [
            "self"
        ],
        "docstring": "Releases a token back to the bucket."
    },
    {
        "name": "__init__",
        "file": ".\\_SRC FILES\\SRC FILES\\agents\\core\\AgentDispatcher.py",
        "start_line": 114,
        "end_line": 145,
        "params": [
            "self",
            "agents_directory",
            "model_name",
            "ollama_url",
            "max_retries"
        ],
        "docstring": "Initializes the AgentDispatcher with necessary utilities and dynamically loads agents.\n\nArgs:\n    agents_directory (str): The directory where agent plugin modules are located.\n    model_name (str): The name of the Mistral model configured in Ollama.\n    ollama_url (str): The base URL for the Ollama API.\n    max_retries (int): Maximum number of retries for task execution."
    },
    {
        "name": "load_agents",
        "file": ".\\_SRC FILES\\SRC FILES\\agents\\core\\AgentDispatcher.py",
        "start_line": 147,
        "end_line": 197,
        "params": [
            "self",
            "agents_directory"
        ],
        "docstring": "Loads agent plugins from the specified directory.\n\nArgs:\n    agents_directory (str): Directory containing agent plugin modules.\n\nReturns:\n    Dict[str, AgentPlugin]: Loaded agent instances."
    },
    {
        "name": "add_agent",
        "file": ".\\_SRC FILES\\SRC FILES\\agents\\core\\AgentDispatcher.py",
        "start_line": 438,
        "end_line": 447,
        "params": [
            "self",
            "agent_instance"
        ],
        "docstring": "Adds a new agent to the dispatcher dynamically.\n\nArgs:\n    agent_instance (AgentPlugin): The agent instance to add."
    },
    {
        "name": "remove_agent",
        "file": ".\\_SRC FILES\\SRC FILES\\agents\\core\\AgentDispatcher.py",
        "start_line": 449,
        "end_line": 461,
        "params": [
            "self",
            "agent_name"
        ],
        "docstring": "Removes an agent from the dispatcher.\n\nArgs:\n    agent_name (str): The name of the agent to remove."
    },
    {
        "name": "list_agents",
        "file": ".\\_SRC FILES\\SRC FILES\\agents\\core\\AgentDispatcher.py",
        "start_line": 463,
        "end_line": 479,
        "params": [
            "self"
        ],
        "docstring": "Lists all registered agents.\n\nReturns:\n    List[str]: Names of all agents currently available."
    },
    {
        "name": "_send_alert",
        "file": ".\\_SRC FILES\\SRC FILES\\agents\\core\\AgentDispatcher.py",
        "start_line": 528,
        "end_line": 536,
        "params": [
            "self",
            "message"
        ],
        "docstring": "Sends an alert for critical failures.\n\nArgs:\n    message (str): Alert message."
    },
    {
        "name": "__init__",
        "file": ".\\_SRC FILES\\SRC FILES\\agents\\core\\AgentDispatcher.py",
        "start_line": 548,
        "end_line": 575,
        "params": [
            "self",
            "name",
            "project_name",
            "memory_manager",
            "performance_monitor",
            "dispatcher"
        ],
        "docstring": "Initialize the AI agent with a name, project name, a MemoryManager instance,\nand a PerformanceMonitor instance.\n\nArgs:\n    name (str): Name of the AI agent.\n    project_name (str): Name of the project/domain the agent is associated with.\n    memory_manager (MemoryManager): Instance of MemoryManager for handling memory operations.\n    performance_monitor (PerformanceMonitor): Instance of PerformanceMonitor for tracking performance.\n    dispatcher (AgentDispatcher): Reference to the dispatcher for self-improvement actions."
    },
    {
        "name": "describe_capabilities",
        "file": ".\\_SRC FILES\\SRC FILES\\agents\\core\\AgentDispatcher.py",
        "start_line": 632,
        "end_line": 644,
        "params": [
            "self"
        ],
        "docstring": "Returns a description of the agent's capabilities.\n\nReturns:\n    str: Capabilities description."
    },
    {
        "name": "self_improve",
        "file": ".\\_SRC FILES\\SRC FILES\\agents\\core\\AgentDispatcher.py",
        "start_line": 646,
        "end_line": 680,
        "params": [
            "self"
        ],
        "docstring": "Analyze performance and adjust operations to improve future interactions.\nThis method embodies the self-improvement capability of the AI agent."
    },
    {
        "name": "take_action_based_on_failure",
        "file": ".\\_SRC FILES\\SRC FILES\\agents\\core\\AgentDispatcher.py",
        "start_line": 682,
        "end_line": 703,
        "params": [
            "self",
            "reason"
        ],
        "docstring": "Takes specific actions based on the identified failure reason.\n\nArgs:\n    reason (str): The most common failure reason."
    },
    {
        "name": "suggest_improvements",
        "file": ".\\_SRC FILES\\SRC FILES\\agents\\core\\AgentDispatcher.py",
        "start_line": 705,
        "end_line": 728,
        "params": [
            "self"
        ],
        "docstring": "Suggests improvements to its own operations based on performance data."
    },
    {
        "name": "__init__",
        "file": ".\\_SRC FILES\\SRC FILES\\agents\\core\\AIAgentWithMemory.py",
        "start_line": 31,
        "end_line": 54,
        "params": [
            "self",
            "name",
            "project_name",
            "memory_manager",
            "performance_monitor",
            "dispatcher"
        ],
        "docstring": "Initialize the AI agent with a name, project name, a MemoryManager instance,\nand a PerformanceMonitor instance.\n\nArgs:\n    name (str): Name of the AI agent.\n    project_name (str): Name of the project/domain the agent is associated with.\n    memory_manager (MemoryManager): Instance of MemoryManager for handling memory operations.\n    performance_monitor (PerformanceMonitor): Instance of PerformanceMonitor for tracking performance.\n    dispatcher (AgentDispatcher): Reference to the dispatcher for self-improvement actions."
    },
    {
        "name": "run_query",
        "file": ".\\_SRC FILES\\SRC FILES\\agents\\core\\AIAgentWithMemory.py",
        "start_line": 56,
        "end_line": 105,
        "params": [
            "self",
            "prompt"
        ],
        "docstring": "Run a query against Mistral 7B via Ollama and store the interaction in memory.\n\nArgs:\n    prompt (str): The user prompt to send to Mistral.\n\nReturns:\n    str: The response from Mistral or an error message."
    },
    {
        "name": "chat",
        "file": ".\\_SRC FILES\\SRC FILES\\agents\\core\\AIAgentWithMemory.py",
        "start_line": 107,
        "end_line": 124,
        "params": [
            "self",
            "user_input"
        ],
        "docstring": "Facilitate a chat interaction with the AI agent.\n\nArgs:\n    user_input (str): Input from the user.\n\nReturns:\n    str: Response from the AI agent."
    },
    {
        "name": "self_improve",
        "file": ".\\_SRC FILES\\SRC FILES\\agents\\core\\AIAgentWithMemory.py",
        "start_line": 126,
        "end_line": 160,
        "params": [
            "self"
        ],
        "docstring": "Analyze performance and adjust operations to improve future interactions.\nThis method embodies the self-improvement capability of the AI agent."
    },
    {
        "name": "take_action_based_on_failure",
        "file": ".\\_SRC FILES\\SRC FILES\\agents\\core\\AIAgentWithMemory.py",
        "start_line": 162,
        "end_line": 181,
        "params": [
            "self",
            "reason"
        ],
        "docstring": "Takes specific actions based on the identified failure reason.\n\nArgs:\n    reason (str): The most common failure reason."
    },
    {
        "name": "suggest_improvements",
        "file": ".\\_SRC FILES\\SRC FILES\\agents\\core\\AIAgentWithMemory.py",
        "start_line": 183,
        "end_line": 204,
        "params": [
            "self"
        ],
        "docstring": "Suggests improvements to its own operations based on performance data."
    },
    {
        "name": "dispatcher",
        "file": ".\\_SRC FILES\\tests\\test_agent_dispatcher.py",
        "start_line": 9,
        "end_line": 10,
        "params": [],
        "docstring": null
    },
    {
        "name": "test_list_agents",
        "file": ".\\_SRC FILES\\tests\\test_agent_dispatcher.py",
        "start_line": 38,
        "end_line": 41,
        "params": [
            "dispatcher"
        ],
        "docstring": null
    },
    {
        "name": "setUp",
        "file": ".\\_SRC FILES\\tests\\test_ai_agent.py",
        "start_line": 18,
        "end_line": 24,
        "params": [
            "self"
        ],
        "docstring": "Set up a fresh MemoryManager and AIAgentWithMemory instance before each test."
    },
    {
        "name": "tearDown",
        "file": ".\\_SRC FILES\\tests\\test_ai_agent.py",
        "start_line": 26,
        "end_line": 32,
        "params": [
            "self"
        ],
        "docstring": "Clean up by removing the test database after each test."
    },
    {
        "name": "test_chat_response",
        "file": ".\\_SRC FILES\\tests\\test_ai_agent.py",
        "start_line": 35,
        "end_line": 50,
        "params": [
            "self",
            "mock_subprocess_run"
        ],
        "docstring": "Test that the chat method returns the AI's response correctly."
    },
    {
        "name": "test_run_query_subprocess_error",
        "file": ".\\_SRC FILES\\tests\\test_ai_agent.py",
        "start_line": 53,
        "end_line": 65,
        "params": [
            "self",
            "mock_subprocess_run"
        ],
        "docstring": "Test that run_query handles subprocess errors gracefully."
    },
    {
        "name": "test_run_query_unexpected_error",
        "file": ".\\_SRC FILES\\tests\\test_ai_agent.py",
        "start_line": 68,
        "end_line": 76,
        "params": [
            "self",
            "mock_subprocess_run"
        ],
        "docstring": "Test that run_query handles unexpected exceptions gracefully."
    },
    {
        "name": "setup_agents",
        "file": ".\\_SRC FILES\\tests\\test_api.py",
        "start_line": 12,
        "end_line": 15,
        "params": [],
        "docstring": null
    },
    {
        "name": "test_submit_task",
        "file": ".\\_SRC FILES\\tests\\test_api.py",
        "start_line": 17,
        "end_line": 29,
        "params": [],
        "docstring": null
    },
    {
        "name": "test_list_agents",
        "file": ".\\_SRC FILES\\tests\\test_api.py",
        "start_line": 31,
        "end_line": 39,
        "params": [],
        "docstring": null
    },
    {
        "name": "test_add_remove_agent",
        "file": ".\\_SRC FILES\\tests\\test_api.py",
        "start_line": 41,
        "end_line": 59,
        "params": [],
        "docstring": null
    },
    {
        "name": "setUp",
        "file": ".\\_SRC FILES\\tests\\test_memory_manager.py",
        "start_line": 15,
        "end_line": 20,
        "params": [
            "self"
        ],
        "docstring": "Set up a fresh MemoryManager instance with a test database before each test."
    },
    {
        "name": "tearDown",
        "file": ".\\_SRC FILES\\tests\\test_memory_manager.py",
        "start_line": 22,
        "end_line": 28,
        "params": [
            "self"
        ],
        "docstring": "Clean up by removing the test database after each test."
    },
    {
        "name": "test_save_and_retrieve_memory",
        "file": ".\\_SRC FILES\\tests\\test_memory_manager.py",
        "start_line": 30,
        "end_line": 37,
        "params": [
            "self"
        ],
        "docstring": "Test that memory entries can be saved and retrieved correctly."
    },
    {
        "name": "test_retrieve_memory_limit",
        "file": ".\\_SRC FILES\\tests\\test_memory_manager.py",
        "start_line": 39,
        "end_line": 49,
        "params": [
            "self"
        ],
        "docstring": "Test that the retrieve_memory method respects the limit parameter."
    },
    {
        "name": "test_delete_memory_older_than",
        "file": ".\\_SRC FILES\\tests\\test_memory_manager.py",
        "start_line": 51,
        "end_line": 73,
        "params": [
            "self"
        ],
        "docstring": "Test that memory entries older than a specified number of days are deleted."
    },
    {
        "name": "test_retrieve_memory_no_entries",
        "file": ".\\_SRC FILES\\tests\\test_memory_manager.py",
        "start_line": 75,
        "end_line": 80,
        "params": [
            "self"
        ],
        "docstring": "Test that retrieving memory for a project with no entries returns an empty string."
    },
    {
        "name": "migrate_sqlite_to_postgresql",
        "file": ".\\_SRC FILES\\tools\\migrate.py",
        "start_line": 15,
        "end_line": 70,
        "params": [
            "sqlite_db_path",
            "postgres_config",
            "table_name"
        ],
        "docstring": "Migrate data from SQLite to PostgreSQL.\n\nArgs:\n    sqlite_db_path (str): Path to the SQLite database file.\n    postgres_config (dict): Configuration parameters for PostgreSQL connection.\n    table_name (str): Name of the table to migrate."
    }
]