"""
This module defines a central agent registry system responsible for the management of AI agents.
It facilitates dynamic registration, retrieval, deregistration, and listing of various AI agents,
including a professor synthesis agent, a forecasting model, a memory engine, a graph memory module,
and a journaling agent. The registry ensures that each agent is uniquely registered and can be
efficiently accessed or removed as required on demand.
"""

import logging
from agents.core.AgentBase import AgentBase
from agents.core.professor_synapse_agent import ProfessorSynapseAgent
from agents.core.journal_agent import JournalAgent
from agents.core.memory_engine import MemoryEngine
from agents.core.gpt_forecasting import GPTForecaster
from agents.core.graph_memory import GraphMemory

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

class AgentRegistry:
    """
    📌 Manages the registration, retrieval, and lifecycle of AI agents dynamically.
    """

    def __init__(self):
        """Initializes and registers available agents."""
        self.agents = {
            "professor": ProfessorSynapseAgent(),
            "forecasting": GPTForecaster(),
            "memory": MemoryEngine(),
            "graph": GraphMemory(),
            "JournalAgent": JournalAgent(),
        }
        logger.info(f"✅ AgentRegistry initialized with agents: {list(self.agents.keys())}")

    def register_agent(self, name: str, agent_instance: AgentBase):
        """
        Dynamically registers a new agent.

        Args:
            name (str): The unique name of the agent.
            agent_instance (AgentBase): The agent instance.

        Returns:
            bool: True if registered successfully, False if agent already exists.
        """
        if name in self.agents:
            logger.warning(f"⚠️ Agent '{name}' is already registered.")
            return False

        self.agents[name] = agent_instance
        logger.info(f"✅ Agent '{name}' registered successfully.")
        return True

    def unregister_agent(self, name: str):
        """
        Removes an agent from the registry.

        Args:
            name (str): The name of the agent to remove.

        Returns:
            bool: True if removed successfully, False if agent not found.
        """
        if name in self.agents:
            del self.agents[name]
            logger.info(f"🗑️ Agent '{name}' unregistered successfully.")
            return True
        logger.warning(f"⚠️ Attempted to remove non-existent agent '{name}'.")
        return False

    def get_agent(self, name: str) -> AgentBase:
        """
        Retrieves an agent by name.

        Args:
            name (str): The name of the agent.

        Returns:
            AgentBase: The agent instance or None if not found.
        """
        agent = self.agents.get(name)
        if agent:
            return agent
        logger.warning(f"❌ Agent '{name}' not found in registry.")
        return None

    def agent_exists(self, name: str) -> bool:
        """
        Checks if an agent exists in the registry.

        Args:
            name (str): The agent's name.

        Returns:
            bool: True if the agent exists, False otherwise.
        """
        return name in self.agents

    def list_agents(self):
        """
        Lists all registered agent names.

        Returns:
            list: A list of available agent names.
        """
        return list(self.agents.keys())
