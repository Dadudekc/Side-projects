"""
This module defines the AIPatchRetryManager, an AI-driven mechanism that manages patch retries for software systems. It utilizes artificial intelligence to analyze and understand why certain patches failed, dynamically adjusts patch strategies based on confidence levels, and retries patches before a final decision for rollback or manual review. The system integrates AI-driven analysis, confidence management, and automated patch adjustments to enhance reliability during software maintenance and updates.
"""

import logging
from typing import Dict, List
from ai_engine.patch_analyzer import AIPatchAnalyzer
from ai_engine.confidence_manager import AIConfidenceManager
from ai_engine.models.debugger.auto_fix_manager import AutoFixManager

logger = logging.getLogger("AIPatchRetryManager")
logger.setLevel(logging.DEBUG)

class AIPatchRetryManager:
    """
    Manages AI-assisted patch retries before rollback.

    - AI explains why a patch failed.
    - AI suggests modifications if confidence improves.
    - Automatically retries modified patches.
    - If all fails, marks patch for manual review.
    """

    CONFIDENCE_THRESHOLD = 0.2  # Minimum confidence to attempt retry
    MAX_AI_PATCH_ATTEMPTS = 2   # AI gets two additional tries before rollback

    def __init__(self):
        self.retry_manager = AutoFixManager()
        self.ai_analyzer = AIPatchAnalyzer()
        self.confidence_manager = AIConfidenceManager()

    def retry_failed_patches(self, failed_patches: Dict[str, List[str]]):
        """
        AI reviews failed patches and decides whether to retry or flag them.
        """
        for error_signature, patches in failed_patches.items():
            for patch in patches:
                # Analyze the failed patch
                reason, confidence_boost = self.ai_analyzer.analyze_failed_patch(error_signature, patch)

                # Retrieve current confidence and update
                current_confidence = self.confidence_manager.get_confidence(error_signature)
                new_confidence = min(1.0, current_confidence + confidence_boost)  # Ensure confidence ‚â§ 1.0

                logger.info(f"üîÑ Confidence updated: {current_confidence:.2f} ‚û° {new_confidence:.2f} for {error_signature}")

                if new_confidence >= self.CONFIDENCE_THRESHOLD:
                    logger.info(f"üõ†Ô∏è AI suggests retrying patch for {error_signature}.")
                    modified_patch = self.ai_analyzer.modify_failed_patch(error_signature, patch)
                    patch_success = self.retry_manager.debugging_strategy.apply_patch(modified_patch)

                    if patch_success:
                        logger.info(f"‚úÖ AI-modified patch for {error_signature} worked!")
                        self.retry_manager.debugging_strategy.learning_db[error_signature] = {
                            "patch": modified_patch, "success": True
                        }
                        self.retry_manager.debugging_strategy._save_learning_db()
                    else:
                        logger.warning(f"‚ùå AI-modified patch failed for {error_signature}.")
                else:
                    logger.error(f"üö® AI confidence remains low. Marking {error_signature} for manual review.")
