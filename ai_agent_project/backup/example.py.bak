"""

This module provides functionality for automatically generating and updating module-level docstrings for Python files in a given project. It uses the OpenAI GPT-4 turbo model to analyse Python code and generate the docstrings. It then inserts or updates the docstring in each Python file. Existing docstrings are first extracted and checked to avoid unnecessary updates. The module also ensures clean code by removing excessive blank lines. In the event of any modifications, the original files are backed-up. An environment variable is used
"""

import os
import shutil
import openai

# OpenAI API Key (Ensure it's set in your environment)
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
if not OPENAI_API_KEY:
    raise ValueError("‚ùå OPENAI_API_KEY is not set. Set it as an environment variable before running.")

# Define project directories
PROJECT_ROOT = "D:/side_projects/Side-projects/ai_agent_project"
BACKUP_FOLDER = os.path.join(PROJECT_ROOT, "backup")
EXAMPLE_FILE = os.path.join(PROJECT_ROOT, "example.py")  # Example file for testing

# Ensure backup folder exists
os.makedirs(BACKUP_FOLDER, exist_ok=True)

# OpenAI Prompt Template
PROMPT_TEMPLATE = """
You are an expert software architect. Analyze the provided Python file and generate a concise module-level docstring.

- Summarize its purpose in 3-4 lines.
- If it's a utility, agent, or AI model, mention its primary function.
- Be clear, direct, and informative.

File Contents:
{code_snippet}

---

Generate a module docstring:
"""

def get_openai_response(code_snippet, mock_mode=False):
    """Queries OpenAI to generate a module docstring or returns a mock response for testing."""
    if mock_mode:
        return "A utility module for managing and updating Python file docstrings using OpenAI."

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4-turbo",
            messages=[{"role": "system", "content": PROMPT_TEMPLATE.format(code_snippet=code_snippet)}],
            max_tokens=100
        )
        return response["choices"][0]["message"]["content"].strip()
    except Exception as e:
        print(f"‚ùå OpenAI API call failed: {e}")
        return None

def extract_existing_docstring(lines):
    """Extracts the existing module docstring if it exists."""
    if not lines:
        return None, lines

    stripped_lines = [line.strip() for line in lines]

    # Look for a triple-quoted docstring at the top
    if stripped_lines[0].startswith("\"\"\"") and stripped_lines[0] != "\"\"\"\"\"\"":
        docstring_lines = [lines[0]]
        for i in range(1, len(lines)):
            docstring_lines.append(lines[i])
            if stripped_lines[i].endswith("\"\"\""):
                return "\n".join(docstring_lines).strip(), lines[i + 1:]  # Ensure newline after docstring
    return None, lines

def clean_code(lines):
    """Removes excessive blank lines while preserving logical spacing."""
    cleaned_lines = []
    prev_line_blank = False

    for line in lines:
        if line.strip() == "":
            if not prev_line_blank:  # Allow only one blank line in a row
                cleaned_lines.append("")
            prev_line_blank = True
        else:
            cleaned_lines.append(line.rstrip())  # Trim trailing spaces
            prev_line_blank = False

    return "\n".join(cleaned_lines).strip() + "\n"  # Strip leading/trailing blank lines, ensure one at the end

def insert_or_update_docstring(file_path, mock_mode=False):
    """Inserts or updates the module-level docstring in a Python file."""
    with open(file_path, "r", encoding="utf-8") as f:
        lines = f.readlines()

    # Extract existing docstring
    existing_docstring, remaining_lines = extract_existing_docstring(lines)
    code_without_docstring = clean_code(remaining_lines)

    # If the file is empty after stripping, do not process
    if not code_without_docstring.strip():
        print(f"‚ö† Skipping empty file: {file_path}")
        return

    # Generate new docstring (Mock mode uses predefined response)
    new_docstring = get_openai_response(code_without_docstring, mock_mode=mock_mode)
    if not new_docstring:
        print(f"‚ö† Skipping update for {file_path} (Failed to generate docstring)")
        return

    # **üîß Remove extra triple quotes from OpenAI response if present**
    if new_docstring.startswith('"""') and new_docstring.endswith('"""'):
        new_docstring = new_docstring.strip('"')  # Remove excessive quotes

    # Properly format the final docstring
    formatted_docstring = f'"""\n{new_docstring.strip()}\n"""'

    # Skip updating if the existing docstring already contains the purpose
    if existing_docstring and new_docstring.strip() in existing_docstring:
        print(f"‚úÖ No changes needed for {file_path} (Purpose already included)")
        return

    # Print debug info before writing
    print(f"\nüìú **Generated Docstring for {file_path}:**\n{formatted_docstring}\n")

    # Backup original file before modifying (store in `backup/` folder)
    backup_path = os.path.join(BACKUP_FOLDER, os.path.basename(file_path) + ".bak")
    shutil.copy(file_path, backup_path)
    print(f"üìÇ Backup saved to: {backup_path}")

    # **Ensure exactly one blank line after the docstring**
    new_code = f"{formatted_docstring}\n\n{code_without_docstring.strip()}\n"

    # Write back the updated content
    with open(file_path, "w", encoding="utf-8") as f:
        f.write(new_code)
        f.flush()
        os.fsync(f.fileno())  # Ensure immediate write

    print(f"‚úÖ Updated: {file_path}")

def process_project(mock_mode=False):
    """Iterates through the project and updates all Python files."""
    for root, _, files in os.walk(PROJECT_ROOT):
        for file in files:
            if file.endswith(".py"):  # Ensure only Python files are processed
                file_path = os.path.join(root, file)
                insert_or_update_docstring(file_path, mock_mode=mock_mode)

if __name__ == "__main__":
    # Single file test before full execution
    print("\nüîç Running **OpenAI response test** on a single file before full execution...")
    insert_or_update_docstring(EXAMPLE_FILE, mock_mode=False)  # Use real OpenAI response

    user_input = input("\nProceed with updating all files? (yes/no): ").strip().lower()
    if user_input == "yes":
        process_project()
        print("\nüéØ All Python files have been processed and updated with module-level docstrings.")
    else:
        print("\n‚ùå Update aborted. Only the test file was modified.")
